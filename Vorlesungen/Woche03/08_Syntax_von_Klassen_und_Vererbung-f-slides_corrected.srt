79 # slide
00:00:01,449 --> 00:00:03,080
So syntax of classes:

00:00:03,080 --> 00:00:06,950
How do we represent classes
later in a class diagram?

00:00:06,950 --> 00:00:12,950
I'm doing this here for an example
that we can then easily generalize to

00:00:12,950 --> 00:00:15,059
other situations.

00:00:15,059 --> 00:00:16,740
Namely, the example is to be:

00:00:16,740 --> 00:00:19,840
A class of points is to be created.

00:00:19,840 --> 00:00:22,520
So we want to store points
of the two-dimensional space.

00:00:22,520 --> 00:00:26,960
So we will have x and y coordinates,
and some operations on these

00:00:26,960 --> 00:00:27,960
points.

00:00:27,960 --> 00:00:32,930
So maybe this is supposed to be a vector graphics
domain again somehow, which we want to specify in

00:00:32,930 --> 00:00:35,120
an object-oriented way this time.

00:00:35,120 --> 00:00:36,780
You could imagine that.

00:00:36,780 --> 00:00:41,840
Then there will be a graph at the end,
and in the graph there will be individual

00:00:41,840 --> 00:00:47,030
nodes, each of which is such
a box (so a little graph).

00:00:47,030 --> 00:00:49,579
And what will appear in it?

00:00:49,579 --> 00:00:52,489
That will be a
three-part box in each case.

00:00:52,489 --> 00:00:58,899
And there's first of all a class name, so
the identification of the class itself.

00:00:58,899 --> 00:01:03,260
Then there is an area where
attributes can be entered.

00:01:03,260 --> 00:01:08,149
In this case, these are the information to
be stored, i.e., the x and y coordinates.

00:01:08,149 --> 00:01:09,670
This is a number in each case.

00:01:09,670 --> 00:01:12,630
This is specified here as type.

00:01:12,630 --> 00:01:15,509
This is not always done in
such detail so early on.

00:01:15,509 --> 00:01:18,560
So we saw examples earlier where
the type information was missing.

00:01:18,560 --> 00:01:22,119
Usually, in the exercises (and later on
in the exam), we will expect you to put

00:01:22,119 --> 00:01:24,899
meaningful type information on there.

00:01:24,899 --> 00:01:28,090
And then there is this third
area, where operations or

00:01:28,090 --> 00:01:33,219
methods can be recorded
(also with their types).

00:01:33,219 --> 00:01:37,939
This is of course somehow the bridge to
dynamic modeling, where you would then express

00:01:37,939 --> 00:01:40,340
what these methods are supposed to do.

00:01:40,340 --> 00:01:46,349
Whereas here you just statically
state what their types are.

00:01:46,349 --> 00:01:47,749
As a comment:

00:01:47,749 --> 00:01:50,009
Of course, there
are already activities here.

00:01:50,009 --> 00:01:57,810
For example, one may move a point in x- and
y-direction by certain numerical differences.

00:01:57,810 --> 00:02:00,219
Nevertheless, what is written
here is still static modeling.

00:02:00,219 --> 00:02:05,070
Because there is no code or
description of what the operations trigger.

00:02:05,070 --> 00:02:09,620
There is only the name and the types.

00:02:09,620 --> 00:02:13,569
On the one hand the argument
types are interesting, which are

00:02:13,569 --> 00:02:14,569
in brackets.

00:02:14,569 --> 00:02:18,750
So you can move a point, and then you
have to say by what you want to move it,

00:02:18,750 --> 00:02:20,470
by what differences.

00:02:20,470 --> 00:02:24,810
And then there is no return
value for this operation.

00:02:24,810 --> 00:02:25,810
Why not?

00:02:25,810 --> 00:02:29,900
Because this moving acts
directly on the point itself.

00:02:29,900 --> 00:02:34,530
And there, when we introduced object
orientation, we had said that then no

00:02:34,530 --> 00:02:41,620
explicit specification is needed, because
implicitly it operates on the concrete point.

00:02:41,620 --> 00:02:47,120
On the other hand, if we wanted to determine, for
example, the vector length, that is, the length of the

00:02:47,120 --> 00:02:51,000
vector from the coordinate origin to the current
point, then this would not be a change of the

00:02:51,000 --> 00:02:52,409
point, but we
want to calculate something.

00:02:52,409 --> 00:02:57,180
We don't need arguments because we are working
on the point itself and don't need any

00:02:57,180 --> 00:02:58,180
other information.

00:02:58,180 --> 00:03:01,689
But we want to get a number back
instead of changing the point.

00:03:01,689 --> 00:03:04,340
Then we would just
say here's what comes out.

00:03:04,340 --> 00:03:05,769
And then this is the result.

00:03:05,769 --> 00:03:15,019
So the vector length returns a number, that's
why it says that as the result type here.

00:03:15,019 --> 00:03:19,209
A couple of other comments.

00:03:19,209 --> 00:03:22,739
First of all, the attributes that are
here, these are not attributes of the class

00:03:22,739 --> 00:03:23,739
per se.

00:03:23,739 --> 00:03:27,800
So of course they are in the class
diagram as attributes on the class.

00:03:27,800 --> 00:03:31,190
But it's not that the class as a
whole has an x and y coordinate.

00:03:31,190 --> 00:03:35,879
Rather, the class is a collection of objects,
namely individual points, and each instance has

00:03:35,879 --> 00:03:38,180
attributes for these x and y values.

00:03:38,180 --> 00:03:39,230
So it's important:

00:03:39,230 --> 00:03:40,819
These are what
are called instance attributes.

00:03:40,819 --> 00:03:43,480
They ultimately belong to
the instances of the class.

00:03:43,480 --> 00:03:48,489
So to the objects that we'll form
later, and not to the class itself.

00:03:48,489 --> 00:03:51,870
But they are kept in the class because
all objects of the class should have

00:03:51,870 --> 00:03:55,379
an x and y value each (but different
values for different objects).

00:03:55,379 --> 00:04:00,959
Here is simply the information that these
two values should always be present.

00:04:00,959 --> 00:04:05,639
Then a detail you may know if you
have done object-oriented programming

00:04:05,639 --> 00:04:06,639
before.

00:04:06,639 --> 00:04:10,249
Or what you may also encounter when
you look at examples from books.

00:04:10,249 --> 00:04:15,999
Sometimes there are some "funny
symbols" at the attributes or at the

00:04:15,999 --> 00:04:19,280
methods, some special
symbols: Plus, minus.

00:04:19,280 --> 00:04:22,760
Sometimes these can also be
designations, i.e., character strings.

00:04:22,760 --> 00:04:24,420
But sometimes they are
just these short symbols.

00:04:24,420 --> 00:04:30,510
These are so-called visibility
annotations on the attributes.

00:04:30,510 --> 00:04:38,780
They say something about, later in the
implementation, from which other objects

00:04:38,780 --> 00:04:42,510
instance attributes and
methods may be accessed.

00:04:42,510 --> 00:04:44,390
We will ignore that completely.

00:04:44,390 --> 00:04:51,070
So that doesn't matter
to us in the modeling.

00:04:51,070 --> 00:04:56,210
If you see something like that in an
example (it won't occur in our lecture

00:04:56,210 --> 00:05:02,160
and exercise), if you see examples from
elsewhere, you can ignore those modifiers for

00:05:02,160 --> 00:05:06,660
the purpose of this lecture.

00:05:06,660 --> 00:05:13,020
And then another way to pack even
more information into the class.

00:05:13,020 --> 00:05:19,500
Even in giving this representation,
what we had done now was we gave

00:05:19,500 --> 00:05:20,500
the attributes types.

00:05:20,500 --> 00:05:22,280
Sometimes you give them default values.

00:05:22,280 --> 00:05:28,470
Where the idea then is that if in individual
objects, for example, the x coordinate is not

00:05:28,470 --> 00:05:35,920
explicitly assigned, then the default value
from the class specification would simply apply.

00:05:35,920 --> 00:05:38,430
Then you would write it like this:

00:05:38,430 --> 00:05:41,000
So x must be an
integer, and the default is zero.

00:05:41,000 --> 00:05:46,880
That would mean then that if in an object
of this class nothing is specified for x,

00:05:46,880 --> 00:05:53,420
it would simply already
directly have the value zero.

00:05:53,420 --> 00:05:57,880
Now, of course, classes are
there to describe objects.

00:05:57,880 --> 00:06:02,410
So the goal is to describe with a
class the structure of certain objects.

00:06:02,410 --> 00:06:09,060
And then, of course, an instance
of a class represents a concrete

00:06:09,060 --> 00:06:10,060
object.

00:06:10,060 --> 00:06:15,510
So our Point class can have many
objects, which are its manifestation.

00:06:15,510 --> 00:06:22,090
And a concrete point, for example, my concrete
point of the class "Point", would then be

00:06:22,090 --> 00:06:27,470
specified by assigning concrete
numbers to the instance attributes.

00:06:27,470 --> 00:06:29,940
You would then write that down like that.

00:06:29,940 --> 00:06:35,770
So you can certainly notate the class
and the object together, and then say

00:06:35,770 --> 00:06:37,690
by this particular kind of arrow:

00:06:37,690 --> 00:06:40,100
This is an instance of this class.

00:06:40,100 --> 00:06:43,500
And then there are
only two sections here.

00:06:43,500 --> 00:06:50,010
The name of the object and the indication
that it is an object of this class.

00:06:50,010 --> 00:06:56,500
Then there's this syntax underline,
ultimately to distinguish classes and objects.

00:06:56,500 --> 00:07:01,500
But most importantly, there is
no method box in the objects.

00:07:01,500 --> 00:07:05,890
So this part down here doesn't
exist in the individual objects.

00:07:05,890 --> 00:07:06,890
Why not?

00:07:06,890 --> 00:07:08,620
Because this code is reused.

00:07:08,620 --> 00:07:14,560
So while each object in the class
may have its own x and y values, the

00:07:14,560 --> 00:07:19,990
functionality (moving a point, determining
the vector length of a point, etc.) is

00:07:19,990 --> 00:07:22,630
not something that is different
for individual points.

00:07:22,630 --> 00:07:26,000
So the functionality is
the same for all points.

00:07:26,000 --> 00:07:32,360
That's why the methods/operations are native
to the class and not to individual instances

00:07:32,360 --> 00:07:34,350
of the class.

00:07:34,350 --> 00:07:37,530
That's why there are
no methods on the right.

00:07:37,530 --> 00:07:42,960
This is a typical mistake in exercises/exams,
that methods are also specified for

00:07:42,960 --> 00:07:43,960
objects.

00:07:43,960 --> 00:07:48,750
This should not be the case and
can lead to a point deduction.

00:07:48,750 --> 00:07:56,460
So if you want to have different behavior for
different objects, then they would simply not

00:07:56,460 --> 00:07:57,770
be objects of the same class.

00:07:57,770 --> 00:07:59,690
Then you would
have two different classes.

00:07:59,690 --> 00:08:04,110
So there can still be classes that
also store two integers, for example,

00:08:04,110 --> 00:08:06,860
a class for arithmetic fractions.

00:08:06,860 --> 00:08:07,960
There you also need two numbers.

00:08:07,960 --> 00:08:12,220
But that would not be a point class, because
it would have completely different operations.

00:08:12,220 --> 00:08:14,240
Then you would have
a second class for fractions.

00:08:14,240 --> 00:08:16,400
Of it there would be also objects.

00:08:16,400 --> 00:08:20,470
They would also store two integers each.

00:08:20,470 --> 00:08:25,870
But in the different classes for points and for
fractions there would be different operations.

00:08:25,870 --> 00:08:31,500
And the objects then don't have to store
any operations, because they each belong to

00:08:31,500 --> 00:08:40,570
one class and that determines which
functionality is available for them.

00:08:40,570 --> 00:08:43,000
Another hint for the exercise:

00:08:43,000 --> 00:08:48,220
There we will also have something like this,
that you should specify objects to classes or a

00:08:48,220 --> 00:08:49,220
class.

00:08:49,220 --> 00:08:54,460
Then you don't have to do that, unless
it is explicitly required, by copying

00:08:54,460 --> 00:09:00,420
the class again and specifying the objects
and always making these instantiation

00:09:00,420 --> 00:09:01,420
arrows.

00:09:01,420 --> 00:09:06,690
It is then also sufficient (if the class
is clear) that you simply specify such

00:09:06,690 --> 00:09:09,040
objects.

00:09:09,040 --> 00:09:16,380
That would be the relationship
between classes and objects.

00:09:16,380 --> 00:09:20,680
There are also relationships between
classes in the class diagram.

00:09:20,680 --> 00:09:24,420
A first such relationship is
the so-called inheritance.

00:09:24,420 --> 00:09:31,649
This is about the fact that classes can be
similar to each other, or a class can be in

00:09:31,649 --> 00:09:34,520
a certain sense an
extension of another class.

00:09:34,520 --> 00:09:38,450
An example for our
graphics domain would be:

00:09:38,450 --> 00:09:45,670
We have points that store certain
information and offer certain

00:09:45,670 --> 00:09:46,670
methods.

00:09:46,670 --> 00:09:52,900
And then it may just be that we have
another concept, that of colored points.

00:09:52,900 --> 00:09:54,700
What is a colored point?

00:09:54,700 --> 00:09:59,580
A colored point is still a point, so
it must also have coordinates x, y,

00:09:59,580 --> 00:10:03,930
but should also have a color
(and perhaps other operations).

00:10:03,930 --> 00:10:06,540
So we would have to store a color.

00:10:06,540 --> 00:10:12,340
And maybe there is an operation that
translates a colored point to grayscale.

00:10:12,340 --> 00:10:17,230
This is an operation that makes no sense on
points in general, only on colored points.

00:10:17,230 --> 00:10:19,330
That's why it would be native here.

00:10:19,330 --> 00:10:24,450
Just as color, of course, is precisely
the distinguishing feature of colored

00:10:24,450 --> 00:10:27,420
points from normal points, and
that's why it's specified here.

00:10:27,420 --> 00:10:30,670
What is written here on the right are not
substitutions for the things that are written here.

00:10:30,670 --> 00:10:34,000
These are always additional
information/additional aspects.

00:10:34,000 --> 00:10:37,760
So also the ColoredPoint
has an x- and y-coordinate.

00:10:37,760 --> 00:10:41,500
They just don't have to be specified
here anymore because they are inherited.

00:10:41,500 --> 00:10:47,420
This is exactly what this arrow expresses,
especially with this special kind of

00:10:47,420 --> 00:10:48,420
arrowhead.

00:10:48,420 --> 00:10:50,230
So ColoredPoint inherits from Point.

00:10:50,230 --> 00:10:53,890
That is, attributes of Point are
also attributes of ColoredPoint.

00:10:53,890 --> 00:10:58,660
And there can be more information
here, more attributes.

00:10:58,660 --> 00:11:02,710
Methods of Point are also methods of
ColoredPoint, but ColoredPoint can provide

00:11:02,710 --> 00:11:05,530
even more functionality.

00:11:05,530 --> 00:11:10,460
This is called superclass or superclass.

00:11:10,460 --> 00:11:12,770
That would be here:

00:11:12,770 --> 00:11:15,690
The more general class would be
the superclass or superclass.

00:11:15,690 --> 00:11:20,640
And the specialized concept of ColoredPoint
here, that's called subclass or

00:11:20,640 --> 00:11:21,640
subclass.

00:11:21,640 --> 00:11:24,660
Sometimes people then ask here:

00:11:24,660 --> 00:11:31,430
Is there also multiple inheritance?

00:11:31,430 --> 00:11:33,090
Can you inherit from multiple things?

00:11:33,090 --> 00:11:35,580
So could ColoredPoint also inherit
from two different classes?

00:11:35,580 --> 00:11:36,600
How is it with these arrows?

00:11:36,600 --> 00:11:37,600
What is possible there?

00:11:37,600 --> 00:11:40,779
Are different classes allowed
to inherit from Point?

00:11:40,779 --> 00:11:43,230
We'll talk about that in a moment.

00:11:43,230 --> 00:11:49,340
We could also ask
about our library example:

00:11:49,340 --> 00:11:51,990
Is there also somehow meaningful
inheritance conceivable?

00:11:51,990 --> 00:11:53,480
One must always consider:

00:11:53,480 --> 00:11:55,810
Are there aspects there
that could be generalized?

00:11:55,810 --> 00:11:58,990
For example, where different
classes have something in common?

00:11:58,990 --> 00:12:03,080
So let's assume that there are other
media than books in the library.

00:12:03,080 --> 00:12:04,370
Then we could
introduce CDs, videos, magazines.

00:12:04,370 --> 00:12:09,510
And we could come up
with a new class for each.

00:12:09,510 --> 00:12:13,020
And at some point we might
notice that these different media have certain

00:12:13,020 --> 00:12:14,180
things in common.

00:12:14,180 --> 00:12:23,860
So while only the magazine has magazine numbers
and maybe only the videos have a duration,

00:12:23,860 --> 00:12:27,290
one author and one title is
what all of these media have.

00:12:27,290 --> 00:12:31,320
So maybe it would make sense to
introduce a class for media in

00:12:31,320 --> 00:12:35,280
general and then inherit specialized
classes for books, CDs, etc.

00:12:35,280 --> 00:12:42,920
That's then part of the design, also
finding meaningful such relationships.

00:12:42,920 --> 00:12:48,760
I had already said that:

00:12:48,760 --> 00:12:51,330
The subclass inherits attributes and
methods (and later other relationships we

00:12:51,330 --> 00:12:55,140
will discuss) of the
superclass and can add more.

00:12:55,140 --> 00:13:01,160
One aspect for implementation that is
not so important now for static modeling

00:13:01,160 --> 00:13:07,360
is that methods of the
superclass can be overridden.

00:13:07,360 --> 00:13:08,720
I had said that here:

00:13:08,720 --> 00:13:12,870
All methods that exist for Point
also exist for ColoredPoint.

00:13:12,870 --> 00:13:17,180
But it could be that the behavior of some
of these methods must be slightly different

00:13:17,180 --> 00:13:18,180
for ColoredPoints.

00:13:18,180 --> 00:13:21,910
So then you would not change that
the methods exist, but what they do.

00:13:21,910 --> 00:13:26,800
And for the new methods, of course, you have to
say what they do anyway, because the Point itself

00:13:26,800 --> 00:13:35,820
doesn't know anything
about gray coloring.

00:13:35,820 --> 00:13:48,200
And another important point of this kind of relationship,
inheritance, is that this is to be understood

00:13:48,200 --> 00:13:53,630
in such a way that any object of the subclass
can also be considered an object of the

00:13:53,630 --> 00:13:54,630
superclass.

00:13:54,630 --> 00:13:57,160
That's where we
talk about polymorphism.

00:13:57,160 --> 00:14:01,810
In the sense that everything you can
do with Points, you can still do

00:14:01,810 --> 00:14:02,810
with ColoredPoint.

00:14:02,810 --> 00:14:07,451
So ColoredPoints is not just some other
thing that happens to also have an x and

00:14:07,451 --> 00:14:08,451
y coordinate.

00:14:08,451 --> 00:14:11,460
But ColoredPoint is really to be seen as also
a point, but still additional information

00:14:11,460 --> 00:14:12,460
to it.

00:14:12,460 --> 00:14:16,540
Everything that goes with points
must also go with colored points.

00:14:16,540 --> 00:14:19,810
Otherwise it would be wrong
to have inheritance here.

00:14:19,810 --> 00:14:24,710
So you shouldn't just connect arbitrary concepts
by inheritance just because they happen to have

00:14:24,710 --> 00:14:25,710
similar data stores.

00:14:25,710 --> 00:14:27,420
It's really always about that:

00:14:27,420 --> 00:14:36,490
There has to be a real generalization/specialization
relationship between the two classes.

00:14:36,490 --> 00:14:38,720
Because then this can be
used in a meaningful way.

00:14:38,720 --> 00:14:49,490
And while we're on
inheritance, there are a few

00:14:49,490 --> 00:14:52,990
more structural things to consider.

00:14:52,990 --> 00:14:55,680
So soon we don't want
to have just two classes.

00:14:55,680 --> 00:15:00,940
We're going to generalize
or enrich that, after all.

00:15:00,940 --> 00:15:04,680
That we don't just have two classes and their
relationship, but then a whole class diagram

00:15:04,680 --> 00:15:07,730
with several classes
and their relationships.

00:15:07,730 --> 00:15:14,010
And then you can get into situations where
certain constellations no longer make

00:15:14,010 --> 00:15:15,010
sense.

00:15:15,010 --> 00:15:17,680
There you have to consider some things.

00:15:17,680 --> 00:15:22,810
Especially for the moment, it's
simply what's recorded here.

00:15:22,810 --> 00:15:24,790
So it says here:

00:15:24,790 --> 00:15:26,640
"Constellations that are forbidden."

00:15:26,640 --> 00:15:31,290
What is forbidden would be
first of all any circularities.

00:15:31,290 --> 00:15:34,120
So you can't inherit in a circle.

00:15:34,120 --> 00:15:38,779
It can't be that B inherits from A, C
inherits from B, and A inherits from C.

00:15:38,779 --> 00:15:41,980
It could already be that B inherits
from A and C inherits from B.

00:15:41,980 --> 00:15:48,940
So, if this arrow was gone here,
the situation would be okay.

00:15:48,940 --> 00:15:54,640
But with all three arrows here, we would
have a situation that would not make sense.

00:15:54,640 --> 00:15:58,589
So it just wouldn't be allowed at all to
specify this class diagram with such a circular

00:15:58,589 --> 00:16:03,370
inheritance chain.

00:16:03,370 --> 00:16:07,910
Finally, for similar reasons,
self-inheritance is also not useful.

00:16:07,910 --> 00:16:10,970
So a class cannot inherit from itself.

00:16:10,970 --> 00:16:16,980
Nor can a class inherit twice,
so to speak, from another class.

00:16:16,980 --> 00:16:19,839
In all these cases, of course, the
direction of the arrows is relevant.

00:16:19,839 --> 00:16:21,339
Not here, so here it wouldn't matter.

00:16:21,339 --> 00:16:23,529
If the arrow were the other way
around, it would still be forbidden.

00:16:23,529 --> 00:16:27,690
In the other situations the
picture could change in each case.

00:16:27,690 --> 00:16:33,040
Whereas here, if the arrow were
turned around, it would be a circular reasoning again.

00:16:33,040 --> 00:16:36,920
Would be forbidden so to speak for another reason
and not because of this double inheritance.

00:16:36,920 --> 00:16:43,490
And if you were to turn an arrow around
here, you would no longer have circularity.

00:16:43,490 --> 00:16:48,580
So circularity really means: in the
direction of the arrows, a circle.

00:16:48,580 --> 00:16:52,592
If you were to turn the arrow around here, you
would no longer have circularity, because you could

00:16:52,592 --> 00:16:54,740
not go in a circle following the arrows.

00:16:54,740 --> 00:16:56,640
But then you would
have a double inheritance.

00:16:56,640 --> 00:16:59,779
Then C would inherit from A and from B.

00:16:59,779 --> 00:17:04,880
This is allowed in principle in UML, but
not all programming languages support it.

00:17:04,880 --> 00:17:10,250
We will pay special attention to
whether this should be allowed or not.
