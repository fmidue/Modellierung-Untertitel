58 # slide
00:00:00,000 --> 00:00:03,690
Welcome back to a new week.

00:00:03,690 --> 00:00:12,060
We will now start with an introduction
to UML (in particular static

00:00:12,060 --> 00:00:16,170
modeling with UML) and
introduce object orientation.

00:00:17,370 --> 00:00:23,070
Before that, a few words about
UML as such since, as I said,

00:00:23,970 --> 00:00:29,670
this language will generally take
up more space in the lecture.

00:00:29,670 --> 00:00:32,700
So UML (Unified Modeling
Language) is a standard modeling

00:00:32,700 --> 00:00:34,950
language for software engineering.

00:00:34,950 --> 00:00:39,780
Quite common both in the
literature and in practice.

00:00:39,780 --> 00:00:44,490
Possibly known from school if
you had computer science classes

00:00:44,490 --> 00:00:48,930
there and object-oriented work was done.

00:00:48,930 --> 00:00:51,840
You might also have at
least seen class diagrams in

00:00:51,840 --> 00:00:54,150
your pre-college computer science class.

00:00:54,150 --> 00:01:00,630
That's this first kind of diagram
that's just shown up here.

00:01:00,630 --> 00:01:06,900
This is probably more
of an object diagram, not

00:01:06,900 --> 00:01:11,430
a class diagram, but this comes from
the same family of diagrams within UML.

00:01:11,430 --> 00:01:16,770
As I said, it's based on object-oriented
concepts, which we'll talk about in a moment.

00:01:16,770 --> 00:01:20,640
But there are also various
other types of diagrams

00:01:20,640 --> 00:01:24,450
that are not directly related to object
orientation but are still part of UML.

00:01:24,450 --> 00:01:26,310
So it's a very comprehensive modeling

00:01:26,310 --> 00:01:30,203
language, a framework with
different kinds of models.

00:01:30,203 --> 00:01:36,900
It is also now over 20 years old and
has spread accordingly since then.

00:01:38,010 --> 00:01:41,640
You will certainly see it used
(for some of the types of diagrams

00:01:41,640 --> 00:01:43,380
we're looking at here) in other courses.

00:01:43,380 --> 00:01:48,090
For Komedia students I'm not sure, but
for ISE and computer science students:

00:01:48,090 --> 00:01:51,930
Advanced Programming Techniques,
for example, or in the

00:01:51,930 --> 00:01:56,910
Software Engineering lecture, you will
certainly encounter some of these things again.

00:01:56,910 --> 00:02:03,090
Both static and dynamic
modeling are supported by UML.

00:02:03,090 --> 00:02:07,320
We also see here
that graphs play a role.

00:02:08,040 --> 00:02:14,820
There is less textual modeling and
also not necessarily very formal.

00:02:14,820 --> 00:02:19,380
So the different types of diagrams
have different degrees of formality.

00:02:19,380 --> 00:02:24,930
There are purely illustrative diagrams and
there are also somewhat more formalized diagrams.

00:02:28,350 --> 00:02:32,250
Here is a summary of
what I have just said.

00:02:32,250 --> 00:02:36,300
So there are mainly
visual-graphical means within UML.

00:02:36,300 --> 00:02:41,130
Text also appears, of course, but
there is less mathematical modeling in UML.

00:02:41,130 --> 00:02:46,740
Both static and
dynamic modeling are supported.

00:02:46,740 --> 00:02:51,585
In the lecture, we will first
deal with static modeling in UML.

00:02:51,585 --> 00:02:55,646
Later, however, there will be chapters
dealing with dynamic modeling within UML,

00:02:55,646 --> 00:03:00,810
after we will have
covered Petri nets in between.

00:03:00,810 --> 00:03:04,320
In other respects:

00:03:04,980 --> 00:03:09,720
We had seen various types
of distinctions for models.

00:03:09,720 --> 00:03:12,030
So besides "static" / "dynamic", it was
about "qualitative" or "quantitative".

00:03:12,030 --> 00:03:15,480
Both are covered in UML.

00:03:15,480 --> 00:03:18,930
So for example, the class and
object diagrams that we're going to

00:03:18,930 --> 00:03:26,190
look at first definitely contain qualitative
aspects and some quantitative aspects.

00:03:26,190 --> 00:03:34,080
As I said, primarily UML is used to
specify software systems, especially

00:03:34,080 --> 00:03:35,850
object-oriented software systems.

00:03:35,850 --> 00:03:40,410
With regard to the transparency
of the models, so to speak,

00:03:40,410 --> 00:03:45,930
there are both whitebox
and blackbox models in UML.

00:03:45,930 --> 00:03:47,880
So it depends on the type of
diagram you're looking at whether

00:03:47,880 --> 00:03:50,370
you think of it more
as a whitebox or a blackbox.

00:03:50,370 --> 00:03:53,010
Both are covered in principle.

00:03:57,360 --> 00:03:57,857
In terms of the level of
formality, semi-formal at best.

00:03:57,857 --> 00:04:00,270
So this is not mathematical
modeling and not very formal.

00:04:00,270 --> 00:04:04,500
The syntax is
still somewhat formally defined.

00:04:04,500 --> 00:04:06,030
So it's stated somewhere what the

00:04:06,030 --> 00:04:10,470
diagram forms are in the first
place, what legal diagrams are.

00:04:10,470 --> 00:04:14,370
The semantics is usually
not very formally specified.

00:04:14,370 --> 00:04:22,840
So what such a diagram means concretely, there
is an understanding of it, but that is not

00:04:22,840 --> 00:04:29,200
necessarily mathematically elaborated in
somehow full logical, mathematical stringency.

00:04:29,200 --> 00:04:35,380
And the use
in software development depends,

00:04:35,380 --> 00:04:37,570
of course, on the process model
that you are dealing with.

00:04:37,570 --> 00:04:44,410
I had also indicated that last week, that
in classical development processes, like the

00:04:44,410 --> 00:04:52,600
waterfall model, models tend to
be created explicitly as well.

00:04:52,600 --> 00:04:55,990
And then UML would definitely
be a means of choice.

00:04:55,990 --> 00:05:00,580
In other process models, such as agile

00:05:00,580 --> 00:05:05,080
development, models are not
used as much or as explicitly.

00:05:05,080 --> 00:05:06,820
There, it will not necessarily be the

00:05:06,820 --> 00:05:11,830
case that a class diagram is
always created before development.

00:05:11,830 --> 00:05:18,310
So we talk about software development "on a
large scale" when it comes to such structured

00:05:18,310 --> 00:05:25,510
procedural processes, and then UML
would perhaps be even more present.

00:05:25,510 --> 00:05:29,140
UML can be used not only for

00:05:29,140 --> 00:05:32,800
visualization/specification of models.

00:05:32,800 --> 00:05:40,240
There are also approaches that actually generate
code directly from models created with UML.

00:05:40,240 --> 00:05:44,260
I had already
mentioned model-driven development.

00:05:44,260 --> 00:05:48,100
Then it would be the case that UML
diagrams are actually generated in a

00:05:48,100 --> 00:05:50,860
tool, from which Java code is then generated,
for example (which usually still has to be

00:05:50,860 --> 00:05:52,480
supplemented, but already provides
a framework for the implementation).

00:05:52,480 --> 00:05:58,660
And that would, of course, strengthen the
role of models compared to other approaches.

00:06:04,030 --> 00:06:09,970
Here is an overview, schematically,
of the various UML diagram types.

00:06:09,970 --> 00:06:12,220
These are not all that exist, either.

00:06:12,220 --> 00:06:15,190
There are one or two more diagram types.

00:06:15,190 --> 00:06:17,980
UML is also still under development.

00:06:17,980 --> 00:06:23,620
But this is already a fairly
large snapshot here, and

00:06:23,620 --> 00:06:27,100
some of the concepts here we're going
to bring to life in the lecture.

00:06:27,100 --> 00:06:30,160
So we're not going to kind of go

00:06:30,160 --> 00:06:34,090
through all of the 10, 12, 14,
or however many boxes this is.

00:06:34,090 --> 00:06:37,510
But several of the diagram
types we'll actually see.

00:06:37,510 --> 00:06:38,754
We can look at. What do we have here?

00:06:38,754 --> 00:06:41,680
So on the one hand, we have this distinction
between structural and behavioral diagrams.

00:06:41,680 --> 00:06:44,020
That pretty much maps to:

00:06:44,020 --> 00:06:47,050
This part is just the static modeling.

00:06:47,050 --> 00:06:52,570
And the part over here is for
dynamic modeling using UML.

00:06:52,570 --> 00:06:57,460
So since we're doing static modeling first,
we're going to stay on the left side for now.

00:06:57,460 --> 00:07:01,690
And in particular, we're going to look at
just these two diagram types there: Class

00:07:01,690 --> 00:07:03,070
diagrams and Object diagrams.

00:07:03,070 --> 00:07:07,720
We're not going to cover the other diagram
types that come up here in the lecture.

00:07:07,720 --> 00:07:11,080
And then later, after we've covered Petri

00:07:11,080 --> 00:07:13,180
nets, we'll look at
dynamic modeling with UML.

00:07:13,180 --> 00:07:17,710
That's where activity diagrams from
UML will appear, for one thing.

00:07:17,710 --> 00:07:20,500
These are ultimately related
representatives of Petri nets.

00:07:20,500 --> 00:07:22,450
Therefore it makes sense to
deal with them afterwards.

00:07:22,450 --> 00:07:29,470
And then we'll deal in
particular with the UML state

00:07:29,470 --> 00:07:36,430
diagrams, which are structured
means with much more expressiveness

00:07:36,430 --> 00:07:40,090
than the flat state diagrams
that we looked at last week.

00:07:43,660 --> 00:07:50,110
And, as I said, some of these types of
models would be more static or more dynamic.

00:07:50,110 --> 00:07:52,990
The left/right distinction, so to
speak, is between static and dynamic.

00:07:52,990 --> 00:07:56,770
But there are still the distinctions
qualitative/quantitative, black box/white box, etc.

00:07:56,770 --> 00:07:58,840
And aspects of all of
them appear here somewhere.

00:07:58,840 --> 00:08:03,160
So there are diagrams here that are more
qualitative versus quantitative, etc.

00:08:03,160 --> 00:08:05,110
We will then also see (for those that

00:08:05,110 --> 00:08:09,130
we look at specifically)
how that classifies in each case.

00:08:09,130 --> 00:08:16,390
But in general, a lot of the types of
models we discussed earlier occur in UML.

00:08:19,940 --> 00:08:24,950
First, as I said, class and object
diagrams, as just shown on the slide.

00:08:24,950 --> 00:08:29,480
The two on the left of the top
representatives below structure diagrams.

00:08:29,480 --> 00:08:34,070
What's being statically modeled there?

00:08:34,070 --> 00:08:37,760
Essentially, what's being
modeled is this.

00:08:37,760 --> 00:08:41,621
It's about objects, things, their
properties, and relationships between them.

00:08:41,621 --> 00:08:43,520
So those are the three things
it's essentially about.

00:08:43,520 --> 00:08:49,910
What are the things/objects that are in
the system that we want to talk about?

00:08:49,910 --> 00:08:52,280
So, what exists there?

00:08:52,280 --> 00:08:54,920
And what properties do the
respective things have?

00:08:54,920 --> 00:08:58,640
That can be different
properties for different areas,

00:08:58,640 --> 00:09:01,340
which the occurring things must have.

00:09:01,340 --> 00:09:03,680
And what are the
relations between the things?

00:09:03,680 --> 00:09:06,350
So, properties refer to one thing.

00:09:06,350 --> 00:09:10,250
Relationships are between different
things that can occur in the system.

00:09:10,250 --> 00:09:15,710
The point then is to record
the state of the system.

00:09:15,710 --> 00:09:16,910
How it is composed.

00:09:16,910 --> 00:09:20,810
So, not necessarily what concrete values
must be present at a point in time, but:

00:09:20,810 --> 00:09:23,210
How is the state organized?

00:09:23,210 --> 00:09:24,620
What must be known
about the system in order

00:09:24,620 --> 00:09:27,260
to capture what it looks like
at a particular point in time?

00:09:27,260 --> 00:09:28,310
And also:

00:09:28,310 --> 00:09:29,720
How can it evolve?

00:09:29,720 --> 00:09:33,140
Whereby the "how" of development would
of course be rather dynamic modeling.

00:09:33,140 --> 00:09:36,440
Here it is more about what
states are possible at all.

00:09:36,440 --> 00:09:36,950
So not:

00:09:36,950 --> 00:09:38,360
How do you get from one state to another?

00:09:38,360 --> 00:09:38,780
But rather:

00:09:38,780 --> 00:09:40,040
Which states are possible at all?

00:09:40,040 --> 00:09:43,340
And that also limits
how the system can develop.

00:09:43,340 --> 00:09:48,380
And linking back to what we did last week:

00:09:48,380 --> 00:09:50,810
What operations are offered?

00:09:50,810 --> 00:09:52,910
So, what can you do with things?

00:09:54,710 --> 00:09:58,400
Without specifying what exactly
comes out when you do that.

00:09:58,400 --> 00:09:59,210
But in the first place:

00:09:59,210 --> 00:10:01,070
What is the interface, so to speak?

00:10:01,730 --> 00:10:03,920
Which operations are possible?

00:10:08,340 --> 00:10:11,370
At first, this sounds less
exciting than modeling behavior.

00:10:11,370 --> 00:10:13,290
Dynamic modeling is
always more demanding.

00:10:13,290 --> 00:10:15,000
That's why we also
start with static modeling.

00:10:15,000 --> 00:10:17,070
But, as we saw in last week's

00:10:17,070 --> 00:10:20,910
material, we can
start with static modeling.

00:10:20,910 --> 00:10:24,300
What are the objects
involved in the first place?

00:10:24,300 --> 00:10:27,450
So, how is the
data structured in the system?

00:10:27,450 --> 00:10:30,780
Which operations are
possible, i.e., are offered?

00:10:30,780 --> 00:10:34,290
This also limits the dynamic behavior.

00:10:34,290 --> 00:10:37,890
So having such a
precise static model at first

00:10:37,890 --> 00:10:39,510
is also an important aid later
on during implementation.

00:10:40,080 --> 00:10:44,250
This is especially relevant
for larger software systems.

00:10:44,250 --> 00:10:49,350
And, this will not be in the
foreground in this lecture, but:

00:10:49,350 --> 00:10:55,350
Such a static model also allows the
application of certain design principles.

00:10:55,350 --> 00:11:01,860
So, especially if a lot
of modeling is done with

00:11:01,860 --> 00:11:07,650
object orientation, then there are certain principles
about what constitutes good object-oriented design.

00:11:07,650 --> 00:11:09,720
And if you use the UML language, then

00:11:09,720 --> 00:11:12,600
these principles are very easy to
apply, and also easy to recognize.

00:11:12,600 --> 00:11:14,730
So there are
certain programming techniques.

00:11:14,730 --> 00:11:18,000
Inheritance, for example, you
may be familiar with if you

00:11:18,000 --> 00:11:21,300
worked with Java in school, for example.

00:11:21,300 --> 00:11:24,060
And inheritance is quite
nice at first, but

00:11:24,060 --> 00:11:29,310
on the other hand, it can also
be a trap to use that too much.

00:11:30,270 --> 00:11:32,550
Just because it's there in
the programming language

00:11:32,550 --> 00:11:34,020
doesn't mean you have
to use it everywhere.

00:11:34,020 --> 00:11:40,140
And a clear design, a clear modeling
using UML, can make it easier

00:11:40,140 --> 00:11:44,865
to first make sense of when you
should actually use inheritance.

00:11:44,865 --> 00:11:47,790
Again, these are
patterns that are certainly

00:11:47,790 --> 00:11:54,720
discussed, for example, in the lecture
"Advanced Programming Techniques".

00:11:54,720 --> 00:11:59,150
So you can then also ask:

00:11:59,150 --> 00:12:00,530
What is a good or a bad model?

00:12:00,530 --> 00:12:05,780
If one commits oneself then to
a certain modeling language.

00:12:12,320 --> 00:12:13,970
What is this
object orientation all about?

00:12:13,970 --> 00:12:16,880
So, where do the objects come into play?

00:12:16,880 --> 00:12:20,450
First of all, this can be defined in a very
abstract way, just as we defined our concept

00:12:20,450 --> 00:12:25,025
of models and systems in a very
abstract way at the beginning.

00:12:25,025 --> 00:12:25,910
So, what is the basic idea?

00:12:26,960 --> 00:12:33,440
Somewhat simplified, the world consists of
objects that are related to each other.

00:12:35,630 --> 00:12:38,150
That's first of all a statement
that you can make about the world.

00:12:38,150 --> 00:12:39,320
And the idea is:

00:12:39,320 --> 00:12:44,720
Since computer science systems often have to do with
the world or are supposed to represent things from

00:12:44,720 --> 00:12:48,410
the world, one transfers this basic
structuring of the world (or this

00:12:48,410 --> 00:12:52,970
view) precisely to modeling and to
software development in general.

00:12:52,970 --> 00:12:56,090
How then is it to
be put a little more precisely?

00:12:56,090 --> 00:12:57,800
So the idea is:

00:12:57,800 --> 00:13:01,040
You take the data that should
somehow be present in the system.

00:13:01,040 --> 00:13:02,990
These will later be called attributes.

00:13:02,990 --> 00:13:05,990
And these are
combined with the functionality.

00:13:05,990 --> 00:13:11,030
This is called methods, and corresponds
to operations from the previous week.

00:13:11,030 --> 00:13:16,010
And this data,
together with the functionality

00:13:16,010 --> 00:13:21,110
that operates on this data, is organized
together, combined together (this is

00:13:21,110 --> 00:13:24,890
also called encapsulation), and assigned
to individual objects in each case.

00:13:24,890 --> 00:13:28,100
So an object summarizes: certain data

00:13:28,100 --> 00:13:32,390
and methods/operations that
should operate on it.

00:13:32,390 --> 00:13:40,340
And then each object is able
to receive method calls.

00:13:40,340 --> 00:13:46,310
So to perform operations that
process the data or again

00:13:46,310 --> 00:13:51,860
trigger other operations
on other objects.

00:13:51,860 --> 00:13:55,310
The objects can, so to speak, exchange data
with each other via the methods/operations.

00:14:01,100 --> 00:14:02,420
This is already a contrast to

00:14:02,420 --> 00:14:05,390
what we saw last week for
this vector graphics domain.

00:14:05,390 --> 00:14:10,610
Because there it wasn't that the Pictures, the
images, themselves somehow offered methods.

00:14:10,610 --> 00:14:11,480
But rather there were these operations.

00:14:11,480 --> 00:14:15,560
They were taking Pictures as input and
possibly returning Pictures as output.

00:14:15,560 --> 00:14:16,730
So it worked both ways:

00:14:16,730 --> 00:14:20,750
You could take an image as
input and return an image, or

00:14:20,750 --> 00:14:22,160
you could just generate an
image from some numerical data.

00:14:23,780 --> 00:14:31,730
But it wasn't like the methods
were directly tied to the images.

00:14:31,730 --> 00:14:34,850
We'll see that in
contrast again in a moment.

00:14:38,450 --> 00:14:40,610
And importantly:

00:14:41,780 --> 00:14:49,190
The benefit of this kind of approach should
just be that these objects or whole types of

00:14:49,190 --> 00:14:53,930
objects (whole classes of objects, as
we will say then) should be realized

00:14:53,930 --> 00:14:56,600
once, and then be able to be
reused in different contexts.

00:14:56,600 --> 00:15:00,800
It's not about describing an object somehow,
but about making it more general, so that

00:15:00,800 --> 00:15:08,420
we can then reuse existing models
in different application contexts.

00:15:12,940 --> 00:15:17,740
Let's actually look at this in a somewhat naive
illustrated way first, from a programmer's point of view.

00:15:17,740 --> 00:15:19,330
Although this is
not a programming lecture.

00:15:19,330 --> 00:15:21,490
But to understand this basic
idea of object orientation,

00:15:21,490 --> 00:15:24,370
it is not wrong to have
a look at it with pseudocode.

00:15:24,370 --> 00:15:27,220
And that's what we'll
do with the example domain

00:15:27,220 --> 00:15:30,040
that we've just been
reminded of, vector graphics.

00:15:30,040 --> 00:15:36,730
And let's imagine that we want to
describe a small picture that is somehow

00:15:36,730 --> 00:15:41,710
built up step by
step from different operations.

00:15:41,710 --> 00:15:42,700
So that's what's here now.

00:15:42,700 --> 00:15:43,450
We'll imagine:

00:15:43,450 --> 00:15:47,860
We first draw a rectangle
with certain dimensions.

00:15:47,860 --> 00:15:50,530
That would be our picture 1, Picture p1.

00:15:50,530 --> 00:15:54,070
Then we color that red, so
we have another Picture p2.

00:15:54,070 --> 00:15:58,360
So now a red
rectangle with these dimensions.

00:15:58,360 --> 00:16:00,130
Then we rotate it.

00:16:00,130 --> 00:16:03,340
Get a new picture p3,
and move this picture p3 by

00:16:03,340 --> 00:16:10,240
some x/y coordinates, and then
get our final picture p4.

00:16:11,140 --> 00:16:14,470
That would be one way we could
describe such a step-by-step

00:16:14,470 --> 00:16:17,320
construction of an image using
the operations from last week.

00:16:17,320 --> 00:16:21,580
And then we could paint p4 on the screen.

00:16:21,580 --> 00:16:29,530
What's noticeable here, and may
seem clumsy at first glance:

00:16:30,130 --> 00:16:35,170
We have these intermediate images
here, each of which has its own

00:16:35,170 --> 00:16:39,760
name and then actually always has the role
of serving as input for the next image.

00:16:39,760 --> 00:16:45,520
This passing on of these image
variables, so to speak, could be avoided.

00:16:45,520 --> 00:16:48,310
Object-oriented programming
tries to avoid this by

00:16:48,310 --> 00:16:54,250
leaving it somewhat
implicit, so to speak.

00:16:54,250 --> 00:16:57,250
So instead of imagining that
you create a new image every

00:16:57,250 --> 00:16:59,230
time you perform an
operation, you simply say:

00:16:59,230 --> 00:17:01,840
You have an image and
you work on that directly.

00:17:01,840 --> 00:17:05,920
So in an object-oriented way, you would say
here, the image is combined with its operations.

00:17:05,920 --> 00:17:12,700
So there is an image p, which is created at the
beginning once as a rectangle with these dimensions.

00:17:12,700 --> 00:17:14,620
And the fact that this is now
written in capital letters is

00:17:14,620 --> 00:17:20,140
rather due to the fact that this is already somewhat
based on a concrete programming language, namely Java.

00:17:20,140 --> 00:17:22,990
Apart from that, there is
no significant difference.

00:17:23,590 --> 00:17:26,050
Then you would create a new
image and then you would say that

00:17:26,050 --> 00:17:28,510
you now color this image red.

00:17:29,080 --> 00:17:32,890
Now rotate this image by angle 30.

00:17:32,890 --> 00:17:36,250
Now move this image
to the following coordinates.

00:17:37,210 --> 00:17:39,430
That is, in contrast to the approach
above, one does not have several pictures,

00:17:39,430 --> 00:17:44,650
which are built up gradually and then also
still separately exist from each other.

00:17:44,650 --> 00:17:49,780
So here above you would have p1, p2, p3, p4, they
all still exist, also the intermediate steps.

00:17:49,780 --> 00:17:51,430
While here one simply says:

00:17:51,430 --> 00:17:54,400
On the one image
p, perform these operations.

00:17:54,940 --> 00:17:57,940
So you don't always have, as here
above, one image in and one image out.

00:17:57,940 --> 00:18:03,100
But you work on one image, which
is automatically passed on.

00:18:03,100 --> 00:18:05,740
On the one hand, this is a
bit shorter, you could say.

00:18:05,740 --> 00:18:09,130
But of course it also has disadvantages.

00:18:09,940 --> 00:18:12,610
Because here it is so that this image is
overwritten, so to speak, in each case.

00:18:12,610 --> 00:18:16,660
Whereas here above you really have
values for the individual images and

00:18:16,660 --> 00:18:21,280
could quite well continue to
use p2 in addition to p4.

00:18:27,640 --> 00:18:32,140
These are simply two different
approaches to working with operations.

00:18:32,140 --> 00:18:37,540
And object orientation uses
just this second way.

00:18:37,540 --> 00:18:43,630
This is probably not desirable
in every situation, but with

00:18:43,630 --> 00:18:47,680
object orientation this is the way to go.

00:18:48,460 --> 00:18:50,590
Compare this with arithmetic.

00:18:50,590 --> 00:18:54,400
If you add numbers, the old
numbers do not disappear.

00:18:54,400 --> 00:18:59,040
Yes, the situation above is more like
how you work with arithmetic expressions.

00:18:59,040 --> 00:19:00,220
You have intermediate results.

00:19:00,220 --> 00:19:05,650
But adding the numbers five and three does
not result in the five becoming the eight.

00:19:05,650 --> 00:19:07,330
Instead, a new number eight comes out.

00:19:07,330 --> 00:19:09,070
And the five and
the three are still there.

00:19:09,070 --> 00:19:09,730
Just like here:

00:19:09,730 --> 00:19:14,110
When I end up with the red,
rotated, shifted rectangle, it's not

00:19:14,110 --> 00:19:16,930
that the original rectangle
has disappeared as a result.

00:19:16,930 --> 00:19:22,600
Here below, however, the original
rectangle is overwritten, ending up as

00:19:23,980 --> 00:19:28,960
the final rectangle with color,
rotation, and new position.

00:19:32,490 --> 00:19:35,662
Where does this come from?

00:19:35,662 --> 00:19:37,980
What is the difference, so to
speak, between these two views?

00:19:37,980 --> 00:19:43,290
For this, we had written down
our operations last week.

00:19:43,290 --> 00:19:48,060
So there were explicit occurrences
of images as inputs and outputs.

00:19:48,060 --> 00:19:52,260
So "color" took an image and a
color, and returned a new image.

00:19:52,260 --> 00:19:55,050
And analogously with
the other operations.

00:19:55,050 --> 00:19:57,870
Now, in object orientation, you
don't do that so explicitly.

00:19:57,870 --> 00:20:04,260
But in the end, the picture, so
to speak the class of objects,

00:20:04,260 --> 00:20:08,940
which is the main
issue here, is set implicitly.

00:20:08,940 --> 00:20:12,450
So you create a class called "Picture".

00:20:12,450 --> 00:20:17,490
It might have a subclass for the
concrete, more specific things

00:20:17,490 --> 00:20:22,350
that you have at the beginning, that you can start
from, i.e., the basic shapes rectangle, circle, etc..

00:20:22,350 --> 00:20:29,580
And then there are analogous methods
to the operations given here.

00:20:29,580 --> 00:20:33,270
But they work implicitly
on one Picture object each.

00:20:33,270 --> 00:20:34,950
So you just say, within the class Picture

00:20:34,950 --> 00:20:41,820
there are encapsulated operations
for coloring, rotating, moving.

00:20:41,820 --> 00:20:46,920
And here Picture does not appear again,
neither as argument nor as result.

00:20:46,920 --> 00:20:50,310
Because these methods are
encapsulated in the Picture class,

00:20:50,310 --> 00:20:52,440
they always work
automatically on a picture.

00:20:52,440 --> 00:20:55,980
So, when I call "color",
I do it on an image.

00:20:55,980 --> 00:21:02,391
And the result, the colored image,
is what comes out after the operation.

00:21:02,391 --> 00:21:07,140
So the picture on which I call
the operation is changed by it.

00:21:07,140 --> 00:21:09,240
I don't have to
explicitly return a new image.

00:21:12,630 --> 00:21:16,874
And we will find something
like that in our diagrams.

00:21:16,874 --> 00:21:20,940
Not necessarily with exactly this syntax here,
for example, not necessarily with this "void".

00:21:21,600 --> 00:21:29,220
But this will be the nature of our
methods, not this more mathematical nature.

00:21:29,220 --> 00:21:37,030
This is not exactly Java syntax either.

00:21:37,030 --> 00:21:38,770
There would be some annotations missing,

00:21:38,770 --> 00:21:42,400
probably some "abstract"
annotations, for example.

00:21:42,400 --> 00:21:45,790
But this is only to illustrate
the basic difference

00:21:45,790 --> 00:21:47,740
between these two approaches.

00:21:47,740 --> 00:21:55,810
Does this mean that only operations that
always return an image are possible?

00:21:55,810 --> 00:21:57,370
It looks like this above.

00:21:57,370 --> 00:21:59,350
That always makes: one image
as input, one image as output.

00:21:59,350 --> 00:22:02,410
These are not necessarily all
operations that can be imagined.

00:22:02,410 --> 00:22:09,700
So let's think about operations that are
not supposed to change an object, but

00:22:09,700 --> 00:22:11,830
are simply supposed to
perform some calculation.

00:22:11,830 --> 00:22:15,190
So let's imagine that there is another
operation that simply determines

00:22:15,190 --> 00:22:20,710
the extent, the size, the diameter
or something like that for an image.

00:22:20,710 --> 00:22:24,100
That would be from a mathematical
point of view, from an algebraic

00:22:24,100 --> 00:22:26,230
point of view, simply an
operation "extent" for "extent".

00:22:26,230 --> 00:22:30,490
It takes an image and returns a number.

00:22:30,490 --> 00:22:36,160
That would then be equivalent, if
encapsulated in the Picture class, to an

00:22:36,160 --> 00:22:38,500
operation that just returns
a float value here.

00:22:38,500 --> 00:22:39,550
So then there are no arguments.

00:22:40,420 --> 00:22:42,880
You don't have to pass the picture as an

00:22:42,880 --> 00:22:45,880
argument, because the method is
encapsulated in the Picture class anyway.

00:22:45,880 --> 00:22:50,996
So you don't have to say from which
picture you want to have the dimensions.

00:22:50,996 --> 00:22:53,950
This is always the current picture
on which you call the method.

00:22:53,950 --> 00:23:00,130
It doesn't change the image,
but it returns a whole number.

00:23:00,130 --> 00:23:06,820
Then, if we write it this way,
we would have an operation

00:23:06,820 --> 00:23:11,890
that takes no argument except the
Picture, which is implicitly given anyway.

00:23:11,890 --> 00:23:14,920
But it does have a return value.

00:23:14,920 --> 00:23:18,820
Where on the previous slide it said "void"
everywhere, because you don't really

00:23:18,820 --> 00:23:22,450
want to return anything, you just want
to manipulate the current picture.

00:23:27,190 --> 00:23:39,730
And as I said, already the syntax in UML is
a little bit different than just shown here.

00:23:39,730 --> 00:23:43,150
The syntax shown here is based on Java.

00:23:43,150 --> 00:23:49,300
In UML, which should not be specific
for a concrete programming language,

00:23:49,300 --> 00:23:50,710
the syntax is somewhat different.

00:23:50,710 --> 00:24:03,100
So, for example, this specification for the
coloring operation would then look like this, and

00:24:03,100 --> 00:24:05,740
not so programming-language
based on Java.

00:24:05,740 --> 00:24:07,450
But that's just a syntactical difference.

00:24:07,450 --> 00:24:08,950
You have to be a bit careful

00:24:08,950 --> 00:24:16,210
when you specify diagrams that you
really stick to the UML notation.

00:24:21,100 --> 00:24:22,225
Why use object orientation?

00:24:22,225 --> 00:24:23,950
Where is it used in practice?

00:24:23,950 --> 00:24:25,330
Well, I already mentioned that:

00:24:25,330 --> 00:24:28,810
One claimed advantage
is just reusability.

00:24:28,810 --> 00:24:34,060
So by managing data and functionality
together, and by having concepts for modifying

00:24:34,060 --> 00:24:37,720
behavior (keyword "inheritance", which I
also mentioned before, which we will look at

00:24:37,720 --> 00:24:41,170
in more detail from
a modeling point of view),

00:24:41,170 --> 00:24:46,750
it becomes possible to reuse
functionality once developed

00:24:46,750 --> 00:24:49,630
in different systems, in
different implementations.

00:24:49,630 --> 00:24:54,040
Simply because the organization /
encapsulation of data and functionality

00:24:54,040 --> 00:25:01,060
together lends itself well to transfers to
other application domains, even downstream.

00:25:01,060 --> 00:25:06,550
Another important point is compatibility
with concurrency and parallelism.

00:25:06,550 --> 00:25:09,880
These are concepts I hadn't mentioned yet,
which we'll look at in more detail, especially

00:25:09,880 --> 00:25:12,850
in the Petri net chapter.

00:25:12,850 --> 00:25:18,010
So what we expect from software today,
we also expect from hardware, that

00:25:18,010 --> 00:25:23,140
things don't just happen in a purely linear
way, but things also work in parallel.

00:25:23,140 --> 00:25:25,510
So multitasking in
an operating system, for

00:25:25,510 --> 00:25:31,120
example: object orientation is
well suited to represent this.

00:25:31,120 --> 00:25:35,350
Because we have the encapsulated objects,
each of which has its own control

00:25:35,350 --> 00:25:36,490
flow, its own work.

00:25:36,490 --> 00:25:41,690
And in different objects, this
processing of the control flow can,

00:25:41,690 --> 00:25:43,760
in principle, take place in parallel.

00:25:43,760 --> 00:25:48,320
And the message exchange,
the ability to call

00:25:48,320 --> 00:25:52,580
methods between objects, provides
a good structuring means for

00:25:52,580 --> 00:25:57,920
communication in such a multitasking
or concurrent environment.

00:25:57,920 --> 00:26:02,030
That's why, among other reasons,
it is often used.

00:26:05,930 --> 00:26:08,837
And, of course, the original motivation:

00:26:08,837 --> 00:26:16,220
Since the real world can often be imagined
this way (as consisting of things and their

00:26:16,220 --> 00:26:24,260
properties, plus relationships between them),
it's just useful for many domains to directly

00:26:24,260 --> 00:26:27,680
do software modeling this way as well.

00:26:27,680 --> 00:26:31,340
So, this is not the only way,
but definitely a prominent one.

00:26:31,340 --> 00:26:37,940
Again, a very naive example, just to

00:26:37,940 --> 00:26:42,440
emphasize this last point a bit more.

00:26:42,440 --> 00:26:46,310
So yes, here would be a thing from the
real world: a ticket machine.

00:26:46,310 --> 00:26:49,700
You can also see that this is
probably not the most recent one.

00:26:49,700 --> 00:26:54,560
So the image has been in the slides of
this lecture for quite some time, even with

00:26:54,560 --> 00:26:58,760
my predecessor who gave the lecture
last, up until four years ago or so.

00:26:58,760 --> 00:27:03,080
So a ticket vending machine, of
course it has data to store:

00:27:03,080 --> 00:27:06,549
Destinations, zoning, fare
tables, etc.

00:27:06,549 --> 00:27:07,430
That would be the data.

00:27:07,430 --> 00:27:09,830
And it has to
offer some kind of operations.

00:27:09,830 --> 00:27:13,850
You can press buttons,
display prices, insert coins.

00:27:13,850 --> 00:27:15,260
There is a cash register that is managed.

00:27:15,260 --> 00:27:17,540
There are tickets to be dispensed.

00:27:17,540 --> 00:27:19,550
The idea is just that:

00:27:19,550 --> 00:27:21,500
The ticket vending machine is an object.

00:27:21,500 --> 00:27:28,640
It encapsulates certain data
and operations that are offered.

00:27:28,640 --> 00:27:31,940
That would be such an
object of the real world,

00:27:31,940 --> 00:27:37,610
which one would like to reproduce then
even by object-oriented modeling also in UML.

00:27:37,610 --> 00:27:43,100
Two terms will then appear as concepts:

00:27:43,100 --> 00:27:43,430
Object.

00:27:43,430 --> 00:27:45,080
I have already
mentioned object several times.

00:27:45,080 --> 00:27:47,360
And then there is
the principle of the class.

00:27:47,360 --> 00:27:49,520
This is simply a type of object,

00:27:49,520 --> 00:27:53,600
that is, the summary
of objects with similar properties.

00:27:53,600 --> 00:27:59,330
We will then also look at class design.

00:27:59,330 --> 00:28:00,530
That's not mandatory.

00:28:00,530 --> 00:28:04,250
There are also programming languages that are
object-oriented and do not contain classes.

00:28:04,250 --> 00:28:06,590
There each object is
considered only individually.

00:28:06,590 --> 00:28:13,040
But the standard languages, such as
Java, also have a class concept.

00:28:14,720 --> 00:28:18,140
An example would be the
class of all such automata.

00:28:19,400 --> 00:28:21,140
There this would
be summarized generally: what

00:28:21,140 --> 00:28:26,090
kind of data they must administer and which
functionalities are to be offered in each case.

00:28:26,090 --> 00:28:31,340
That would be the class of the ticket vending
machines of this transport association.

00:28:31,340 --> 00:28:35,360
Maybe there is also a more general
class of all ticket vending machines

00:28:35,360 --> 00:28:38,060
at all, from which this class
then inherits properties.

00:28:38,060 --> 00:28:41,270
The class simply
groups similar things together.

00:28:41,270 --> 00:28:46,490
And then there are objects, which are
simply manifestations/instances of a class.

00:28:46,490 --> 00:28:52,130
So the specific ticket vending machine that
was photographed on the previous slide.

00:28:52,130 --> 00:28:55,190
That would be an object
that belongs to this class.

00:28:55,190 --> 00:28:58,940
And at other stations, or other
entrances to the Duisburg station, there

00:28:58,940 --> 00:29:02,330
are other objects, but they all have
certain property types in common,

00:29:02,330 --> 00:29:06,980
and therefore belong to the class
of VRR ticket vending machines.

00:29:06,980 --> 00:29:11,900
They then store other
information about the zoning

00:29:11,900 --> 00:29:16,820
or about their own zone etc.
at other specific locations.
