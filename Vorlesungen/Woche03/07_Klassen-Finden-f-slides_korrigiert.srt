70 # slide
00:00:00,000 --> 00:00:09,660
Klassen- und Objektdiagramme werden uns diese und
auch noch mindestens nächste Woche beschäftigen,

00:00:09,660 --> 00:00:14,340
als die ersten typischen und
prominentesten Vertreter von UML.

00:00:14,340 --> 00:00:18,540
Und wir beginnen diese
Woche mit Klassendiagrammen.

00:00:18,540 --> 00:00:23,520
Hier ist einfach mal ein Beispiel.

00:00:23,520 --> 00:00:26,940
Das müssen Sie im Moment
natürlich noch nicht lesen können.

00:00:27,900 --> 00:00:30,885
Die Syntax dazu werden wir
im Folgenden noch erklären.

00:00:30,885 --> 00:00:37,140
Hier sind diverse Details zu sehen, die
wir nach und nach erst besprechen werden.

00:00:37,140 --> 00:00:43,350
Es gibt auch einige Detailabweichungen davon,
wie es manchmal in der Vorlesung sein wird.

00:00:43,350 --> 00:00:48,900
Also die Sprache ist nicht voll formal,
deswegen gibt es manchmal kleine Abweichungen.

00:00:48,900 --> 00:00:53,370
Zum Beispiel werden wir genau die Stelle
hier ein bisschen anders darstellen.

00:00:53,370 --> 00:00:57,150
Wenn wir selber Klassendiagramme machen,
werden wir in der Regel an die Attribute,

00:00:57,150 --> 00:01:00,840
die hier aufscheinen, noch
Typen dranschreiben, etc.

00:01:00,840 --> 00:01:04,770
Es gibt diverse Spezifika und kleine Details.

00:01:04,770 --> 00:01:07,770
Aber so als ersten Eindruck können Sie

00:01:07,770 --> 00:01:09,750
dieses Klassendiagramm einfach
mal auf sich wirken lassen.

00:01:09,750 --> 00:01:13,260
Also hier werden irgendwie
verschiedene Klassen dargestellt.

00:01:13,260 --> 00:01:16,680
Offenbar ist irgendwie eine
Universitäts-Situation modelliert worden.

00:01:16,680 --> 00:01:18,420
Professor, Institut, Vorlesung, Student.

00:01:18,420 --> 00:01:19,440
Es gibt Klassen.

00:01:19,440 --> 00:01:23,550
Es könnten irgendwie die in
einem System/Programm/Modell

00:01:24,570 --> 00:01:31,020
auftretenden Beteiligten sein, die
hier festgehalten werden sollten.

00:01:31,020 --> 00:01:33,030
Dann gibt es scheinbar einige Attribute,

00:01:33,690 --> 00:01:38,130
die die einzelnen Klassen haben, sodass
Objekte dieser Klassen (der Professor,

00:01:38,130 --> 00:01:43,140
konkret, oder ein konkretes Institut)
Ausprägungen dieser Attribute haben werden.

00:01:43,140 --> 00:01:47,160
Und es sind hier offenbar auch
irgendwelche Beziehungen dargestellt.

00:01:47,160 --> 00:01:50,340
Da scheint es auch verschiedene
Arten von Beziehungen zu geben.

00:01:50,340 --> 00:01:54,090
Manchmal stehen hier solche Zahlen dran
oder noch ganz spezielle Annotation.

00:01:54,090 --> 00:01:56,310
Das werden wir alles machen.

00:01:56,310 --> 00:01:59,200
Also Lernziele für diesen
Teil der Vorlesung hier sind,

00:01:59,200 --> 00:02:01,750
dass Sie einerseits diese
Modellierungssprache lernen.

00:02:01,750 --> 00:02:08,080
Dass Sie also so etwas lesen können und verstehen,
warum hier Dinge verschieden annotiert sind.

00:02:08,080 --> 00:02:10,000
Und zum anderen natürlich auch lernen,

00:02:10,000 --> 00:02:14,890
selbst Modelle damit aufzustellen (nach
und nach, auch über den Übungsbetrieb).

00:02:14,890 --> 00:02:27,310
Okay, was muss jetzt in so ein Klassendiagramm
hinein, oder was muss zunächst geschehen,

00:02:27,310 --> 00:02:31,750
bevor man sich daran macht, ein
objektorientiertes System zu entwickeln?

00:02:31,750 --> 00:02:34,150
Was sollte man davor modellieren?

00:02:34,150 --> 00:02:36,490
Insbesondere zunächst statisch modellieren.

00:02:36,490 --> 00:02:38,290
Hier sind ein paar Fragen, die sich da stellen,

00:02:38,290 --> 00:02:43,330
und deren Beantwortung dann letztlich
in das Klassendiagramm einfließt.

00:02:43,330 --> 00:02:44,740
Also zunächst mal offensichtlich:

00:02:44,740 --> 00:02:47,710
Welche Objekte beziehungsweise
Klassen werden benötigt?

00:02:47,710 --> 00:02:48,820
Also was sind die Entitäten?

00:02:48,820 --> 00:02:51,970
In dem Beispiel eben Professor, Institut etc.,

00:02:51,970 --> 00:02:55,750
die in dem Szenario vorkommen und
deswegen modelliert werden sollen.

00:02:55,750 --> 00:02:56,350
Auch:

00:02:56,350 --> 00:02:58,300
Wie viele Klassen braucht man denn?

00:02:58,300 --> 00:03:02,020
Wird man für jede Sache, die
auftreten kann, eine Klasse haben?

00:03:02,020 --> 00:03:05,770
Oder geht es nur um die zentralen Begriffe
 aus der Domäne, die man modelliert?

00:03:05,770 --> 00:03:10,660
Welche Merkmale haben diese Klassen und
welche Beziehungen bestehen zwischen ihnen?

00:03:10,660 --> 00:03:14,890
Also was sollte man als Attribute an welche
Klassen schreiben, und wie werden die verknüpft?

00:03:14,890 --> 00:03:17,740
Im Beispiel eben gab es ja irgendwie
nicht zwischen allen Klassen jeweils

00:03:17,740 --> 00:03:23,350
paarweise Beziehungen über diese Verknüpfung
hier, sondern nur für ausgewählte Paare.

00:03:23,350 --> 00:03:26,020
Das muss irgendwo herkommen,
durch irgendwas modelliert sein.

00:03:26,980 --> 00:03:29,680
Welche Operationen/Methoden stellen
diese Klassen zur Verfügung?

00:03:29,680 --> 00:03:31,945
Das tauchte in dem Beispiel eben gar nicht auf.

00:03:31,945 --> 00:03:37,570
Das waren die leeren Kästen, die
unterhalb der Klassen standen.

00:03:37,570 --> 00:03:40,555
Da wären Operationen festzuhalten.

00:03:40,555 --> 00:03:42,550
Das wurde in dem Beispiel noch nicht getan.

00:03:42,550 --> 00:03:44,470
Wie wirken diese Methoden zusammen?

00:03:44,470 --> 00:03:47,200
Das wäre dann schon eher eine Frage
für die dynamische Modellierung.

00:03:50,110 --> 00:03:51,310
In welchen Zuständen können
sich Objekte befinden?

00:03:51,310 --> 00:03:53,170
Das hat sicherlich auch
etwas mit Attributen zu tun.

00:03:53,170 --> 00:03:56,260
Welche Nachrichten werden wann
an andere Objekte geschickt?

00:03:56,260 --> 00:03:59,080
Welche Nachrichten es gibt, das wäre statisch.

00:03:59,080 --> 00:04:03,040
Wann das genau passiert, wäre wieder
eine Frage für dynamische Modellierung,

00:04:03,040 --> 00:04:10,630
die wir erst später beantworten können und
nicht mit Klassen- und Objektdiagrammen.

00:04:10,630 --> 00:04:13,120
Einige dieser Punkte haben schon
Anklang an die dynamische Modellierung.

00:04:13,120 --> 00:04:15,250
Aber schon für diese statische Modellierung,

00:04:15,250 --> 00:04:21,640
wenn man die ersten paar Fragen hier
beantwortet, muss man irgendwie loslegen.

00:04:21,640 --> 00:04:25,090
Dafür gibt es in der Literatur
verschiedene Vorgehensweisen.

00:04:25,090 --> 00:04:29,020
Die sind nicht völlig formal oder systematisch.

00:04:29,020 --> 00:04:33,820
Da geht es zum Beispiel erst mal darum, für
eine Domäne irgendwie Anforderungen aufzunehmen.

00:04:33,820 --> 00:04:36,520
Anforderungserfassung.

00:04:36,520 --> 00:04:42,550
Der erste Schritt, den man da machen müsste,
wäre überhaupt erst mal die Klassen zu bestimmen.

00:04:44,050 --> 00:04:47,410
Später kann man dann versuchen,
Beziehungen zwischen den Klassen

00:04:47,410 --> 00:04:51,580
herzustellen, um letztlich auf
das Klassendiagramm hinzuarbeiten.

00:04:51,580 --> 00:04:56,380
Was ich jetzt in den nächsten Folien machen
möchte, ist einfach mal aus einem der Bücher,

00:04:56,380 --> 00:05:00,760
die ich am Anfang der Vorlesung in
der ersten Woche vorgestellt habe,

00:05:00,760 --> 00:05:06,910
ein Beispiel herauszugreifen und da mal dieses
Finden von Klassen zumindest zu simulieren.

00:05:06,910 --> 00:05:08,830
Das wird auch nicht völlig systematisch sein,

00:05:08,830 --> 00:05:12,130
aber gibt zumindest einen Anklang
daran, wie man da vorgehen kann.

00:05:12,130 --> 00:05:15,370
Auch wenn Sie in den Übungsaufgaben
so eine Aufgabe haben, dass Ihnen ein

00:05:15,370 --> 00:05:19,360
Szenario gegeben ist und Sie die
Klassen identifizieren sollen (und

00:05:19,360 --> 00:05:23,080
später auch die Eigenschaften
und Beziehungen dazwischen).

00:05:23,080 --> 00:05:25,780
Wir machen das an folgendem Beispiel.

00:05:25,780 --> 00:05:28,930
Das ist in Englisch, da es wie gesagt
einem der Bücher entnommen ist,

00:05:28,930 --> 00:05:32,950
und das das englischsprachige Buch war.

00:05:32,950 --> 00:05:37,240
Wir werden das jetzt hier noch etwas
oberflächlich diskutieren, und auch

00:05:37,240 --> 00:05:42,160
nicht alle Klassendiagramm-Elemente ausgestalten.

00:05:42,160 --> 00:05:46,750
Aber Sie sollen schon einen Eindruck kriegen
und das auch so ähnlich nachmachen können,

00:05:46,750 --> 00:05:48,280
wenn Sie dann so eine Übungsaufgabe kriegen.

00:05:48,280 --> 00:05:52,330
Also nehmen wir an, es soll irgendwie
eine Bibliothek modelliert werden.

00:05:52,330 --> 00:05:57,550
Und im Vorfeld wurden einige Use Cases erfasst.

00:05:57,550 --> 00:06:03,520
Also aufgeschrieben, was denn das System,
das zu entwerfen ist, am Ende leisten soll.

00:06:03,520 --> 00:06:06,670
Und einer dieser Use Cases,
dieser Anwendungsfälle, wäre,

00:06:06,670 --> 00:06:09,790
ein neues Mitglied in der
Bibliothek zu registrieren.

00:06:09,790 --> 00:06:12,580
Und das wurde hier so
tabellarisch aufgeschrieben.

00:06:12,580 --> 00:06:21,230
Jeweils was sozusagen extern aus
Blackbox-Sicht ein Nutzer/Nutzerin

00:06:21,230 --> 00:06:24,920
mit dem System gerne machen würde,
welche Aktionen ausgeführt werden.

00:06:24,920 --> 00:06:29,870
Und dann steht jeweils da, wie das
System darauf reagieren sollte.

00:06:29,870 --> 00:06:30,380
Hier:

00:06:30,380 --> 00:06:37,670
Ein Kunde füllt ein Formular aus mit Namen,

00:06:37,670 --> 00:06:39,950
Adresse und Telefonnummer und
gibt das zu dem Angestellten.

00:06:39,950 --> 00:06:45,785
Der Angestellte, oder die Angestellte, fordert
das System auf, ein neues Mitglied anzulegen.

00:06:45,785 --> 00:06:49,220
Das System reagiert darauf und
fragt nach weiteren Informationen.

00:06:49,220 --> 00:06:50,540
Diese werden eingegeben.

00:06:50,540 --> 00:06:55,760
Das System liest die Daten ein und
erzeugt einen neuen Mitgliedseintrag.

00:06:56,450 --> 00:07:01,670
Gibt dazu eine eindeutige
Identifikationsnummer usw.

00:07:01,670 --> 00:07:05,570
All das wurde verbal aufgeschrieben.

00:07:05,570 --> 00:07:08,210
Und jetzt wäre die erste Frage, im Design:

00:07:08,210 --> 00:07:10,730
Was müssten denn die Klassen
sein, die man festhalten möchte?

00:07:10,730 --> 00:07:16,460
Was sind hier irgendwie Typen von wiederkehrenden
Objekten, von gemeinsam zu fassenden Objekten,

00:07:16,460 --> 00:07:20,540
die eine Rolle spielen, um den
Zustand des Systems zu beschreiben?

00:07:22,550 --> 00:07:24,320
Natürlich wäre das nur
einer von vielen Use Cases.

00:07:24,320 --> 00:07:28,700
Es gäbe noch weitere, um neue Bücher hinzuzufügen,
Bücher auszuleihen, ein Buch zurückzubringen,

00:07:29,390 --> 00:07:36,350
vielleicht Bücher aus dem Katalog zu entfernen,
Auszüge der Benutzerkonten zu erstellen etc.

00:07:39,680 --> 00:07:43,940
Was könnte man hieraus über die möglichen
Klassen lernen, die man hier erfassen möchte?

00:07:43,940 --> 00:07:49,280
Nun, ein sehr naiver Ansatz
wäre, einfach mal zu schauen:

00:07:49,280 --> 00:07:51,140
Was kommen denn hier für Begriffe drin vor?

00:07:51,140 --> 00:07:54,950
Und naheliegend ist, erst mal die
Substantive/Nomen anzuschauen.

00:07:54,950 --> 00:07:56,840
Denn Klassen sind Dinge.

00:07:56,840 --> 00:08:02,840
Keine Verben, sondern Subjekte
und Objekte von diesen Sätzen.

00:08:04,400 --> 00:08:06,860
Und das klingt sehr naiv, ist aber
tatsächlich ein erster Schritt,

00:08:06,860 --> 00:08:10,550
den man machen kann, um
Kandidaten für Klassen zu finden.

00:08:10,550 --> 00:08:14,420
Und wenn wir das einfach mal tun hier,
in diesem englischen Text alle Nomen

00:08:14,420 --> 00:08:16,880
herauszusuchen, sind hier mal alle fett gedruckt.

00:08:16,880 --> 00:08:18,470
Und das sind ganz schön viele.

00:08:18,470 --> 00:08:22,370
So viele Klassen will man am Ende
sicherlich nicht in dem System haben.

00:08:22,370 --> 00:08:26,170
Nicht alles davon wird
tatsächlich eine Klasse werden.

00:08:28,840 --> 00:08:32,470
Man kann jetzt diese Begriffe nehmen
und die mal filtern oder gruppieren.

00:08:32,470 --> 00:08:36,340
Und herausfinden, was davon denn
tatsächlich eine Klasse sein sollte.

00:08:36,340 --> 00:08:38,650
Was man festhalten muss
in seinem Klassendiagramm.

00:08:40,630 --> 00:08:43,480
Und da kann man erst mal
einige Beobachtungen treffen.

00:08:43,480 --> 00:08:48,670
Zum Beispiel ist auffällig, dass
es hier bestimmte Entitäten gibt,

00:08:48,670 --> 00:08:50,980
die scheinbar zusammengesetzte Einheiten bilden.

00:08:50,980 --> 00:08:57,490
Also für die es direkt Sinn macht, sie zu kapseln
als eine Klasse, die verschiedene Attribute hat.

00:08:57,490 --> 00:09:04,960
Das ist zum Beispiel für
Mitglieder oder Customer der Fall.

00:09:04,960 --> 00:09:06,700
Denn hier steht ja sowas:

00:09:06,700 --> 00:09:09,670
Der Customer hat einen Namen, eine
Adresse und eine Telefonnummer.

00:09:10,390 --> 00:09:16,420
Das sind scheinbar
Eigenschaften dieses Customers.

00:09:16,420 --> 00:09:23,350
Und Customer ist jetzt schon so ein Begriff,
"der Kunde" ist schon sehr domänenspezifisch.

00:09:23,350 --> 00:09:24,610
Man könnte auch allgemeiner sagen:

00:09:24,610 --> 00:09:25,390
Es geht um ein Mitglied.

00:09:28,420 --> 00:09:28,930
Wenn man mal schaut:

00:09:28,930 --> 00:09:30,040
Was sind zusammengesetzte Einheiten?

00:09:30,040 --> 00:09:31,420
Da gibt es mindestens zwei, nämlich:

00:09:31,420 --> 00:09:37,510
Das Mitglied scheint zusammengesetzt zu
sein, weil es eben in dem System dazu

00:09:37,510 --> 00:09:42,220
eine Identifikationsnummer geben soll
und bestimmte weitere Informationen.

00:09:42,220 --> 00:09:44,650
Und das System selber scheint
auch zusammengesetzt zu sein,

00:09:45,610 --> 00:09:47,410
weil es zum Beispiel die Mitglieder enthält.

00:09:47,410 --> 00:09:51,340
Was waren andere Nomen, die hier vorkamen?

00:09:51,340 --> 00:09:54,460
Customer, hatte ich schon gesagt,
ist das gleiche wie ein Member.

00:09:54,460 --> 00:09:58,990
Man könnte nach Synonymen suchen und sagen:

00:09:58,990 --> 00:10:00,580
Customer und Member sind Synonyme.

00:10:00,580 --> 00:10:04,060
Nur für eins davon wird man
eine Klasse einführen müssen,

00:10:04,060 --> 00:10:06,490
das andere wird einfach nur
 ein anderer Name dafür sein.

00:10:07,960 --> 00:10:09,595
Was gab es noch für Nomen?

00:10:09,595 --> 00:10:10,990
Den User.

00:10:10,990 --> 00:10:12,910
Das ist aber auch nur ein weiteres Synonym.

00:10:12,910 --> 00:10:18,820
User, Customer, Member bezieht sich alles
auf die gleichen Akteure in dem System.

00:10:20,440 --> 00:10:25,060
Also keine neuen Klassen, sondern Customer und
User werden auch die Klasse Member später.

00:10:28,500 --> 00:10:35,370
Application-Form, das ist eigentlich
hier nur ein Blatt Papier,

00:10:35,370 --> 00:10:38,490
auf dem der Kunde am Anfang seine Daten einträgt.

00:10:39,030 --> 00:10:41,280
Also nichts, was im System
selber repräsentiert wird.

00:10:41,280 --> 00:10:42,210
Die Daten nachher schon.

00:10:42,210 --> 00:10:46,680
Aber dieser Antrag, dieses
Formular, was ausgefüllt wird,

00:10:46,680 --> 00:10:49,650
ist nichts, was in dem System selber vorkommt.

00:10:49,650 --> 00:10:51,090
Also könnte man sagen:

00:10:51,090 --> 00:10:54,780
Das ist kein Indiz dafür, dass es
als Klasse eingeführt werden muss.

00:10:54,780 --> 00:10:58,110
Dann gibt es den Request.

00:10:58,110 --> 00:11:04,800
Das war etwas, was der
Angestellte auslösen sollte

00:11:04,800 --> 00:11:09,150
(wie durch Auswahl eines Menüs,
eines Eintrags in dem System).

00:11:09,150 --> 00:11:13,440
Also so wie Application-Form eher
nicht Teil einer Datenstruktur.

00:11:13,440 --> 00:11:16,260
Also nichts, was irgendwie
explizit abgespeichert werden muss.

00:11:16,260 --> 00:11:20,460
Dann gab es den Kundennamen,
Adresse, Telefonnummer.

00:11:20,460 --> 00:11:22,170
Das hatte ich vorhin schon motiviert:

00:11:22,170 --> 00:11:26,250
Das sind einerseits Attribute von Member
und andererseits auch Indizien dafür,

00:11:26,250 --> 00:11:28,440
dass Member eine Klasse sein sollte.

00:11:28,440 --> 00:11:30,000
Wir hatten von Kapselung gesprochen.

00:11:30,000 --> 00:11:35,280
Also das Zusammengesetztsein von Einzelentitäten
spricht immer dafür, dass es Klassen sein sollten.

00:11:35,280 --> 00:11:42,720
Hingegen so einzelne Begriffe wie der Name, der
außer Vor- und Nachname nicht noch weiter zerlegt

00:11:42,720 --> 00:11:46,110
ist, sprechen dafür, dass es vielleicht
eher Attribute von anderen Klassen sind.

00:11:46,110 --> 00:11:50,820
Und es nicht unbedingt eine eigene Klasse geben
muss für den Namen oder die Telefonnummer.

00:11:52,950 --> 00:11:56,640
Das heißt, das hier wären dann Attribute,

00:11:56,640 --> 00:12:01,320
die wir (in dem Klassendiagramm)
der Klasse Member zuordnen würden.

00:12:08,800 --> 00:12:14,710
Der Clerk ist natürlich ein Akteur, hat aber
hier nur die Rolle, das System zu bedienen.

00:12:14,710 --> 00:12:18,280
Er würde nicht selber in der
Software repräsentiert sein.

00:12:18,280 --> 00:12:19,120
Außer vielleicht:

00:12:19,120 --> 00:12:22,690
Der Clerk muss auch mit seinen
Kontaktdaten gespeichert werden,

00:12:22,690 --> 00:12:26,380
etwa zur Verwaltung der
Angestellten der Bibliothek.

00:12:26,380 --> 00:12:30,220
Wenn es um die Bibliothek selber geht, um
das "Geschäft", Ausleihen von Büchern etc.,

00:12:30,220 --> 00:12:34,120
ist der Clerk selber nicht etwas,
das abgespeichert werden muss.

00:12:34,120 --> 00:12:36,310
Was gibt es noch?

00:12:36,310 --> 00:12:40,870
Identification-Number ist auch Teil von Member,

00:12:40,870 --> 00:12:47,830
wäre also wie diese drei Begriffe am
Ende ein Attribut der Member-Klasse.

00:12:47,830 --> 00:12:51,280
Was taucht da noch auf?

00:12:51,280 --> 00:12:57,370
Data und Information, das sind einfach auch
die Sachen, die als Member gespeichert werden.

00:12:57,370 --> 00:13:03,670
Data und Information waren einfach Sammelbegriffe
für diese Attribute, keine neuen Klassen.

00:13:03,670 --> 00:13:16,870
Okay, das ist kein vollständiges Rezept,
sondern eine bestimmte intuitive Vorgehensweise,

00:13:16,870 --> 00:13:23,770
um aus freiem Text zunächst zu identifizieren,
was denn Klassen und Attribute sein können.

00:13:27,880 --> 00:13:30,970
Der nächste Schritt wäre dann, zwischen
diesen Klassen, die man identifiziert hat

00:13:30,970 --> 00:13:37,270
(das System und der Memberbegriff),
irgendwelche Beziehungen abzuleiten,

00:13:37,270 --> 00:13:40,090
um im Klassendiagramm auch
Beziehungen festhalten zu können.

00:13:40,090 --> 00:13:46,120
Dafür müssen wir wieder den Text hernehmen
und nach Beschreibungen suchen, die irgendwie

00:13:46,120 --> 00:13:52,750
zwei Klassen, insbesondere Member und System, in
Bezug setzen oder irgendwie gemeinsam erwähnen.

00:13:52,750 --> 00:14:01,540
Und wenn wir das tun, finden wir zum Beispiel
folgenden Satz im Kontext eines größeren Punktes:

00:14:01,540 --> 00:14:07,270
Das System merkt sich
Informationen über den Member.

00:14:07,270 --> 00:14:10,150
Informationen, das sind die Attribute von Member.

00:14:10,150 --> 00:14:14,770
Und Member wäre eine Klasse, von der
es dann verschiedene Instanzen gibt:

00:14:14,770 --> 00:14:17,140
die konkreten einzelnen
Mitglieder der Bibliothek.

00:14:17,140 --> 00:14:23,170
Wie könnte man das darstellen, irgendwie eine
Beziehung zwischen dem System und den Mitgliedern?

00:14:23,170 --> 00:14:28,540
Das System nennen wir mal Library, um
es nicht abstrakt nur System zu nennen.

00:14:28,540 --> 00:14:29,470
Es geht ja um die Bibliothek.

00:14:29,470 --> 00:14:33,010
Also, das System könnte eine
Klasse sein, die Bibliotheksklasse.

00:14:33,010 --> 00:14:35,920
Und dann gibt es die Klasse Member.

00:14:35,920 --> 00:14:38,800
Da stehen schon einige Attribute drin,

00:14:38,800 --> 00:14:43,480
die wir auf der Vorfolie indiziert
haben als Eigenschaften von Mitgliedern.

00:14:43,480 --> 00:14:47,065
Und dann könnte es eine Beziehung
zwischen den beiden geben.

00:14:47,065 --> 00:14:49,240
Und hier sind schon Zahlen drangeschrieben,

00:14:49,240 --> 00:14:54,400
die andeuten (und es wird später auch formuliert
werden, was sie genau bedeuten), als Grundidee:

00:14:54,400 --> 00:14:59,200
Es gibt eine Bibliothek und die hat
mehrere Mitglieder, "null bis Stern".

00:14:59,200 --> 00:15:02,290
Wobei Stern heißt: beliebig viele Mitglieder.

00:15:02,290 --> 00:15:06,730
Bis hin zu am Anfang gar keine Mitglieder, wenn
die Bibliothek vielleicht neu gegründet wurde.

00:15:06,730 --> 00:15:07,720
Die Bibliothek gibt es nur einmal.

00:15:08,500 --> 00:15:10,060
Man könnte sich auch fragen,
ob das eine Klasse sein muss,

00:15:10,060 --> 00:15:12,610
oder ob es reicht, dafür ein Objekt zu haben.

00:15:12,610 --> 00:15:14,110
Es gibt den Begriff der Singleton Class.

00:15:14,110 --> 00:15:17,410
Das sind wiederum Pattern,
die zum Beispiel in der

00:15:17,410 --> 00:15:21,070
Fortgeschrittene-Programmiertechniken-Vorlesung
zum Tragen kämen.

00:15:21,070 --> 00:15:24,760
Aber hier wird schon ein bisschen durch
die Zahlen und die Informationen darüber

00:15:24,760 --> 00:15:30,310
vermittelt, wie viele Objekte es
von den Einzelklassen geben kann.

00:15:30,310 --> 00:15:33,010
Insbesondere, wie viele in
so einer Beziehung stehen.

00:15:33,010 --> 00:15:40,630
Die Bibliothek verwaltet eine
Sammlung von Mitgliedern,

00:15:40,630 --> 00:15:42,580
und hier steht dran, wie viele das sein können.

00:15:45,460 --> 00:15:48,880
Natürlich würden hier an die Attribute
eigentlich auch wieder noch Typen gehören.

00:15:49,420 --> 00:15:49,630
Da haben wir hier:

00:15:49,630 --> 00:15:55,135
Das ist eine Zahl, das ist eine Adresse,
hier vielleicht nur eine Zeichenkette, etc.

00:15:55,135 --> 00:15:58,360
Das ist auf dieser Ebene
des Klassendiagramms noch

00:15:58,360 --> 00:16:03,730
nicht genau festgehalten, wäre aber auch
Aufgabe des Klassendiagramm-Designers.

00:16:06,610 --> 00:16:08,110
Das ist noch nicht sehr weit, dieses Bild.

00:16:08,110 --> 00:16:12,070
Jetzt könnte man weitere Use Cases hinzunehmen,
zum Beispiel eben das Anlegen von Mitgliedern.

00:16:12,070 --> 00:16:15,250
Oder zusätzlich zum Anlegen von
Mitgliedern noch das Anlegen von Büchern.

00:16:15,250 --> 00:16:17,350
Das Ausleihen von Büchern, etc.

00:16:17,350 --> 00:16:22,900
Das könnte zu weiteren Klassen führen, aber
insbesondere auch zu weiteren Beziehungen.

00:16:22,900 --> 00:16:29,380
Jetzt ist hier einfach mal gezeigt,
auch aus dem Buch, wie nach einigen

00:16:29,380 --> 00:16:33,880
Betrachtungen weiterer solcher Anwendungsfälle
das Bild vielleicht verfeinert werden könnte.

00:16:33,880 --> 00:16:37,690
Zum Beispiel, dass die Bibliothek
zusätzlich zu der Verwaltung von

00:16:37,690 --> 00:16:42,550
Mitgliedern auch eine Sammlung
von Büchern zu verwalten hat.

00:16:43,090 --> 00:16:44,440
Deswegen gibt es eine neue Klasse Buch,

00:16:44,440 --> 00:16:47,200
und dann gibt es auch noch Beziehungen
zwischen Mitgliedern und Büchern.

00:16:47,200 --> 00:16:52,870
Zum Beispiel das Ausleihen, also die Tatsache,
dass ein Ausleihvorgang stattgefunden hat.

00:16:52,870 --> 00:16:54,910
Oder vielleicht auch, dass, wenn
ein Buch nicht verfügbar ist,

00:16:54,910 --> 00:17:00,400
ein Mitglied es aber ausleihen möchte, man
dann irgendwie eine Reservierung anlegen kann,

00:17:00,400 --> 00:17:06,250
die eine Reservierung auf dieses Buch hält.

00:17:06,250 --> 00:17:08,770
So dass, wenn das Buch verfügbar
wird, man es ausleihen kann.

00:17:13,080 --> 00:17:18,390
Das wäre ein nächster Schritt beim
Entwurf eines Klassendiagramms.

00:17:18,390 --> 00:17:22,350
Und da kann man noch weitere
Verfeinerungen machen.

00:17:22,350 --> 00:17:24,510
Also, diese Beziehungen hier,
die wären einfach nur Striche.

00:17:24,510 --> 00:17:27,420
Wir werden lernen, dass es verschiedene Arten von

00:17:27,420 --> 00:17:30,060
Beziehungen gibt, die jeweils
ihre eigene Bedeutung haben.

00:17:30,060 --> 00:17:34,680
Und wenn man das hier genauer analysiert,
welcher Natur diese Einzelbeziehungen sind,

00:17:34,680 --> 00:17:37,020
könnte man zum Beispiel zu folgendem Bild kommen.

00:17:37,020 --> 00:17:41,370
Wo man einerseits hier noch weitere
Klassen eingeführt hat, nämlich einen

00:17:41,370 --> 00:17:44,550
expliziten Mitgliedskatalog
und einen Buchkatalog.

00:17:45,870 --> 00:17:50,820
Aber vor allem sind hier die Verbindungen
verfeinert, präzisiert worden.

00:17:50,820 --> 00:17:52,920
Es gibt verschiedene Arten von Symbolen.

00:17:52,920 --> 00:17:56,580
Das werden wir uns alles anschauen,
was das jeweils bedeuten soll.

00:17:56,580 --> 00:17:57,300
Aber der Punkt ist:

00:17:57,300 --> 00:18:05,340
Man hat hier das Bild weiter verfeinert, um
letztlich der Implementierung näherzukommen.

00:18:05,340 --> 00:18:11,400
Jeder Schritt fügt Informationen hinzu, die
aus der Anwendungsdomäne motiviert sind,

00:18:11,400 --> 00:18:14,070
und später bei der Umsetzung
des Systems helfen sollen.

00:18:18,420 --> 00:18:24,480
Hier sind verschiedene Namen für die Verbindungen
und auch verschiedene Darstellungsweisen.

00:18:24,480 --> 00:18:28,950
Hier wurde zum Beispiel entschieden, dass
das, was hier vorher noch als Klasse

00:18:28,950 --> 00:18:30,930
für den Ausleihvorgang stand,
nicht unbedingt nötig ist.

00:18:30,930 --> 00:18:34,230
Weil man die Information auch beim
Buch oder beim Mitglied speichern kann.

00:18:34,230 --> 00:18:39,375
Während die Reservierung etwas ist, das explizit
als Klasse repräsentiert sein soll, weil da noch

00:18:39,375 --> 00:18:45,510
externe Informationen nötig sind, zum Beispiel
bis wann das Buch reserviert bleiben soll.

00:18:51,600 --> 00:18:57,780
Das als erstes Beispiel mit noch
nicht vielen Detailinformationen,

00:18:57,780 --> 00:19:03,030
aber zumindest einem Eindruck, wie so
ein Klassendiagramm aussehen sollte.

00:19:03,030 --> 00:19:10,710
Okay, als nächstes müssen wir tatsächlich
mal wirklich Syntax einführen.

00:19:10,710 --> 00:19:12,690
Wie denn so eine Klasse genau zu notieren ist.

00:19:12,690 --> 00:19:15,540
Hier ist sehr vieles im Vagen geblieben.

00:19:15,540 --> 00:19:18,660
Das mache ich aber in einem weiteren Video.
