0:00:00.000,0:00:06.360
I wanted to show you another
example of an unbounded Petri net.

0:00:06.360,0:00:09.870
What we have here before is
not yet an unbounded Petri net.

0:00:09.870,0:00:11.310
This is a bounded Petri net.

0:00:11.310,0:00:17.700
We know that because we had
already drawn a reachability graph

0:00:17.700,0:00:19.530
for it on the slides, and it was finite.

0:00:19.530,0:00:21.990
And that means per se that
the Petri net is bounded.

0:00:21.990,0:00:22.860
Let me remind you again:

0:00:22.860,0:00:24.510
What was possible here?

0:00:24.510,0:00:30.360
So, in the initial situation (the reachability graph
also specified this), exactly only t1 was fireable

0:00:30.360,0:00:38.040
and would then lead to the fact that we
ultimately have two tokens down here.

0:00:38.040,0:00:41.220
Because of this 2 here.

0:00:41.220,0:00:44.190
And after that,
there were several possibilities.

0:00:44.190,0:00:45.990
We could fire t2, fire t3.

0:00:45.990,0:00:50.400
We could also fire t2 and fire
t2, or fire t3 and fire t3.

0:00:50.400,0:00:53.730
Then in some of these constellations,
we reached a dead end.

0:00:53.730,0:00:56.490
So the Petri net was not deadlock-free.

0:00:56.490,0:00:57.990
But that is not the point at the moment.

0:00:57.990,0:01:01.440
Let's just first take the path that

0:01:01.440,0:01:04.890
leads to ending up
back at the initial marking.

0:01:04.890,0:01:10.620
So that would be executing t2,
t3 or t3, t2 in any order.

0:01:10.620,0:01:13.238
And the Petri net is bounded, that can be
intuitively explained here (beyond the fact that

0:01:13.238,0:01:21.270
you can just set up the
reachability graph) by the fact that

0:01:21.270,0:01:26.370
at each transition, there are as
many tokens consumed as generated.

0:01:26.370,0:01:31.560
Yes, we see that both
here and here, for example.

0:01:31.560,0:01:35.460
So there are two tokens going
in and two tokens coming out.

0:01:35.460,0:01:39.990
But that's also true for the other
transitions in this particular Petri net.

0:01:39.990,0:01:44.700
And therefore, a simple way to
get an unbounded Petri net here is

0:01:44.700,0:01:51.820
that we replace, for example,
this 2 with a 3.

0:01:51.820,0:02:01.120
Yes, this is still a Petri net, but a
different one with different weights.

0:02:01.120,0:02:05.110
A different mathematical
formulation would also have that.

0:02:05.110,0:02:06.910
And then we can look:

0:02:06.910,0:02:07.840
What would happen now?

0:02:07.840,0:02:11.530
And, well, I have just made
sure that the number of tokens

0:02:11.530,0:02:15.070
in the system can increase, and can
increase constantly, again and again.

0:02:15.070,0:02:18.580
Just increasing the number of tokens
once would not lead to unboundedness.

0:02:18.580,0:02:31.240
But here we have now that, for example, when
firing t1, one token is consumed from the left,

0:02:31.240,0:02:36.520
one token is consumed from the right, and
three tokens are deposited at the bottom.

0:02:43.640,0:02:44.780
Then the next constellation
would look like this.

0:02:44.780,0:02:49.880
And that's one that didn't show up
yet in the earlier reachability graph,

0:02:49.880,0:02:51.380
because the Petri net
has now changed here.

0:02:51.380,0:02:55.880
And now it would be possible
to fire on in different ways.

0:02:55.880,0:03:00.680
Among other things, one way to
continue would be that we move

0:03:00.680,0:03:08.060
up this token, for example, then move this
token to here, and then fire t1 again.

0:03:08.060,0:03:09.110
What would happen then?

0:03:09.110,0:03:10.610
Then again a token would
disappear from here, a token

0:03:10.610,0:03:14.990
would disappear from here, and three
tokens would be put down at the bottom.

0:03:14.990,0:03:18.260
Because of this 3, which is
at the output arrow for t1.

0:03:20.360,0:03:21.800
That could then look
like this, for example.

0:03:21.800,0:03:25.520
And then you can already see that you can

0:03:25.520,0:03:28.790
ultimately reach any number of tokens
here on place s3, for example.

0:03:28.790,0:03:29.510
Not only on place s3.

0:03:29.510,0:03:32.300
We can also move them all
up to s2 or to s1.

0:03:32.300,0:03:35.900
Here it is even true that for each place
in this Petri net and each constant

0:03:35.900,0:03:39.830
c that we choose, for example
15, we can still have 16 tokens

0:03:39.830,0:03:43.820
lying on a position, for example, after
a sufficient number of firing operations.

0:03:43.820,0:03:47.810
That is, the constant c = 15 does not
bound the behavior of this Petri net.

0:03:47.810,0:03:51.470
And even if we choose some higher
constant c, for example 37,

0:03:51.470,0:03:53.900
then there are also firing
processes, which at some point lead

0:03:53.900,0:03:57.080
to 38 tokens or more
lying on at least one place.

0:03:59.960,0:04:03.320
I hope that's basically clear so far,

0:04:03.320,0:04:05.150
as I've developed it here,
that that can happen.

0:04:05.150,0:04:06.980
So for example, I could now shift up here.

0:04:06.980,0:04:12.830
And now I could again fire t1 here
with these two tokens, and then

0:04:12.830,0:04:19.250
I would already have six tokens lying at
the bottom on the s3 place afterwards.

0:04:28.400,0:04:31.292
And that is indeed not bounded.

0:04:31.292,0:04:32.600
Yes, so 6 would still be bounded, but
7, 8, 9, 10, etc. are also possible.

0:04:32.600,0:04:37.700
That means, in the end, you can accumulate as
many tokens as you like on individual places.

0:04:37.700,0:04:40.910
And thus, by definition, the
Petri net is not bounded.

0:04:40.910,0:04:42.530
Of course it is not 1-safe.

0:04:42.530,0:04:44.330
It is not anyway, already
because of the 2 that was there.

0:04:44.330,0:04:48.380
But it is also not bounded for any
other arbitrarily high constant.

0:04:48.380,0:04:54.830
It is interesting that such unboundedness does
not necessarily have to come from the fact

0:04:54.830,0:05:00.050
(like here) that we have
such weights greater than 1.

0:05:00.050,0:05:02.420
So there are also Petri nets, which

0:05:02.420,0:05:07.550
fulfill, so to speak, the first condition
of 1-safety (namely, each weight is

0:05:07.550,0:05:12.560
at most 1 and even in the start
marking, on each place lies at

0:05:12.560,0:05:16.340
most one token) and nevertheless, such
a Petri net can be unbounded then.

0:05:16.340,0:05:18.170
You might think about this on your own.

0:05:18.170,0:05:21.260
Think about a Petri net which looks
syntactically good at first (no

0:05:21.260,0:05:28.310
weights greater than 1, no places of the
start marking with more than one token),

0:05:28.310,0:05:30.620
and yet the Petri net is not bounded.

0:05:30.620,0:05:32.420
This is not the example you see here.

0:05:32.420,0:05:34.880
You could think of
a suitable example yourself.

0:05:34.880,0:05:36.530
This is quite instructive, I think.
