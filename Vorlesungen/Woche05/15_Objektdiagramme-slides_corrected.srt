115 # slide
00:00:01,440 --> 00:00:08,910
Having dealt with class diagrams, and in
particular also with the validity of class

00:00:08,910 --> 00:00:14,070
diagrams (i.e., the constraints
that exist on class diagrams when

00:00:14,070 --> 00:00:17,940
considering the various relationships),
we now come to object diagrams.

00:00:17,940 --> 00:00:22,410
So obviously the specification
of individual objects.

00:00:22,410 --> 00:00:26,040
An object, we know, is
an instance of a class.

00:00:26,040 --> 00:00:33,180
And what you're seeing here is a slide that
you've seen something similar or exactly the same.

00:00:33,180 --> 00:00:37,080
So we have a class, and then we discussed (and
this also came up in the exercise) when then

00:00:37,080 --> 00:00:42,630
an object is an instantiation of
it (so it instantiates this class).

00:00:42,630 --> 00:00:43,800
Reminder:

00:00:43,800 --> 00:00:47,160
In particular, all attributes
had to be set.

00:00:47,160 --> 00:00:50,790
If this was a subclass of another class,

00:00:50,790 --> 00:00:55,230
then the attributes of the
superclass would also appear here.

00:00:55,230 --> 00:00:57,930
What does not appear,
however, are the methods.

00:00:57,930 --> 00:01:02,700
Because they have no place
in an object (with this

00:01:02,700 --> 00:01:04,110
kind of modeling we are doing here).

00:01:06,120 --> 00:01:07,740
That would be an object.

00:01:07,740 --> 00:01:10,470
An object diagram is
then obviously a diagram

00:01:10,470 --> 00:01:15,030
in which several such objects occur,
which are possibly related to each other.

00:01:15,030 --> 00:01:18,300
Where the relationships that
should/could exist there would

00:01:18,870 --> 00:01:20,340
depend on a class diagram.

00:01:20,340 --> 00:01:24,750
So you have to have a valid class
diagram, and then you can talk

00:01:24,750 --> 00:01:29,850
about creating an object
diagram for that class diagram.

00:01:29,850 --> 00:01:32,940
The idea here is:

00:01:32,940 --> 00:01:39,960
If the class diagram defines the framework for how a
system can be designed, then an object diagram would

00:01:39,960 --> 00:01:44,610
be a kind of snapshot of the
system at a point in time.

00:01:44,610 --> 00:01:48,360
In other words, a set of objects with their
relationships to each other as they might be

00:01:48,360 --> 00:01:49,920
present in a system at a particular point
in time that satisfies the class diagram.

00:01:49,920 --> 00:01:57,480
A class diagram was used to record
what types of actors should exist,

00:01:57,480 --> 00:02:01,890
what attributes exist, how
the classes are related.

00:02:02,580 --> 00:02:05,880
An object diagram must then
be a concrete manifestation of

00:02:05,880 --> 00:02:09,720
this (which, of course, adheres to everything
that was modeled in the class diagram).

00:02:11,970 --> 00:02:15,420
The point is that we then have a

00:02:15,420 --> 00:02:21,840
clear mapping of, for example, the
various associations and the properties.

00:02:21,840 --> 00:02:23,670
The multiplicities must
be approximately adhered to.

00:02:23,670 --> 00:02:27,480
So we have to fulfill everything
that the class diagram

00:02:27,480 --> 00:02:29,580
specifies, also in a
corresponding object diagram.

00:02:29,580 --> 00:02:36,330
Thereby the objects get names.

00:02:36,330 --> 00:02:41,520
We have here perhaps a class "Point" and then
several individual points, here "myPoint".

00:02:42,570 --> 00:02:45,240
We could also have
"myPoint1" or "myPoint2" here.

00:02:45,240 --> 00:02:54,495
So the objects have an identity,
which can be represented by a name.

00:02:54,495 --> 00:02:56,790
But an object
could also remain anonymous.

00:02:56,790 --> 00:02:59,880
Sometimes the name part is simply

00:03:00,630 --> 00:03:04,080
omitted if it is not important to
the object that it has a name.

00:03:04,080 --> 00:03:08,250
But the class must be specified so that
we know which class this object is from.

00:03:08,250 --> 00:03:11,340
Then we would simply have something
like this as a specification, and

00:03:11,340 --> 00:03:15,870
say: "Object of the class Point"; and in front
of it, however, there would be no concrete name.

00:03:15,870 --> 00:03:19,080
So that this object
would have no proper name,

00:03:19,080 --> 00:03:21,900
but would simply remain an anonymous
object of the corresponding class.

00:03:21,900 --> 00:03:26,310
We will not include the classes
themselves in the object diagram.

00:03:26,310 --> 00:03:30,780
We will have separately a class diagram
and then a matching object diagram.

00:03:30,780 --> 00:03:34,710
So not the situation where both are in
one diagram with these extra arrows.

00:03:34,710 --> 00:03:36,060
We're not going to do that here.

00:03:36,060 --> 00:03:39,510
You can do that, but that's not
going to happen in our tasks.

00:03:39,510 --> 00:03:48,210
Then I had just said that in the
objects we assign the attributes

00:03:48,210 --> 00:03:49,410
that are predefined by the classes.

00:03:49,410 --> 00:03:52,530
UML does not
necessarily always require this.

00:03:52,530 --> 00:04:01,020
UML also allows that we do not assign all
attributes of an object, because perhaps not all

00:04:01,020 --> 00:04:04,650
attributes are relevant for the concrete
situation that is to be represented.

00:04:04,650 --> 00:04:08,670
Of course, the situation is different if
we require (for example, in the exercise or

00:04:08,670 --> 00:04:11,520
exam) that you should make
a complete instantiation.

00:04:11,520 --> 00:04:13,470
That is, that you should set

00:04:13,470 --> 00:04:18,480
all attributes that are predefined by
the class definition in the object.

00:04:18,480 --> 00:04:21,410
If you refrain from this requirement
(i.e., you don't explicitly

00:04:21,410 --> 00:04:24,140
require this, as we might do in
the exercise or exam), then you

00:04:24,140 --> 00:04:29,180
could certainly represent instantiations
of abstract classes in the object diagram.

00:04:29,180 --> 00:04:32,120
Although I had said last week that

00:04:32,120 --> 00:04:41,095
you cannot instantiate objects from abstract
classes in a concrete implementation.

00:04:41,095 --> 00:04:42,530
For such a representation of the object
diagram, it would be in principle

00:04:42,530 --> 00:04:46,880
also possible to form an
instantiation of an abstract class.

00:04:46,880 --> 00:04:57,260
Of course, under the circumstances that not all
attributes are set (which would be necessary

00:04:58,640 --> 00:05:05,270
if we specify objects from a concrete
subclass of the abstract class).

00:05:09,980 --> 00:05:10,910
And very important:

00:05:10,910 --> 00:05:14,600
There are no
inheritance arrows between objects.

00:05:14,600 --> 00:05:18,260
We will see in a moment how the other
relationships that exist at the class level

00:05:18,260 --> 00:05:27,050
(association, aggregation, composition)
are reflected in the object diagram.

00:05:27,050 --> 00:05:28,550
The inheritance arrows between classes
in the class diagram, on the other hand,

00:05:28,550 --> 00:05:31,430
have no equivalent in the object diagram,
because we specify concrete objects there.

00:05:31,430 --> 00:05:32,900
An object then belongs
to a concrete class.

00:05:32,900 --> 00:05:36,380
This can be a class from a class
hierarchy with several inheritances.

00:05:36,380 --> 00:05:38,360
But this one object we are mapping

00:05:38,360 --> 00:05:42,080
belongs to *one* class and does
*not* inherit from another object.

00:05:42,080 --> 00:05:45,050
Rather, it belongs to a class that
may inherit from other classes.

00:05:45,050 --> 00:05:48,860
The inheritance arrows that exist between
classes do not exist between objects.

00:05:54,530 --> 00:05:59,870
Because of the concepts of
inheritance, superclasses,

00:05:59,870 --> 00:06:04,130
subclasses, objects could in principle
also have a superclass specified.

00:06:05,270 --> 00:06:08,450
If we remember the "Points" and
the "ColouredPoints", then we

00:06:08,450 --> 00:06:10,550
could have a concrete "ColouredPoint".

00:06:10,550 --> 00:06:12,680
So a concrete object of
the class "ColouredPoint".

00:06:12,680 --> 00:06:15,170
This is also an
object of the class "Point".

00:06:15,170 --> 00:06:20,540
Therefore, in this specification, a superclass
could also be specified if we don't want to have

00:06:20,540 --> 00:06:25,580
this more precise again in the exercise
or the exam or explicitly exclude it.

00:06:30,590 --> 00:06:33,140
I had already spoken about
the fact that we do not find

00:06:33,140 --> 00:06:36,740
the inheritance arrows in the object
diagram, but the other relationships do.

00:06:36,740 --> 00:06:39,620
How are they represented
in the object diagram?

00:06:39,620 --> 00:06:47,150
By means of the term "link",
which is simply a connection,

00:06:47,150 --> 00:06:50,480
a link, but now
any relationship between objects.

00:06:52,400 --> 00:06:56,450
If we have an association on the class level,
or an aggregation or a composition, then

00:06:56,450 --> 00:07:02,360
this can be found on the level of the
objects of the corresponding classes

00:07:02,360 --> 00:07:05,240
by means of a connecting
line, a link, a connection.

00:07:05,240 --> 00:07:10,940
These are then quite concrete manifestations of
such a relationship of specific objects of

00:07:10,940 --> 00:07:16,520
the classes involved in the relationship
existing on the class level.

00:07:16,520 --> 00:07:23,780
There are no multiplicities
attached to the links.

00:07:23,780 --> 00:07:26,960
The multiplicities in the
class diagram tell us

00:07:26,960 --> 00:07:33,140
how many objects of this or that type
can be involved in such a relationship.

00:07:33,140 --> 00:07:35,840
In the object diagram we always
have very concrete objects.

00:07:35,840 --> 00:07:43,460
So a link represents exactly one
relationship between two concrete objects.

00:07:43,460 --> 00:07:49,970
And although this may be an instance
of an association with multiplicities,

00:07:49,970 --> 00:07:53,030
these multiplicities will not
be attached to this link.

00:07:53,030 --> 00:07:56,090
Of course, they still
have to be observed.

00:07:56,090 --> 00:08:02,610
So you don't see on a concrete link
which multiplicities are prevalent there.

00:08:02,610 --> 00:08:04,200
Because that's a class-level concept.

00:08:04,200 --> 00:08:07,170
But if we look at
the entire object diagram, then

00:08:07,170 --> 00:08:11,250
of course it has to satisfy the
multiplicities from the class diagram.

00:08:11,250 --> 00:08:13,140
So if the class
diagram specifies "there are

00:08:13,140 --> 00:08:18,780
objects of class A related to a
maximum of two objects of class B";

00:08:18,780 --> 00:08:23,520
then we just can't have one object of
class A and three objects of class B in

00:08:23,520 --> 00:08:27,450
the object diagram, so that this A
object is related to all three B objects.

00:08:28,350 --> 00:08:33,660
Finally, the multiplicity conditions of
the class diagram must be respected.

00:08:33,660 --> 00:08:35,790
That is, the numbers of
objects that are related must

00:08:35,790 --> 00:08:37,590
be within their respective bounds.

00:08:37,590 --> 00:08:40,740
But there is not a number
attached to each link somehow.

00:08:40,740 --> 00:08:45,690
Because these numbers span all links.

00:08:45,690 --> 00:08:48,660
This is a requirement for all links

00:08:48,660 --> 00:08:54,360
that exist between objects of one
class and objects of another class.

00:08:54,360 --> 00:08:58,950
We will see in the example
how this is to be understood.

00:09:03,090 --> 00:09:06,330
Let's take an example
that we had before and

00:09:06,330 --> 00:09:09,330
extend it a little bit or
build two examples together.

00:09:09,330 --> 00:09:11,700
Once we had the example
with parking lots and cars.

00:09:11,700 --> 00:09:15,570
Then at some point we also
had a situation with cars

00:09:15,570 --> 00:09:24,540
and owners, and on the whiteboard slides
I had also once related cars and wheels.

00:09:24,540 --> 00:09:27,540
Always these two pairs of classes.

00:09:28,140 --> 00:09:31,470
Let's put that into a larger,
extended class diagram, where we

00:09:31,470 --> 00:09:36,540
have the parking lot with an aggregation to
car with corresponding multiplicities here.

00:09:36,540 --> 00:09:43,050
And the car has a composition to wheel,
again with certain multiplicities.

00:09:43,050 --> 00:09:47,580
Different from the example
that I had looked at on

00:09:47,580 --> 00:09:51,780
the whiteboard, I really have
the 1 here at the composition.

00:09:52,500 --> 00:09:54,510
In the other example I had
said a wheel could be also

00:09:54,510 --> 00:09:56,460
in storage, then not in any car.

00:09:57,480 --> 00:09:59,070
Here it is more specific.

00:09:59,070 --> 00:10:01,410
So there's just this
one composition here, and

00:10:01,410 --> 00:10:06,480
there's also the ownership, so there's
an association of person to car.

00:10:06,480 --> 00:10:11,370
So now we have three different
kinds of relationships.

00:10:11,370 --> 00:10:14,130
We don't have inheritance in this example.

00:10:14,130 --> 00:10:16,230
Of course, we can create object diagrams

00:10:16,230 --> 00:10:18,750
from class diagrams
that contain inheritance.

00:10:18,750 --> 00:10:20,040
Then we have to remember, first of all,

00:10:20,040 --> 00:10:28,680
that the subclasses inherit all their relationships
from the superclasses in addition to their attributes.

00:10:32,700 --> 00:10:35,220
So this is a possible class diagram.

00:10:35,220 --> 00:10:42,600
Now we can take a look at what an
object diagram might look like for this.

00:10:42,600 --> 00:10:45,000
We need to decide how
many cars we want to have.

00:10:45,000 --> 00:10:47,640
Let's take at least two, because it
would be boring with only one car.

00:10:47,640 --> 00:10:50,280
Let's take two cars that should exist.

00:10:50,280 --> 00:10:51,990
Then we already know:

00:10:51,990 --> 00:10:55,140
Each car can be in
zero or one parking space.

00:10:55,140 --> 00:11:01,290
Let's say there is a parking lot
that happens to have these two cars.

00:11:02,310 --> 00:11:02,670
We also know:

00:11:02,670 --> 00:11:09,630
Each car has exactly four wheels,
and no wheel can belong to two cars.

00:11:09,630 --> 00:11:12,420
That is, if we have two cars, we will probably
have exactly eight wheels as other objects.

00:11:13,020 --> 00:11:18,630
And then each car must also
have an owner, exactly one.

00:11:18,630 --> 00:11:25,350
However, one owner can own several
cars, for example up to five.

00:11:28,830 --> 00:11:32,480
So what might a concrete object diagram
for this class diagram look like?

00:11:32,480 --> 00:11:33,770
For example, as follows:

00:11:33,770 --> 00:11:36,290
This is the situation we had.

00:11:36,290 --> 00:11:39,440
For example, here as an object
is a concrete parking lot, namely

00:11:39,440 --> 00:11:43,010
the one in the L-area
of the campus in Duisburg.

00:11:43,010 --> 00:11:49,790
That would be "Name-of-object is
object of the class parking lot".

00:11:49,790 --> 00:11:51,770
What I've done here in this example this time,

00:11:52,280 --> 00:11:56,540
is that I've omitted the
attribute boxes everywhere.

00:11:57,170 --> 00:11:58,370
Actually, for all attributes, which are

00:11:58,370 --> 00:12:05,690
mentioned here in the second box, there
would be assignments here as well.

00:12:05,690 --> 00:12:07,760
We will also have that
sometimes in the exercises,

00:12:07,760 --> 00:12:14,330
that we stylize the objects and partly also
the classes in such a way that we actually

00:12:14,330 --> 00:12:21,710
only have the box with the name and not also
the two boxes for attributes and methods.

00:12:21,710 --> 00:12:24,050
So this one parking lot.

00:12:24,050 --> 00:12:28,520
Then I had talked about two cars, for
example a green Skoda and a black Ford.

00:12:28,520 --> 00:12:32,330
These are each cars as different
instantiations of the class car,

00:12:32,330 --> 00:12:37,130
and they're both contained
in this one parking lot.

00:12:37,130 --> 00:12:42,230
So these two links here are
instances of this one relationship.

00:12:50,090 --> 00:13:00,260
Then there's an owner in each case,
which are instantiations of this class.

00:13:00,260 --> 00:13:03,170
These are these two person
objects here, Peter and Gabi.

00:13:03,170 --> 00:13:09,620
It could also be just one owner.

00:13:09,620 --> 00:13:15,290
There could also be another link
from Gabi to the green Skoda.

00:13:15,290 --> 00:13:20,060
But then this object, or this relationship
here, would have to disappear.

00:13:20,060 --> 00:13:24,110
Because Gabi and Peter can't both
be owners of the green Skoda,

00:13:24,110 --> 00:13:26,600
because each car has
only exactly one owner.

00:13:30,410 --> 00:13:31,610
Then there is this relationship here.

00:13:31,610 --> 00:13:35,960
To each car belong exactly four wheels,
therefore we have four wheels here respectively.

00:13:35,960 --> 00:13:40,730
I just left them as anonymous objects.

00:13:40,730 --> 00:13:45,200
These are four different wheels, but
they are not distinguished by names.

00:13:45,200 --> 00:13:47,060
Nevertheless, there are in any
case four and here again four,

00:13:47,060 --> 00:13:48,710
thus altogether eight different objects.

00:13:48,710 --> 00:13:53,330
They are just not named like "front
left wheel of the green Skoda" or so.

00:13:53,330 --> 00:13:55,310
Here we see again:

00:13:55,310 --> 00:14:02,420
For each instance of the
composition there is a link.

00:14:02,420 --> 00:14:06,680
The green Skoda has links to exactly
four wheels, and so does the black Ford.

00:14:06,680 --> 00:14:14,510
And they each have exactly one
link to the car containing them.

00:14:14,510 --> 00:14:18,560
So this satisfies
these multiplicities here.

00:14:18,560 --> 00:14:20,660
But they are not attached
to the links themselves,

00:14:20,660 --> 00:14:22,520
because that makes no
sense for a single link.

00:14:22,520 --> 00:14:31,580
What is important is that, for example, these
four links together satisfy these constraints

00:14:31,580 --> 00:14:36,950
here, which result from the composition
here with the corresponding multiplicities.

00:14:38,810 --> 00:14:43,280
Now if we were to start deleting
objects or deleting links or

00:14:43,280 --> 00:14:45,920
adding more objects, we
could always ask ourselves:

00:14:45,920 --> 00:14:48,710
Does it still satisfy this class diagram?

00:14:48,710 --> 00:14:51,320
If I specify a fifth wheel here,

00:14:51,320 --> 00:14:54,680
and also link it to the green Skoda,
then I would have a violation.

00:14:54,680 --> 00:14:58,400
Because then I would have assigned five
wheels to the green Skoda, which is forbidden.

00:14:58,400 --> 00:15:01,580
If I added a wheel without connecting
it to any car, I would have

00:15:01,580 --> 00:15:03,870
violated the class diagram as well.

00:15:03,870 --> 00:15:09,180
Because for this wheel there would not
then be exactly one car that contains it.

00:15:09,180 --> 00:15:09,480
Which, however, must exist according
to this specification here.

00:15:09,480 --> 00:15:15,990
Of course, this is not the
only suitable object diagram.

00:15:15,990 --> 00:15:20,970
But many changes we could make locally
now would violate the class diagram.

00:15:20,970 --> 00:15:24,900
However, there are other object diagrams
that also fit this class diagram.

00:15:25,590 --> 00:15:29,970
One task in the exercises or even the
exam could be to decide for a class

00:15:29,970 --> 00:15:34,140
diagram and an object diagram whether this
object diagram fits this class diagram.

00:15:34,140 --> 00:15:38,370
Or to set up an object diagram of
a certain size for a class diagram.

00:15:43,920 --> 00:15:46,890
Two more comments:

00:15:48,270 --> 00:15:51,810
We could certainly, even though
I didn't do it in the example

00:15:51,810 --> 00:15:57,570
just now, also note the aggregation and
composition symbols in the object diagram.

00:15:57,570 --> 00:16:05,040
Since these four links are instances of this
composition, one could also draw this filled

00:16:05,040 --> 00:16:10,140
diamond at each of these four places
here, and of course also here below.

00:16:10,140 --> 00:16:11,310
But you don't have to.

00:16:11,310 --> 00:16:18,990
Likewise, you can
omit the association name.

00:16:18,990 --> 00:16:21,570
Here I did it for the sake
of clarity, so that you

00:16:21,570 --> 00:16:23,280
know what these two associations are.

00:16:23,280 --> 00:16:26,760
It is not obligatory to write them there.

00:16:26,760 --> 00:16:29,430
This is done mainly
for the sake of clarity.

00:16:30,540 --> 00:16:37,650
Which was perhaps not necessary here, because
exactly four wheels belong to it anyway.

00:16:37,650 --> 00:16:44,970
There was no need to emphasize that

00:16:44,970 --> 00:16:48,930
they belong to the composition symbol.

00:16:48,930 --> 00:16:50,970
Or to add a name.

00:16:52,080 --> 00:16:52,830
Here there is the name.

00:16:52,830 --> 00:16:57,180
It could have been written in these
four places, but it doesn't have to be.

00:16:57,180 --> 00:17:06,260
The same applies to reading
direction and navigation direction.

00:17:06,890 --> 00:17:07,831
This is what it says here:

00:17:07,831 --> 00:17:10,209
Association name, navigation direction and
reading direction can also be omitted.

00:17:10,209 --> 00:17:14,240
We will also have object diagrams
where just the links are drawn in

00:17:14,240 --> 00:17:17,120
without any further annotations on them.

00:17:29,540 --> 00:17:33,020
I had already
given this "Attention" warning:

00:17:33,020 --> 00:17:38,330
We must remember, of course, when
specifying an object diagram or checking

00:17:38,330 --> 00:17:43,970
the fit to a class diagram, that
relationships (i.e., associations,

00:17:43,970 --> 00:17:47,210
aggregations, compositions)
are inherited between classes.

00:17:48,050 --> 00:17:54,380
If a class has relationships of this
type to another class, then they are also

00:17:54,380 --> 00:17:58,520
present in the subclass, so must be
considered for objects of the subclass.

00:17:58,520 --> 00:18:00,140
Example:

00:18:01,070 --> 00:18:03,560
Suppose we have a class Account
and two subclasses of it,

00:18:03,560 --> 00:18:06,530
and we have a relationship
of customers to accounts.

00:18:07,370 --> 00:18:11,960
In particular, each account must have
exactly one owner, a customer who owns it.

00:18:11,960 --> 00:18:17,210
Then savings accounts and checking
accounts must also have exactly one owner

00:18:17,210 --> 00:18:20,570
each, even though there is no explicit
relationship of these to customers.

00:18:21,860 --> 00:18:26,270
They inherit that because they
are subclasses of Account.

00:18:26,270 --> 00:18:36,610
That is, an object
diagram might look like this:

00:18:36,610 --> 00:18:39,970
Suppose we have exactly two accounts, a
savings account and a checking account.

00:18:40,990 --> 00:18:41,679
Then they must each have an owner.

00:18:41,679 --> 00:18:42,179
They could also have the same owner.

00:18:43,660 --> 00:18:48,190
A customer may have several accounts,
because nothing is restricted here.

00:18:48,190 --> 00:18:51,430
But each checking account or savings
account must have exactly one owner.

00:18:52,780 --> 00:18:56,110
There could also be a second
object, another customer, who

00:18:56,110 --> 00:19:00,430
would own the savings account and
Klaus only the checking account.

00:19:00,430 --> 00:19:01,930
That would also be allowed.

00:19:01,930 --> 00:19:06,160
What would not be allowed, however,
would be that there is simply another

00:19:06,160 --> 00:19:09,880
savings account or another checking
account, which have no owner.

00:19:09,880 --> 00:19:13,150
Because then this requirement
would not be fulfilled.

00:19:13,150 --> 00:19:22,390
Of course, it would also not be allowed that
there is another customer and the savings

00:19:22,390 --> 00:19:28,120
account would be owned by Klaus
as well as by this other customer.

00:19:28,120 --> 00:19:31,060
Because that would also
contradict this 1 here.

00:19:36,280 --> 00:19:42,550
Further discussion on the fit
of object diagrams to class

00:19:42,550 --> 00:19:47,500
diagrams, with at least one
more example, by extra video.
