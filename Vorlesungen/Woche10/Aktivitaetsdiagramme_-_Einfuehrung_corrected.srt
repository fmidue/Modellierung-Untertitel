210 # slide
00:00:00,000 --> 00:00:07,770
After a whole series of content and
videos on Petri nets, now back to UML.

00:00:07,770 --> 00:00:13,350
We have dealt with UML
for class and object diagrams, i.e.

00:00:13,350 --> 00:00:15,210
for static modeling.

00:00:15,210 --> 00:00:19,920
Whereas on dynamic modeling, we've
actually had Petri nets so far,

00:00:19,920 --> 00:00:22,950
and related concepts
reachability graphs, etc.

00:00:22,950 --> 00:00:29,280
And then at the beginning of
the lecture the flat state diagrams, that

00:00:29,280 --> 00:00:33,960
was also dynamic modeling, yes we also
used that to describe or model processes.

00:00:34,920 --> 00:00:40,440
So, we have not yet looked at
dynamic aspects in these two respects with UML.

00:00:40,440 --> 00:00:48,330
If you go back to the classifications
from the first week of the lecture and

00:00:48,330 --> 00:00:50,730
look at what kind
of models we considered:

00:00:50,730 --> 00:00:55,710
Under the dynamic aspects, there
was both qualitative and quantitative models.

00:00:55,710 --> 00:00:59,640
So especially with the Petri nets
through the capacities that we looked at

00:00:59,640 --> 00:01:02,670
last, we also have
modeling in quantitative terms.

00:01:02,670 --> 00:01:06,810
We looked at that
for quite different examples

00:01:06,810 --> 00:01:09,630
and have not limited it in any way
to software systems,

00:01:09,630 --> 00:01:14,340
but especially the examples were
often somehow not necessarily software driven.

00:01:14,340 --> 00:01:18,630
If we look at what
kind of modeling we did,

00:01:18,630 --> 00:01:21,690
it was essentially white box modeling.

00:01:21,690 --> 00:01:26,430
So really capturing the
inside of the systems

00:01:26,430 --> 00:01:31,650
that were described, by the states
or by specifying places and transitions.

00:01:31,650 --> 00:01:34,320
That was really about
the inner workings of systems.

00:01:34,320 --> 00:01:39,750
And in sum, with the Petri nets, it was
important to us, and that kept us busy, that we

00:01:39,750 --> 00:01:44,700
did this relatively formally, or the Petri
nets have a formal syntax and also semantics.

00:01:44,700 --> 00:01:48,030
In other words, they have very
fixed rules according to which they

00:01:48,030 --> 00:01:53,280
are structured and also clear semantic
mathematical descriptions of what an execution

00:01:53,280 --> 00:01:56,760
of a Petri net looks like
or what formal properties it has.

00:01:58,050 --> 00:02:00,750
So that's what we've done
so far, in dynamic terms.

00:02:00,750 --> 00:02:06,360
UML, on the other hand, we have
so far used explicitly only for static modeling.

00:02:06,360 --> 00:02:07,860
I had once very briefly
shown a UML activity diagram

00:02:07,860 --> 00:02:11,550
sometime at the beginning
of the Petri net chapter.

00:02:11,550 --> 00:02:13,620
We will see that again in a moment.

00:02:13,620 --> 00:02:18,810
This is our introduction
to dynamic modeling with UML.

211 # slide
00:02:18,810 --> 00:02:22,140
Yes, so keyword: activity diagrams.

00:02:22,140 --> 00:02:26,520
These are UML diagrams which,
unlike class and object diagrams, do

00:02:26,520 --> 00:02:31,170
not describe the static
structure of a software system,

00:02:31,170 --> 00:02:34,890
for example, but instead are
used to model flow charts, sequences

00:02:34,890 --> 00:02:38,910
of actions, parallelism of
actions, i.e. such dynamic aspects.

00:02:38,910 --> 00:02:41,850
Concurrency also plays a role here.

00:02:41,850 --> 00:02:46,200
Not on the formal level like
in Petri nets, but as an

00:02:46,200 --> 00:02:52,590
idea that actions should
be executed independently or concurrently/parallel.

00:02:52,590 --> 00:02:59,340
There are many applications for
activity diagrams in software design.

00:02:59,340 --> 00:03:05,790
More generally also quite with partly
somewhat different notation, but basically corresponding to

00:03:05,790 --> 00:03:12,270
the UML activity diagrams,
for modeling business processes,

00:03:12,270 --> 00:03:17,610
workflows or just the case of
software modeling to describe "use cases".

00:03:17,610 --> 00:03:21,720
So, in general, whenever
it is about summarizing

00:03:21,720 --> 00:03:28,470
single steps in certain
typical ways to overall processes.

00:03:28,470 --> 00:03:34,350
So, if there is a system
that performs any single steps and it

00:03:34,350 --> 00:03:38,460
should be described which types, which
sequences of steps should be allowed.

00:03:38,460 --> 00:03:44,070
And this of course does not correspond to
the Petri nets, where we also had a focus

00:03:44,070 --> 00:03:49,110
on which sequences of transitions should be
allowed for a system to be modeled.

00:03:49,110 --> 00:03:54,323
And in fact, activity diagrams are in
many ways very similar to Petri nets.

00:03:54,323 --> 00:03:58,230
Yes we will actually
make a strong connection

00:03:58,230 --> 00:04:02,250
by translating activity
diagrams into Petri nets.

00:04:02,250 --> 00:04:05,250
So then will see
what the correspondence looks like.

00:04:05,250 --> 00:04:07,380
In fact, activity diagrams,

00:04:07,380 --> 00:04:14,220
as is common in UML, are richer
than now this formal mechanism of Petri nets.

00:04:14,220 --> 00:04:18,870
They provide more modeling possibilities, so
also more syntax, more different kinds

00:04:18,870 --> 00:04:21,957
of nodes, not just places and
transitions, as in Petri nets Petri nets.

00:04:21,957 --> 00:04:26,010
Where that was sort of a
very simple, very basic representation only.

00:04:26,010 --> 00:04:30,180
So we'll see in a moment that
there are more elements there in activity diagrams.

00:04:30,180 --> 00:04:35,070
The flip side is that
they don't have full formal semantics.

00:04:35,070 --> 00:04:38,820
So some of the formal questions
that we can ask about Petri nets

00:04:38,820 --> 00:04:43,440
and also answer unambiguously because
they are just as mathematically precise.

00:04:43,440 --> 00:04:48,000
Will not be possible for
activity diagrams in the same way.

212 # slide
00:04:48,000 --> 00:04:55,320
And it is not intended, because
activity diagrams have a descriptive character

00:04:55,320 --> 00:05:03,420
in software modeling and should not
necessarily serve the formal analysis first.

00:05:03,420 --> 00:05:09,300
O.k., so activity diagrams and actually

213 # slide
00:05:09,300 --> 00:05:16,080
this will first show
in simply an activity diagram.

00:05:16,080 --> 00:05:19,830
And then play around
with that a little bit.

00:05:19,830 --> 00:05:23,910
Again, in a separate video,
to capture, so to speak,

00:05:23,910 --> 00:05:27,510
what can actually be the mentioned single

00:05:27,510 --> 00:05:32,580
steps or sequences of single
steps for this concrete activity diagram.

00:05:32,580 --> 00:05:36,210
If we first look
at it superficially, this is

00:05:36,210 --> 00:05:41,220
not a software example, but somehow
a house construction is to be modeled.

00:05:41,220 --> 00:05:43,230
There is a beginning and an end.

00:05:43,230 --> 00:05:47,250
You can already guess that here by
the arrows and their order or direction.

00:05:47,250 --> 00:05:50,820
And there are single actions, such nodes.

00:05:50,820 --> 00:05:54,960
Of course it looks a
bit like a flat state diagram.

00:05:54,960 --> 00:05:56,655
However, we can already see differences.

00:05:56,655 --> 00:05:58,350
We see, for example,
that there are different

00:05:58,350 --> 00:06:02,490
types of nodes that
will probably have different meanings.

00:06:02,490 --> 00:06:05,640
And such special symbols
that didn't appear in our

00:06:05,640 --> 00:06:08,850
flat state diagram at the
beginning of the lecture either.

00:06:08,850 --> 00:06:10,800
Then there was just
nodes and arrows in between.

00:06:10,800 --> 00:06:14,160
So here there are some special
elements, but if you look naively,

00:06:14,160 --> 00:06:16,170
you can imagine that there are nodes

00:06:16,170 --> 00:06:22,320
and arrows like in a flat state diagram.

00:06:22,320 --> 00:06:24,630
And one carries out just
here such actions: Choose a

00:06:24,630 --> 00:06:27,630
building site, look for an architect,
create a plan, submit a plan.

00:06:27,630 --> 00:06:31,740
Well, and then there are special display

00:06:32,570 --> 00:06:34,880
elements that we haven't
seen in Petri nets yet.

00:06:34,880 --> 00:06:38,480
And here you can already guess
that maybe something is happening in parallel.

00:06:38,480 --> 00:06:40,790
Simply by the kind of representation and
that is of course something that did

00:06:40,790 --> 00:06:42,770
not exist in flat state diagrams.

00:06:42,770 --> 00:06:44,840
There was always only
one current state and

00:06:44,840 --> 00:06:47,570
then you moved through
the flat state diagram.

00:06:47,570 --> 00:06:49,070
And there has to be
something more happening here somehow,

00:06:49,070 --> 00:06:55,490
what exactly we'll look at in
a moment as we play through.

00:06:55,490 --> 00:06:57,110
But, what I was trying to point out was

00:06:57,110 --> 00:07:01,580
just that there are these different types of
elements that each have a very specific role.

00:07:01,580 --> 00:07:09,530
Which we then need to describe
when we look at activity diagrams in

00:07:09,530 --> 00:07:11,840
more detail and then be
able to create those ourselves.
