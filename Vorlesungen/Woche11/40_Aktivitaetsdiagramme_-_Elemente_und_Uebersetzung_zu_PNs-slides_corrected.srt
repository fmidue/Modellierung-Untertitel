213 # slide
00:00:00,000 --> 00:00:03,390
So, we have just seen this example.

00:00:03,390 --> 00:00:08,550
And I had already made a few hints
in the direction of Petri nets.

00:00:08,550 --> 00:00:14,520
And in fact, in what follows, we're going
to compare the individual elements of

00:00:14,520 --> 00:00:19,170
activity diagrams, their constituents, to
Petri net constituents, borrowing from

00:00:19,170 --> 00:00:24,870
a semantics found in the literature for
at least parts of activity diagrams.

00:00:24,870 --> 00:00:29,760
We're not going to use that in the sense of
really examining that semantically, but we're

00:00:29,760 --> 00:00:35,550
going to use that correspondence to explain
the activity diagram elements in the process.

00:00:35,550 --> 00:00:39,690
And we'll always do that for the
individual elements in general,

00:00:39,690 --> 00:00:42,510
but also related to this example.

214 # slide
00:00:42,510 --> 00:00:49,530
O.k., so basically this then
gives us a way to translate

00:00:49,530 --> 00:00:52,800
activity diagrams into Petri nets.

00:00:52,800 --> 00:00:57,960
Just as we had translated Petri
nets with capacities into Petri nets

00:00:57,960 --> 00:01:01,800
without capacities and through this, of
course, one can then understand activity

00:01:01,800 --> 00:01:06,180
diagrams, because we know for Petri
nets what the respective meaning is.

00:01:06,180 --> 00:01:12,150
Okay, so what are the first kind
of nodes in activity diagrams?

00:01:12,150 --> 00:01:15,120
Those were these action
nodes or simply actions.

00:01:15,120 --> 00:01:20,700
They're these ovals or
rectangles with rounded corners.

00:01:20,700 --> 00:01:24,030
So these kind of nodes that looked
like that in the diagram as well.

00:01:24,030 --> 00:01:30,720
So the "create plan" was such a
first, such an action node or action.

00:01:30,720 --> 00:01:36,660
O.k. and that corresponds very directly
in Petri nets simply to transitions.

00:01:36,660 --> 00:01:39,480
In Petri nets, transitions looked
like this and could have a name.

00:01:39,480 --> 00:01:42,900
So an action from an activity
diagram would just be

00:01:42,900 --> 00:01:45,990
a transition with the
appropriate name in a Petri net.

00:01:45,990 --> 00:01:49,830
And because it's about action, you
could take as such an indication

00:01:49,830 --> 00:01:54,750
that you usually then have names there that
somehow correspond to activities or verbs.

00:01:54,750 --> 00:01:56,610
Yes, like here "creating".

00:01:56,610 --> 00:02:04,410
Okay, the intuition is that
actions stand for activities.

00:02:04,410 --> 00:02:06,315
Something that takes time.

00:02:06,315 --> 00:02:07,530
Yes, we think again of workflow,

00:02:07,530 --> 00:02:13,320
so to speak, the description
of successive individual steps.

00:02:13,320 --> 00:02:16,650
Then each individual step is
something that is somehow an activity.

00:02:16,650 --> 00:02:24,510
Which perhaps takes a while, which represents
an action, like the transitions in Petri nets.

00:02:25,500 --> 00:02:27,240
So, that would just be a different
representation, so to speak.

00:02:27,240 --> 00:02:28,350
So that's still quite simple.

00:02:28,350 --> 00:02:30,450
Actions are transitions.

00:02:30,450 --> 00:02:36,750
Okay, then there were the
connections between actions.

00:02:36,750 --> 00:02:38,280
Those were these arrows.

215 # slide
00:02:38,280 --> 00:02:42,900
That would be the control flow or
at some point then object flow.

00:02:42,900 --> 00:02:47,640
If we have object nodes, we will take the
tokens then not only simply as markers.

00:02:47,640 --> 00:02:53,010
As markers where the focus
is in the activity diagram.

00:02:53,010 --> 00:02:54,750
But actually, like
in the house construction

00:02:54,750 --> 00:02:57,600
example a token stands for a
concrete plan, thus for an object.

00:02:57,600 --> 00:03:02,460
Something that is also perhaps related
to a class and object diagram.

00:03:02,460 --> 00:03:04,830
Then we're talking more about the
object flow.

00:03:04,830 --> 00:03:08,130
But the point is: There is this
flow, primarily between actions.

00:03:08,130 --> 00:03:11,760
How can we represent that in a Petri net?

00:03:11,760 --> 00:03:14,310
Well, in the Petri
net, after all, there can

00:03:14,310 --> 00:03:17,580
be no connection, no linkage from
a transition to a transition.

00:03:17,580 --> 00:03:21,120
Yes, if we translate action as transitions,
then "Choose building site" would

00:03:21,120 --> 00:03:25,950
be a transition, "Find architect"
a transition, then there can't be

00:03:25,950 --> 00:03:28,500
a direct connection, as
here in the activity

00:03:28,500 --> 00:03:33,390
diagram, because in Petri nets transitions
and places must always occur alternately.

00:03:33,390 --> 00:03:39,390
Therefore there will be a so-called auxiliary place
here (elsewhere later also auxiliary transitions).

00:03:39,390 --> 00:03:42,420
So on the Petri net side there
is a place, which does not get

00:03:42,420 --> 00:03:46,140
a name, which is not directly motivated by
anything that occurs here in the activity diagram.

00:03:46,140 --> 00:03:49,470
It is simply there to establish the
connection between these two actions or

00:03:49,470 --> 00:03:54,840
on the Petri net side between
these two transitions.

00:03:54,840 --> 00:03:59,610
Because such a process could be, if
somehow "select building site" has fired, I

00:03:59,610 --> 00:04:01,800
would put down a token, a marker.

00:04:01,800 --> 00:04:04,620
And then this transition could
fire and pass this token.

00:04:04,620 --> 00:04:09,600
And then could fire "create plan" and
again somehow still have an output.

00:04:09,600 --> 00:04:15,550
So then this sequence of individual steps
in the activity diagram would correspond

00:04:15,550 --> 00:04:19,150
to the sequential
firing of these transitions.

00:04:19,150 --> 00:04:21,550
And for this they
should be linked meaningfully,

00:04:21,550 --> 00:04:25,150
and this is easily done here by
such mediating auxiliary places.

00:04:25,150 --> 00:04:32,980
Yes, so of course these edges/these
arrows then correspond to

00:04:32,980 --> 00:04:37,870
the temporal logical sequence of
the order in which things happen.

00:04:39,250 --> 00:04:45,040
And auxiliary places are that because
they are only there to produce

00:04:45,040 --> 00:04:48,490
this legality of the Petri net.

00:04:48,490 --> 00:04:50,680
They also do not have their own name.

00:04:50,680 --> 00:04:53,620
We had that already several times that we
could not necessarily give a meaningful

00:04:53,620 --> 00:04:55,660
name to all elements in the Petri net.

00:04:56,320 --> 00:04:58,900
These three transitions would have a
meaningful name here because they correspond to

00:04:58,900 --> 00:05:03,880
these actions, and these are auxiliary places,
because they are simply there to get the flow correct

00:05:03,880 --> 00:05:07,990
and not because they correspond to anything
directly from the activity diagram.

00:05:09,670 --> 00:05:12,850
They don't deserve their own name,
so to speak, and we've seen something

00:05:12,850 --> 00:05:14,470
similar in Petri nets for transitions.

00:05:14,470 --> 00:05:17,170
So auxiliary transitions that
didn't have their own name

00:05:17,170 --> 00:05:21,640
because, for example, they don't correspond here
exactly to an action from the activity diagram.

00:05:21,640 --> 00:05:29,080
Ok, so actions become transitions.

00:05:29,080 --> 00:05:38,350
Control flow can be realized by inserted
places and the respective connections.

216 # slide
00:05:38,350 --> 00:05:41,860
Then in the activity diagram that
we had seen, there were these object

00:05:41,860 --> 00:05:43,750
nodes or one such object node.

00:05:43,750 --> 00:05:46,630
That was another kind of
node in the activity diagram.

00:05:46,630 --> 00:05:48,670
Also represented differently
in a rectangle

00:05:48,670 --> 00:05:51,790
without rounded corners,
so an actual rectangle.

00:05:51,790 --> 00:05:57,790
Intuitively, from the point of view of
understanding, these stand, so to speak, for

00:05:57,790 --> 00:06:00,490
a storage location, for a storage
for objects, concrete objects.

00:06:00,490 --> 00:06:04,810
Quite understandable in the sense
of object-oriented modeling.

00:06:04,810 --> 00:06:07,150
So, if we imagine that we might use an

00:06:07,150 --> 00:06:10,480
activity diagram to describe
or model a software system.

00:06:10,480 --> 00:06:14,260
Modeling an aspect of it, then
there might actually be a class name

00:06:14,260 --> 00:06:18,340
here, from a class diagram,
which we developed earlier.

00:06:18,340 --> 00:06:22,840
And the idea would then be that the objects that
are here, that the marking/tokens then stand

00:06:22,840 --> 00:06:26,730
for, that they should actually be
instances of the particular class.

00:06:26,730 --> 00:06:31,260
That doesn't show up in the example now
because we don't have a class diagram in mind.

00:06:31,260 --> 00:06:35,790
But the intuition would be that
such an object node could actually

00:06:35,790 --> 00:06:38,940
be used to store
concrete instances of classes.

00:06:38,940 --> 00:06:43,800
And these just correspond to
normal places in the Petri net.

00:06:43,800 --> 00:06:47,460
In the Petri net, if we wanted to store
resources somehow, we use places for that.

00:06:47,460 --> 00:06:53,640
So this object node would become a place
in the Petri net and it would have a name.

00:06:53,640 --> 00:06:57,360
So it's not just an auxiliary
place, it's a real named place.

00:06:57,360 --> 00:06:59,910
Logically, it gets the same
name as this object node.

00:06:59,910 --> 00:07:03,090
And if there would be, for example,
here now several possibilities,

00:07:03,090 --> 00:07:05,400
from which somehow a plan can result.

00:07:05,400 --> 00:07:08,160
Then this would correspond to the fact
that there are several transitions, several

00:07:08,160 --> 00:07:12,360
actions from the activity diagram translated
into transitions in the Petri net.

00:07:12,360 --> 00:07:18,660
Several transitions that can
deposit tokens on this place.

00:07:18,660 --> 00:07:23,490
So somehow a management of resources and

00:07:23,490 --> 00:07:29,010
for that we had stored tokens
on places in Petri nets.

00:07:29,700 --> 00:07:35,130
From this part of the activity diagram,
then this part of a Petri net with these

00:07:35,130 --> 00:07:43,620
two actions becoming transitions and this
object node realized by a named place.

00:07:43,620 --> 00:07:51,120
The names of such places or of object
nodes are usually nouns and not verbs.

00:07:51,120 --> 00:07:53,880
Yes, because it is just about
objects that can be placed in transitions.

00:07:53,880 --> 00:08:01,410
O.k., I had already
indicated that a moment ago.

00:08:01,410 --> 00:08:04,080
So, if we were
actually doing software modeling,

00:08:04,080 --> 00:08:07,590
then such object nodes would
often be labeled with class names.

00:08:07,590 --> 00:08:10,350
Because the intuition then is that
that makes the connection between the

00:08:10,350 --> 00:08:11,361
static modeling and the dynamic modeling.

00:08:11,361 --> 00:08:12,330
The static modeling, which describes the
classes and objects, and the dynamic

00:08:12,330 --> 00:08:22,320
modeling, which then describes
sequences of actions and can use

00:08:23,610 --> 00:08:28,290
that there are these object
types from the static modeling.

00:08:28,290 --> 00:08:32,850
I.e., not that these
object nodes have somehow

00:08:32,850 --> 00:08:37,710
attributes, as we have
assigned attributes to classes.

00:08:37,710 --> 00:08:41,880
Because this node should
not be an object,

00:08:41,880 --> 00:08:44,512
but this should be a storage
for different objects.

00:08:44,512 --> 00:08:52,080
So it would make no sense to structure
this node somehow and to write

00:08:52,080 --> 00:08:54,450
attribute values into it, for example.

00:08:54,450 --> 00:08:58,290
Because it is only a storage for
concrete objects and not an object.

00:08:58,290 --> 00:09:05,940
O.k., what else did we have in
our example activity diagram?

217 # slide
00:09:05,940 --> 00:09:09,210
Well, we still had this kind of node.

00:09:09,210 --> 00:09:14,670
I hadn't given them a name yet,
they are called "decision nodes".

00:09:14,670 --> 00:09:16,890
In the example, we had made a
decision like that there as well.

00:09:16,890 --> 00:09:19,230
That was after "creating a plan".

00:09:19,230 --> 00:09:23,850
There, we wanted to submit it and
there should then be the possibility

00:09:23,850 --> 00:09:26,640
that either the plan is accepted or not.

00:09:26,640 --> 00:09:31,350
And that led to various
further processes, ultimately

00:09:31,350 --> 00:09:34,230
a branching in the flow, in
the control or object flow.

00:09:34,230 --> 00:09:38,970
Where out of alternative paths,
exactly one is always chosen.

00:09:38,970 --> 00:09:43,500
So no splitting of
control flow or of tokens,

00:09:43,500 --> 00:09:47,700
but actually a choice of one path.

00:09:47,700 --> 00:09:51,630
O.k., for this, these
diamond nodes are used,

00:09:51,630 --> 00:09:54,900
which can have several inputs or outputs.

00:09:54,900 --> 00:09:59,700
And possibly have such
conditions at the exits.

00:09:59,700 --> 00:10:04,770
What would be the
equivalent in a Petri net?

00:10:04,770 --> 00:10:08,730
Well, if we want to
somehow branch a path in

00:10:08,730 --> 00:10:13,140
the Petri net, we can do that by branching
from a place where a token could be.

00:10:13,140 --> 00:10:17,610
Like for example here, the submitted
plan, have several possible exits,

00:10:17,610 --> 00:10:22,860
so have several possible transitions,
each having this place as a precondition.

00:10:25,680 --> 00:10:31,680
In that case, if this is the transition
to this action node and then we

00:10:31,680 --> 00:10:33,750
want to have further flow here and here,

00:10:33,750 --> 00:10:37,650
then we couldn't have two exit arrows
directly from the transition somehow.

00:10:37,650 --> 00:10:41,370
Because that would mean that we're splitting
something up, so we're outputting two tokens.

00:10:41,370 --> 00:10:45,900
No, there is a place (that does NOT count as an auxiliary
place) where this action, this transition puts a token.

00:10:45,900 --> 00:10:51,150
And then there could also be different transitions
here and here, each of which can consume

00:10:51,150 --> 00:10:56,269
this token and then have some flow
in this direction or that direction.

00:10:56,269 --> 00:10:59,970
So, if here below an activity diagram
is translated into further transitions,

00:10:59,970 --> 00:11:02,820
then the first of them
could be the output here.

00:11:02,820 --> 00:11:12,060
O.k., it can be, we even see
that in the example here, that we

00:11:12,060 --> 00:11:15,150
now have to
introduce auxiliary transitions.

00:11:15,150 --> 00:11:19,230
So then this place ensures that
we can have such a branch.

00:11:19,230 --> 00:11:22,140
We couldn't do that directly.

00:11:22,140 --> 00:11:26,430
Yes, if we did the same here too, if there
followed another node like that in the example,

00:11:26,430 --> 00:11:30,780
then we couldn't just say
we'll replace it again with

00:11:30,780 --> 00:11:33,390
a place like this node and
have a direct connection.

00:11:33,390 --> 00:11:34,110
That is not possible.

00:11:34,110 --> 00:11:37,020
Because of the rules of
Petri nets again, that there

00:11:37,020 --> 00:11:40,800
can only be connections from places to
transitions and from transitions to places,

00:11:40,800 --> 00:11:43,500
then we must introduce an
auxiliary transition at this point.

00:11:43,500 --> 00:11:46,680
It doesn't get a name either, it is only
there to make this further transport

00:11:46,680 --> 00:11:51,690
of a token from here to here in a
way that is legal for a Petri net.

00:11:51,690 --> 00:11:54,270
And not just have a connection
from place to place.

00:11:54,270 --> 00:11:55,830
Which would not be a valid Petri net.

00:11:57,360 --> 00:11:59,430
This can occur here,
for example, because a

00:11:59,430 --> 00:12:03,810
decision node is followed by
another decision node or an

00:12:03,810 --> 00:12:07,830
object node, which would also be
realized by a Petri net place.

00:12:07,830 --> 00:12:11,580
In the same way, this can also
be with the reverse order.

00:12:11,580 --> 00:12:16,050
So not only with following but also
with preceding decision or object nodes.

00:12:16,050 --> 00:12:20,310
And also the merge nodes
which we will see shortly.

00:12:20,310 --> 00:12:23,430
Strictly speaking, this is
not a branching node

00:12:23,430 --> 00:12:27,810
but a merge node in the
concrete activity diagram.

00:12:30,234 --> 00:12:31,740
That's what this one was.

00:12:31,740 --> 00:12:36,120
What I'm describing is the
path from here to here.

00:12:36,120 --> 00:12:37,920
So from this element to this element.

00:12:38,940 --> 00:12:43,530
This is a branching node, because
one input, two outputs, and

00:12:43,530 --> 00:12:48,480
this is a merge node, because
two inputs and one output.

00:12:48,480 --> 00:12:52,830
And there it just can't be from this
place, which we had already seen, which

00:12:52,830 --> 00:12:57,540
we had already described on a
slide, how this part of the activity

00:12:57,540 --> 00:13:03,330
diagram becomes a Petri net part.

00:13:03,330 --> 00:13:04,710
There it became a place.

00:13:04,710 --> 00:13:08,700
And then there can't be a direct
connection from this place to this place.

00:13:08,700 --> 00:13:11,250
In between, there must
be an auxiliary transition

00:13:11,250 --> 00:13:14,910
in the Petri net, so to
speak, drawn somewhere here.

00:13:14,910 --> 00:13:19,620
And it would be just this
one in the concrete example.

00:13:19,620 --> 00:13:32,400
O.k., then we have what else?

218 # slide
00:13:32,400 --> 00:13:38,430
I would like to make
a few remarks at this point.

00:13:38,430 --> 00:13:41,070
I have already said this several times.

00:13:41,070 --> 00:13:46,230
Namely, this reason, essential reason, for this
introduction of auxiliary places and auxiliary

00:13:46,230 --> 00:13:51,540
transitions is simply that in the end a
structurally correct Petri net should come out.

00:13:51,540 --> 00:13:55,410
In which places and transitions occur
alternately and for this one must

00:13:55,410 --> 00:13:58,230
add further elements if necessary, which

00:13:58,230 --> 00:14:03,960
were not visible at all in the activity
diagram, because other elements occur in it.

00:14:03,960 --> 00:14:08,760
O.k. I had also just indicated that.

00:14:08,760 --> 00:14:12,990
So what was just in those square
brackets: "accepted", "not accepted".

00:14:12,990 --> 00:14:18,630
So finally the control
at the branch in which

00:14:18,630 --> 00:14:20,430
direction the control or
object flow should go.

00:14:20,430 --> 00:14:22,500
The so-called "guards",

00:14:22,500 --> 00:14:29,670
of course, somehow refer to knowledge
from the application domain.

00:14:29,670 --> 00:14:35,070
They are not described in more
detail in the activity diagram.

00:14:35,070 --> 00:14:36,510
So, they should not logically overlap.

00:14:36,510 --> 00:14:38,640
So it makes sense to have something
like "accepted", "not accepted".

00:14:38,640 --> 00:14:41,760
Because these are
exactly opposite statements,

00:14:41,760 --> 00:14:44,100
so they neither
overlap nor forget anything.

00:14:45,420 --> 00:14:48,180
Of course, at such
a node it should always

00:14:48,180 --> 00:14:52,440
be clearly possible to choose
the next/appropriate exit.

00:14:54,810 --> 00:14:59,070
But that is no
longer part of the activity

00:14:59,070 --> 00:15:04,920
diagram, to elaborate on how
that is somehow determined.

00:15:04,920 --> 00:15:10,200
For example, if there are objects
moving through the activity diagram.

00:15:10,200 --> 00:15:12,930
Object flow, you could imagine
that those are conditions

00:15:12,930 --> 00:15:17,250
that then actually refer to
attributes of those objects.

00:15:17,250 --> 00:15:18,750
Maybe checking some Boolean conditions.

00:15:18,750 --> 00:15:20,880
But we won't do
that in such detail, because

00:15:20,880 --> 00:15:25,470
we are more concerned with the structural
properties of activity diagrams

00:15:25,470 --> 00:15:28,560
and not with now a concrete
binding to a software system.

00:15:28,560 --> 00:15:35,190
In normal Petri nets we do not
specify such conditions, because that

00:15:35,190 --> 00:15:38,220
would be outside the
semantics of Petri nets.

00:15:42,150 --> 00:15:46,830
Okay, and that would still be
relevant if we wanted to consider

00:15:46,830 --> 00:15:52,170
such outflow processes
quantitatively, such control flows.

00:15:52,170 --> 00:15:54,690
So the actions, I had said,
these are activities that

00:15:54,690 --> 00:15:57,690
cost time.
And these control elements,

00:15:57,690 --> 00:16:00,150
so either the distribution nodes
or others we will see shortly,

00:16:00,150 --> 00:16:03,240
of these one assumes that they
simply happen immediately.

00:16:03,240 --> 00:16:06,060
They are just there to somehow
influence the direction

00:16:06,060 --> 00:16:09,030
in which the flow takes place.

00:16:09,030 --> 00:16:13,800
They themselves are not meaningful
actions/activities/verbs

00:16:13,800 --> 00:16:18,390
that somehow require extra time as steps.

00:16:18,390 --> 00:16:22,140
That would be relevant if
one wanted to use such

00:16:22,140 --> 00:16:24,690
an activity diagram to make
quantitative statements.

00:16:24,690 --> 00:16:26,520
But we will not do that either.

00:16:26,520 --> 00:16:31,350
O.k. let's discuss some more elements.

219 # slide
00:16:31,350 --> 00:16:34,650
We had one more element,
which were the merge nodes.

00:16:35,610 --> 00:16:38,190
They were also represented
like this, with this diamond.

00:16:38,190 --> 00:16:43,380
But in contrast to the "decision
nodes", these are nodes where

00:16:43,380 --> 00:16:47,370
different flows come together.

00:16:47,370 --> 00:16:49,140
So here there are
two inputs and one output.

00:16:49,140 --> 00:16:53,760
They bring together alternative
control or object flows.

00:16:53,760 --> 00:16:57,150
In the Petri net these would again simply be
places (that do NOT count as auxiliary places).

00:16:57,150 --> 00:17:03,780
Here it is also the case that if I
have a place and there is an arrow to

00:17:03,780 --> 00:17:06,990
it from two different directions of
transitions, then it can be that in

00:17:06,990 --> 00:17:10,980
this case a token comes from the
left or a token comes from the right.

00:17:10,980 --> 00:17:12,840
In both cases there would be a token here

00:17:12,840 --> 00:17:18,450
afterwards which could be passed on to
the following transitions standing here.

00:17:18,450 --> 00:17:23,760
So this would serve to merge such
a flow, from here or from here,

00:17:23,760 --> 00:17:33,630
for continuation then in
this part of the Petri net.

00:17:33,630 --> 00:17:40,870
O.k. of course in the postcondition
of different transitions,

00:17:41,410 --> 00:17:44,470
if necessary, auxiliary transitions can
be placed on the left and on the right.

00:17:44,470 --> 00:17:49,900
Depending on what happened here in the
activity diagram at these two arrow

00:17:49,900 --> 00:17:57,820
ends or places/positions from which these
arrows go out in the activity diagram.

00:17:57,820 --> 00:18:05,590
O.k. there are not only exactly
branching or merge nodes.

00:18:05,590 --> 00:18:09,520
There is also, so to speak, the common
case, where we have such a diamond, in which

00:18:09,520 --> 00:18:12,055
perhaps, for example, two
inputs and two outputs occur.

00:18:12,055 --> 00:18:13,210
Yes, this is also legal.

00:18:13,210 --> 00:18:16,480
That can also happen, can also occur.

00:18:16,480 --> 00:18:18,670
And also this is translated
simply by a place, which

00:18:18,670 --> 00:18:22,480
then has (perhaps in the
postcondition) several transitions,

00:18:22,480 --> 00:18:26,290
and at the same time also in the
precondition several transitions.

00:18:27,160 --> 00:18:31,960
So, for example, a place where there are arrows
coming in here from the top and from the left.

00:18:31,960 --> 00:18:34,660
And for example arrows going out
to the right and arrows going down.

00:18:35,260 --> 00:18:39,610
So, that also fits with the
elements that exist in Petri nets.

00:18:39,610 --> 00:18:47,440
Okay, what else did we have
in the activity diagram?

00:18:47,440 --> 00:18:54,370
Well we still had these two graphical elements
that I haven't said anything about yet.

00:18:54,370 --> 00:18:57,010
Yes everything else that we see here,
we have now already worked through.

00:18:57,010 --> 00:18:59,950
Yes well, except for the
start and the end as well.

00:18:59,950 --> 00:19:01,960
Those are the things
we still have to describe.

220 # slide
00:19:01,960 --> 00:19:09,910
O.k. first of these comes the
fork or also parallelization node.

00:19:09,910 --> 00:19:16,810
That was exactly the moment/the place/the
position in the activity diagram, where such

00:19:16,810 --> 00:19:21,970
a flow split, in the example,
that I had carried out live.

00:19:21,970 --> 00:19:24,430
Where I had let the tokens
wander through the network.

00:19:24,430 --> 00:19:30,280
So that's a place where a control
flow or an object flow is split

00:19:30,280 --> 00:19:33,490
into several parallel
flows, parallel, concurrent.

00:19:33,490 --> 00:19:36,250
How can you do that?

00:19:36,250 --> 00:19:38,290
What corresponds to that in a Petri net?

00:19:38,290 --> 00:19:42,280
Well a transition with multiple outputs.

00:19:42,280 --> 00:19:47,710
So let's imagine there's
a token coming here.

00:19:47,710 --> 00:19:53,220
And it's supposed to become two
different flows here, then that can be

00:19:53,220 --> 00:19:57,990
realized by a transition that consumes
that one token, but outputs two tokens.

00:19:57,990 --> 00:19:59,010
That would lead to after

00:19:59,010 --> 00:20:03,690
that, whatever other parts are coming
down here, that they can both fire,

00:20:03,690 --> 00:20:08,970
the transitions that occur in here, because
both here and here there is a token.

00:20:08,970 --> 00:20:13,950
So forkings in the activity diagram

00:20:13,950 --> 00:20:19,290
become transitions in the Petri net with
multiple places in the postcondition.

00:20:19,290 --> 00:20:20,790
Of course, these can
also be auxiliary places.

00:20:20,790 --> 00:20:25,380
That depends again on what other
activity diagram parts follow here.

00:20:25,380 --> 00:20:29,550
Maybe there is an action node directly
here, then this would be a transition.

00:20:29,550 --> 00:20:32,070
But we can't fire from a transition
directly to a transition, so then we

00:20:32,070 --> 00:20:35,430
have an auxiliary place here and only
after that comes the transition, which

00:20:35,430 --> 00:20:39,495
corresponds to the action node, which
perhaps occurred here on the left side.

00:20:39,495 --> 00:20:42,690
And the same could happen
here in the right flow.

00:20:42,690 --> 00:20:48,810
Ok, these are again such unnamed
transitions, they don't get a name.

00:20:48,810 --> 00:20:54,105
We can put a fork here, but in the activity
diagram they don't have a name either.

00:20:54,105 --> 00:20:58,320
There the actions have names, which
then become named transitions.

00:20:58,320 --> 00:21:07,470
Okay, and now, as
with the branch and merge

00:21:07,470 --> 00:21:12,420
nodes/branch and join nodes, there is a
counterpart to this element, so to speak.

00:21:12,420 --> 00:21:19,350
So to the forking belongs dually the merge
or synchronization node, where just such

00:21:19,350 --> 00:21:21,870
two flows that have been created
here are brought together again.

221 # slide
00:21:21,870 --> 00:21:31,470
So merges or "join node" that would be where
several parallel flows are brought together.

00:21:31,470 --> 00:21:33,240
What does that mean in the Petri net?

00:21:33,240 --> 00:21:35,640
And in the Petri net, it
means that we have to merge

00:21:35,640 --> 00:21:41,280
again such two tokens that were
created in such a situation.

00:21:41,280 --> 00:21:42,060
And how can we do that?

00:21:42,060 --> 00:21:47,040
Yes with a transition that has two places in the
precondition instead of in the postcondition.

00:21:47,040 --> 00:21:55,830
So this kind of representation in the activity diagram
would correspond to such a situation in a Petri net.

00:21:55,830 --> 00:22:04,290
A transition that consumes and merges
tokens from two separate flows.

00:22:04,290 --> 00:22:06,480
In the sense that
it outputs only one token.

00:22:06,480 --> 00:22:12,330
And here again it can be that these are not
necessarily for example object node places.

00:22:12,330 --> 00:22:16,560
But simply auxiliary places, which are perhaps
necessary, because over here directly an action node in

00:22:16,560 --> 00:22:24,810
the activity diagram stands, which
corresponds to a transition in the Petri net.

00:22:24,810 --> 00:22:26,190
And then there is an auxiliary place that

00:22:26,190 --> 00:22:30,180
mediates from this transition
to this merge transition.

00:22:30,180 --> 00:22:32,730
We will also see this in the example.

00:22:32,730 --> 00:22:34,410
That's exactly where it appears.

00:22:34,410 --> 00:22:40,950
So in our example activity diagram, it was
such that this becomes a transition and

00:22:40,950 --> 00:22:45,060
this also becomes a transition,
because that is how it is with actions and

00:22:45,060 --> 00:22:49,590
synchronization nodes/merge nodes
in activity diagrams.

00:22:49,590 --> 00:22:52,650
Then there must be an auxiliary place in between.

00:22:52,650 --> 00:23:00,660
O.k., and as with the merge and
decision nodes, it can also be

00:23:00,660 --> 00:23:03,000
the case with the merges
and forks that, for example,

00:23:03,000 --> 00:23:06,300
they have both characteristics
at the same time, so to speak.

00:23:06,300 --> 00:23:10,230
So a bar doesn't necessarily have to have
one input, multiple outputs, or vice versa.

00:23:10,770 --> 00:23:16,170
It could also have multiple inputs at the
top and multiple outputs at the bottom.

00:23:16,170 --> 00:23:18,210
That would then also
be represented with a

00:23:18,210 --> 00:23:23,580
bar like that, but often it's
actually exactly a fork or merge.

00:23:23,580 --> 00:23:28,560
So really splitting or merging,
not a mixture of those.

00:23:28,560 --> 00:23:36,600
O.k.

of course a
certain discipline is useful.

00:23:36,600 --> 00:23:41,520
So often it will be the case
that a merge occurs when

00:23:41,520 --> 00:23:43,440
there were also fork nodes before.

00:23:43,440 --> 00:23:48,030
So, in this example, it is no
coincidence that this and this

00:23:48,030 --> 00:23:50,730
bar somehow belong together.

00:23:50,730 --> 00:23:54,900
So this bar consumes
exactly the split flows,

00:23:54,900 --> 00:23:57,090
which have originated here above.

00:23:57,090 --> 00:24:02,580
Somehow a discipline that if
somewhere a splitting takes place,

00:24:02,580 --> 00:24:05,280
afterwards also again
a merging takes place.

00:24:05,280 --> 00:24:10,530
The activity diagrams don't specify
that per se, that it always has to be.

00:24:10,530 --> 00:24:16,860
But in the example, that will often be the case,
that there is such a correspondence of these nodes.

00:24:16,860 --> 00:24:25,650
O.k., and then from the example
activity diagram the special

00:24:25,650 --> 00:24:29,940
nodes for the start and for the end
of the processing are still missing.

222 # slide
00:24:29,940 --> 00:24:31,410
The one for the start.

00:24:31,410 --> 00:24:37,500
That was this filled circle
that had no incoming edge.

00:24:37,500 --> 00:24:38,580
It wasn't allowed that either.

00:24:38,580 --> 00:24:43,470
So this start node is not allowed to have any incoming
edges, but it's allowed to have several outgoing edges.

00:24:43,470 --> 00:24:46,890
And what corresponds to
this in a Petri net?

00:24:46,890 --> 00:24:51,420
Well simply a place,
which is initially marked.

00:24:51,420 --> 00:24:54,060
So a place where a token lies
at the beginning, so that

00:24:54,060 --> 00:24:57,810
a control flow/flow can
come into being at all.

00:24:57,810 --> 00:25:03,120
How many tokens are there?

00:25:03,120 --> 00:25:03,930
How many tokens are there?

00:25:04,440 --> 00:25:07,470
As many as there are outgoing
edges from the start node.

00:25:07,470 --> 00:25:11,445
So it could be that from a start node in
the activity diagram two edges go out.

00:25:11,445 --> 00:25:16,080
For example one to the right and one
downwards, then there should be two tokens in

00:25:16,080 --> 00:25:20,430
the translated Petri net on
this corresponding start place.

00:25:20,430 --> 00:25:23,250
So that one can start the flow
to the right, so to speak.

00:25:23,250 --> 00:25:25,980
So a transition can fire, which
would stand here on the right,

00:25:25,980 --> 00:25:29,010
accordingly any action nodes,
which are located here.

00:25:29,010 --> 00:25:32,370
If there is still a second exit with further
actions here below perhaps, then there

00:25:32,370 --> 00:25:34,740
would have to be just
here the second token, so

00:25:34,740 --> 00:25:40,590
that also the transitions which are
translated and drawn in here below can fire.

00:25:40,590 --> 00:25:46,230
So a place with as many tokens as
arrows going out from the start

00:25:46,230 --> 00:25:49,080
node of the activity diagram.

00:25:49,080 --> 00:25:59,100
O.k., then there is such a rule that
these edges do not lead to object nodes.

00:25:59,100 --> 00:26:05,700
So the intuition is that object nodes are
supposed to, yes, hold some concrete artifacts,

00:26:05,700 --> 00:26:09,270
like the plan earlier, and that must
always be preceded by an action.

00:26:09,270 --> 00:26:14,220
So objects don't just come
into existence out of thin air.

00:26:14,220 --> 00:26:18,300
The idea would be, if we want to have an object,
like in the activity diagram for building a

00:26:18,300 --> 00:26:19,440
house, then we would have a start node.

00:26:19,440 --> 00:26:27,360
That sort of sets an action in motion, and then
from that action, an object can come into being,

00:26:27,360 --> 00:26:29,580
which is put on an object node.

00:26:29,580 --> 00:26:31,620
But direct transitions
from these start nodes

00:26:31,620 --> 00:26:34,890
to object nodes do not exist
according to activity diagrams.

00:26:37,560 --> 00:26:41,550
What is allowed is that there are several
start nodes in an activity diagram.

00:26:42,750 --> 00:26:47,880
Unlike in the flat state diagram, where there
was always one designated start node, in

00:26:47,880 --> 00:26:54,150
the activity diagram there may be
several start nodes represented this way.

00:26:54,150 --> 00:26:56,970
And that fits, because in Petri nets

00:26:56,970 --> 00:27:01,140
we can have multiple places at
the beginning that have tokens.

00:27:01,140 --> 00:27:02,520
And that's what would happen here.

00:27:02,520 --> 00:27:06,870
If we have two start nodes
in the activity diagram, the

00:27:06,870 --> 00:27:11,550
translated Petri net would also have two places,
in which at least one token lies at the beginning.

00:27:11,550 --> 00:27:16,470
And then actions/transitions can fire at the
same time at different places at the beginning.

00:27:16,470 --> 00:27:21,660
O.k., and then there must
be something for the end.

00:27:22,740 --> 00:27:24,540
With a start comes an end.

00:27:24,540 --> 00:27:29,430
In fact, there are two different
forms in the activity diagram.

00:27:29,430 --> 00:27:30,750
Only one of them we had seen so far.

223 # slide
00:27:30,750 --> 00:27:33,840
So in the example this element appeared.

00:27:33,840 --> 00:27:35,850
The so-called activity end.

00:27:35,850 --> 00:27:38,340
That's actually supposed
to, if it's reached,

00:27:38,340 --> 00:27:43,860
by a flow, so to speak, end
the activity completely.

00:27:43,860 --> 00:27:49,380
So all the control and object flows that are still
going on in the activity diagram, so to speak,

00:27:50,280 --> 00:27:55,530
would be terminated immediately when one
of these activity end elements is reached.

00:27:55,530 --> 00:27:58,350
There is no direct equivalent
for this in Petri nets.

00:27:58,350 --> 00:28:01,710
In Petri nets, you can't describe
somewhere "when that place is reached, then

00:28:01,710 --> 00:28:06,690
all of a sudden all tokens in
the entire Petri net disappear".

00:28:12,420 --> 00:28:12,821
In Petri nets everything is always local.

00:28:12,821 --> 00:28:19,050
What rather happens in Petri nets is what
corresponds to the end of flow in activity diagrams.

00:28:19,050 --> 00:28:23,970
Namely, that eats, so to speak, only
the control flow running into it.

00:28:23,970 --> 00:28:30,900
That would correspond to a transition that
only has incoming but no outgoing edges.

00:28:30,900 --> 00:28:34,710
So it eats tokens running into it
and does not output anything else.

00:28:34,710 --> 00:28:38,760
So, it eats only locally the tokens
at this place and not somehow

00:28:38,760 --> 00:28:44,760
all tokens, which are on the way
throughout the whole Petri net.

00:28:44,760 --> 00:28:45,690
Petri net on the way.

00:28:45,690 --> 00:28:50,910
It always depends
on the concrete example,

00:28:50,910 --> 00:28:54,960
if there is a difference
between these two possible ends.

00:28:54,960 --> 00:29:00,570
So in the example what I had here, I had
used though this activity end as a symbol.

00:29:00,570 --> 00:29:02,430
I could also have taken the flow end,

00:29:02,430 --> 00:29:08,460
because here in the example it is anyway
so that only one token is on the way.

00:29:08,460 --> 00:29:10,440
So it is split here times,
but linked again before.

00:29:10,440 --> 00:29:18,420
That means, if somehow a token arrives here at the bottom,
then in the whole remaining Petri net, activity diagram/Petri

00:29:18,420 --> 00:29:22,230
net, there can't be another
token on the way somewhere.

00:29:22,230 --> 00:29:24,930
So this is anyway the only
token which is still on the

00:29:24,930 --> 00:29:32,580
way here and if this is eaten,
the processing as a whole is over.

00:29:32,580 --> 00:29:35,370
In more complicated situations,

00:29:35,370 --> 00:29:40,260
where there were more start nodes and
therefore more tokens are on the way,

00:29:40,260 --> 00:29:44,571
it could make a difference if I
have this activity end or flow end.

00:29:44,571 --> 00:29:48,870
But we'll be careful in tasks that you
get that that doesn't fall on your feet.

00:29:48,870 --> 00:29:53,190
And somehow the
difference causes you problems.

00:29:55,170 --> 00:29:56,670
So in examples that we're going to

00:29:56,670 --> 00:30:01,950
look at, it's always uniquely
convertible how you describe the end.

00:30:01,950 --> 00:30:09,030
Outgoing edges are not allowed from
either the activity end or the

00:30:09,030 --> 00:30:11,820
flow end, because they're
supposed to be just positions

00:30:11,820 --> 00:30:14,820
where a flow ends and doesn't
somehow go a little bit further.

00:30:14,820 --> 00:30:20,940
O.k., how we implement this,

00:30:20,940 --> 00:30:25,830
we can see directly in the example Petri
net, for the house building example.

00:30:25,830 --> 00:30:32,310
So that was our
house building activity diagram.

00:30:32,310 --> 00:30:36,450
And we have now actually seen in
principle for all elements occurring in

00:30:36,450 --> 00:30:42,690
it, how they can be translated into Petri net
components, except for this somewhat spongy end.

00:30:42,690 --> 00:30:46,380
There I had only indicated grade,
that will be as a rule somehow.

00:30:46,380 --> 00:30:50,400
Either a place, where a token lands,
but then it doesn't go on from there.

00:30:50,400 --> 00:30:53,910
Or a transition that eats a token
and doesn't output anything.

00:30:53,910 --> 00:30:59,040
And actually we can do what I had
done on the intermediate slides

00:30:59,040 --> 00:31:03,390
now for individual excerpts/individual
parts of the activity diagram.

00:31:03,390 --> 00:31:09,780
Tinker together overall and then get
a Petri net, which describes the

00:31:09,780 --> 00:31:14,250
same context/behavior as should be
represented by this activity diagram.

00:31:14,250 --> 00:31:19,230
That would essentially just
be tinkering together the

00:31:19,230 --> 00:31:23,430
components that we've seen now for
individual excerpts throughout the slides.

224 # slide
00:31:23,430 --> 00:31:29,100
And when we do that,
it creates this Petri net.

00:31:30,360 --> 00:31:34,680
That already has a very similar
shape to the activity diagram.

00:31:34,680 --> 00:31:37,710
And in fact, you can now assign
here the individual components

00:31:38,400 --> 00:31:45,210
of the activity diagram each corresponding
places and transitions in the Petri net.

00:31:45,210 --> 00:31:48,180
Yes, this is here the beginning of
the start nodes: a place with a token.

00:31:48,180 --> 00:31:55,110
Then we see here the individual transitions,
which correspond to the actions here.

00:31:55,110 --> 00:31:58,920
We see, about the place we had also
motivated that we need an auxiliary

00:31:58,920 --> 00:32:03,510
place in between because we can't go directly
from action to action/transition to transition.

00:32:03,510 --> 00:32:08,890
So that then corresponds to that auxiliary
place and also the other parts here are all

00:32:08,890 --> 00:32:15,640
motivated by how we wanted to translate
individual activity diagram elements.

00:32:15,640 --> 00:32:17,950
So this became a
place, this became a place,

00:32:19,480 --> 00:32:24,700
this became a transition with two
outgoing arrows to action nodes.

00:32:24,700 --> 00:32:27,610
Since these are transitions, there
can't be a direct connection there.

00:32:27,610 --> 00:32:32,710
Instead, there has to be an auxiliary place
introduced and that's what we're seeing here.

00:32:32,710 --> 00:32:34,630
So that would correspond
to the fork node.

00:32:34,630 --> 00:32:37,240
That corresponds to
these two transitions

00:32:37,240 --> 00:32:40,570
corresponding to the two actions
in these two concurrent paths.

00:32:40,570 --> 00:32:43,060
And then in between there has
to be just an auxiliary place.

00:32:43,060 --> 00:32:47,620
And so there's a clear way
to get from the activity

00:32:47,620 --> 00:32:50,740
diagram that we've seen to a Petri net.

00:32:50,740 --> 00:32:55,030
And we see also the end I have implemented
here, in which simply the last action,

00:32:55,030 --> 00:33:00,220
this transition, is
such a swallowing transition,

00:33:00,220 --> 00:33:10,760
which corresponds to the fact that after
finishing the house, nothing more happens.

00:33:10,760 --> 00:33:13,610
This end of flow here, this end of
activity, I have simply implemented

00:33:13,610 --> 00:33:19,520
by the fact that the transition, which I have
introduced for this, has no more output for this action.

00:33:19,520 --> 00:33:24,650
This is then just shown here.

00:33:24,650 --> 00:33:31,606
O.k., most of the places here
are really auxiliary places.

00:33:31,606 --> 00:33:33,500
You see here the
named elements are elements that

00:33:33,500 --> 00:33:35,270
also appeared in the activity diagram.

00:33:35,270 --> 00:33:38,000
Especially this place, which
corresponds to an object node.

00:33:38,000 --> 00:33:40,550
Most of the other places are

00:33:40,550 --> 00:33:43,850
auxiliary places introduced to
make this a legal Petri net.

00:33:43,850 --> 00:33:48,050
There is only one auxiliary
transition in this particular case.

00:33:48,050 --> 00:33:53,840
That is this one, which was necessary so that
I can get from this place to that place.

00:33:53,840 --> 00:33:59,000
Which corresponded in
the activity diagram

00:33:59,000 --> 00:34:02,840
to these two elements, where
there is nothing else in between.

00:34:02,840 --> 00:34:06,380
But I am not allowed to go from place
to place directly in the Petri net.

00:34:06,380 --> 00:34:15,820
O.k., and actually all that we
intuitively saw in the activity

00:34:15,820 --> 00:34:23,020
diagram at possible step sequences, that would
be exactly all valid transition sequences,

00:34:23,020 --> 00:34:26,800
which represent valid firing
in this Petri net.

00:34:26,800 --> 00:34:29,740
Insofar as this Petri net
models exactly the same thing

00:34:29,740 --> 00:34:32,350
as the activity
diagram we originally saw.

00:34:32,350 --> 00:34:36,760
And this is a general recipe of how to
get Petri nets from activity diagrams.

00:34:36,760 --> 00:34:41,410
As long as only elements we
discussed occur, of course.

00:34:41,410 --> 00:34:47,350
O.k., in fact there are many more
representation possibilities in activity

00:34:47,350 --> 00:34:50,710
diagrams, and we won't
introduce all of them.

00:34:50,710 --> 00:34:52,900
I'll touch on and mention a few now.

00:34:52,900 --> 00:35:00,220
But for those, I will not always give
a full translation in Petri nets.

00:35:00,220 --> 00:35:05,920
Of course, in exercises or exams
you must only be able to translate

00:35:05,920 --> 00:35:09,430
activity diagrams into Petri nets for
which we have actually discussed this.

00:35:09,430 --> 00:35:13,030
So for the elements that occur in
it, for which I had slides here.

00:35:13,030 --> 00:35:16,150
But what would
be some additional expressions?

225 # slide
00:35:16,150 --> 00:35:21,730
Well, in activity diagrams in UML, on the one
hand, there are further borrowings from Petri nets,

00:35:21,730 --> 00:35:25,570
and on the other hand, there are simply
own syntax/own representation options.

00:35:25,570 --> 00:35:31,360
For example, at object nodes, you can specify the
maximum number of objects that can be located there.

00:35:31,360 --> 00:35:35,020
And this is of course something that
corresponds to the capacity in Petri nets.

00:35:35,020 --> 00:35:40,510
Yes, this notation 6 here in a Petri
net with capacity also corresponds

00:35:40,510 --> 00:35:44,170
to the information that there can
never be more than six tokens.

00:35:44,170 --> 00:35:45,880
And this would be
represented in the activity

00:35:45,880 --> 00:35:49,360
diagram in such a way that one
indicates an upper bound here.

00:35:49,360 --> 00:35:53,770
O.k., so a quantitative
statement at an object node.

00:35:53,770 --> 00:35:59,620
There are also quantitative statements at the
transitions; there can be a weight at it.

00:35:59,620 --> 00:36:04,420
And this corresponds exactly to the
weight concept also in a Petri net.

00:36:04,420 --> 00:36:08,380
Yes, so "upperBound" would
say here, there can

00:36:08,380 --> 00:36:14,020
be a maximum of six dishes at the
same time here as a reservoir.

00:36:14,020 --> 00:36:18,400
And the weight would say there are always
two dishes served at the same time.

00:36:18,400 --> 00:36:20,470
In the Petri net:

00:36:20,470 --> 00:36:21,970
This place has capacity 6.

00:36:21,970 --> 00:36:25,720
And this link/the
connection has weight two.

00:36:28,120 --> 00:36:30,280
This did not occur
in the example considered so

00:36:30,280 --> 00:36:37,540
far, but can be applied to
concepts from Petri nets as well.

00:36:37,540 --> 00:36:40,570
Especially if we consider
Petri nets with capacity.

00:36:40,570 --> 00:36:48,250
O.k., what activity diagrams allow,
which we didn't have in Petri nets.

00:36:48,250 --> 00:36:51,340
Was that even in such situations, where

00:36:51,340 --> 00:36:56,140
here, for example, several tokens are
deposited and then taken out one by one, yes,

00:36:56,140 --> 00:37:00,250
you can describe in what
order that happens to the.

00:37:00,250 --> 00:37:02,350
This makes no sense with Petri nets.

00:37:02,350 --> 00:37:04,450
If there are six tokens

00:37:04,450 --> 00:37:08,740
here, then I don't care which of
the six tokens will be served next.

00:37:08,740 --> 00:37:14,770
On the other hand, in a restaurant
application, where six dishes are put

00:37:14,770 --> 00:37:17,470
here one after the other and
are also finished, it might

00:37:17,470 --> 00:37:19,660
be important which of these
six dishes are served next.

00:37:19,660 --> 00:37:24,640
Namely, if possible, the ones that have been standing
the longest, so that they don't get even colder.

00:37:24,640 --> 00:37:27,400
Yes, so you can specify an
order of objects, so to speak.

00:37:27,400 --> 00:37:30,460
But we won't look at that any further.

00:37:30,460 --> 00:37:32,020
You should just know that it's possible.

00:37:32,020 --> 00:37:37,420
And I found that to know that it's possible,
but we're not going to consider that further.

00:37:37,420 --> 00:37:41,110
Because we didn't do it at all on
the Petri net side either, and it

00:37:41,110 --> 00:37:44,710
wouldn't make much sense there because, after all,
the individual tokens are not distinguishable at all.

00:37:44,710 --> 00:37:50,740
Unlike concrete objects in a concrete
software modeling context, perhaps.

226 # slide
00:37:50,740 --> 00:37:53,890
O.k.

so the point here is:

00:37:53,890 --> 00:37:56,500
This correspondence, it's
not completely exact.

00:37:56,500 --> 00:38:00,250
Yes, not for all concepts from activity
diagrams is there a direct translation.

00:38:00,250 --> 00:38:01,600
And of course, it's also because

00:38:01,600 --> 00:38:04,210
activity diagrams are
so semi-formal anyway.

00:38:04,210 --> 00:38:07,780
So not all aspects are fully
specified in it at all.

00:38:07,780 --> 00:38:14,995
In the same sense as Petri nets were
completely mathematically modeled.

00:38:14,995 --> 00:38:19,990
But for large parts of activity diagrams
you can do a translation as well.

00:38:19,990 --> 00:38:25,690
And we will only deal with those
in the tasks.

227 # slide
00:38:25,690 --> 00:38:30,920
O.k., what else do we have?

00:38:30,920 --> 00:38:31,880
Activity areas.

00:38:31,880 --> 00:38:41,630
These are simply a representation, so to speak,
which does not occur in Petri nets either.

00:38:41,630 --> 00:38:45,710
In Petri nets, there are simply places,
transitions, and connections in between.

00:38:45,710 --> 00:38:47,780
In activity diagrams, one

00:38:47,780 --> 00:38:51,620
structures the diagrams even
further, under certain circumstances.

00:38:51,620 --> 00:38:53,000
One groups elements.

00:38:53,000 --> 00:38:56,540
For example, here you could imagine
if we have this restaurant example.

00:38:56,540 --> 00:38:58,640
Then there could be
two areas of responsibility,

00:38:58,640 --> 00:39:02,330
so to speak, or perhaps a spatial
distribution: the kitchen and the guest room.

00:39:02,330 --> 00:39:04,730
And then, for example, there
are actions here that are

00:39:04,730 --> 00:39:07,880
just carried out by the guest and actions
that are carried out by the waiter.

00:39:07,880 --> 00:39:13,130
And then one can use this representation with
such a decomposition of the plane into several

00:39:13,130 --> 00:39:18,380
areas, to which then these elements are
assigned to express these responsibilities.

00:39:18,380 --> 00:39:22,220
So the actions that take place
here are exactly "order dish",

00:39:22,220 --> 00:39:25,100
"take order", "serve dish", "eat dish".

00:39:25,100 --> 00:39:29,810
This representation does not change
anything, but it makes it clearer for the

00:39:29,810 --> 00:39:34,730
reader of this diagram, which action
is conceptually carried out by whom.

00:39:36,920 --> 00:39:39,080
And there are several
possibilities how this can be.

00:39:39,080 --> 00:39:40,280
It could also go back and forth.

00:39:40,280 --> 00:39:45,080
There is also the possibility
to create object nodes on this

00:39:45,080 --> 00:39:49,820
border, where the intuition is that
there is a transfer, so to speak.

00:39:49,820 --> 00:39:51,980
From one area to the other.

00:39:51,980 --> 00:39:54,830
But this does not appear
in the example here, and

00:39:54,830 --> 00:39:57,860
it certainly does not appear in
our house construction example.

00:39:57,860 --> 00:40:00,107
We didn't have that
kind of structuring there.

00:40:00,107 --> 00:40:07,790
So it's more of a documentation of
who is responsible for what action.

00:40:07,790 --> 00:40:11,750
It doesn't change the order of
firing or what firing actions

00:40:11,750 --> 00:40:13,970
are possible, what sequences
of actions are possible.

00:40:13,970 --> 00:40:18,230
It has little effect on the semantics,
so to speak, of the activity diagram or

00:40:18,230 --> 00:40:21,560
the firing sequences in
a translated Petri net.

228 # slide
00:40:21,560 --> 00:40:30,140
O.k., and then there are various other

00:40:30,140 --> 00:40:32,750
elements that we don't even discuss
here, that I don't even show you.

00:40:32,750 --> 00:40:36,980
You could just read
up on them from literature.

00:40:36,980 --> 00:40:40,520
You don't have to for this lecture,
because we don't look at those things.

00:40:40,520 --> 00:40:45,680
There are various other elements,
each with its own representation,

00:40:45,680 --> 00:40:49,910
that did not and will
not appear in our examples.

00:40:49,910 --> 00:40:56,660
That's just as a bullet point again, that
you realize that UML activity diagrams have

00:40:56,660 --> 00:41:01,460
even more richness of variation
than we've already seen here.

00:41:01,460 --> 00:41:06,020
And in any case, more than Petri nets, where
there were only places and transitions.
