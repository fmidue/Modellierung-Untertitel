92 # slide
00:00:00,000 --> 00:00:07,500
In addition to inheritance (i.e., the
kind of generalization/specialization

00:00:07,500 --> 00:00:13,770
we've looked at so far), there are other,
further relationships between classes in UML.

00:00:13,770 --> 00:00:19,650
Ultimately, these are then relationships
that are also reflected at the object level.

00:00:20,160 --> 00:00:25,620
We will look at the following
three types of relationships here.

00:00:25,620 --> 00:00:32,550
These are by no means all
that are present in UML.

00:00:32,550 --> 00:00:36,270
So there's still dependency,
usage relationships, genericity,

00:00:36,270 --> 00:00:37,710
parameterization.

00:00:37,710 --> 00:00:41,040
But those are the three
that we're going to look at.

00:00:41,040 --> 00:00:46,890
While inheritance is explicitly seen
only in class diagrams (while in

00:00:46,890 --> 00:00:52,920
the object diagram inheritance no
longer exists as a drawn connection

00:00:52,920 --> 00:00:56,910
somehow), association, aggregation,
composition will actually be explicitly

00:00:56,910 --> 00:01:03,420
represented in both class diagrams
and associated object diagrams.

00:01:03,420 --> 00:01:14,850
These three types of relationships are
different in strength, so to speak.

00:01:14,850 --> 00:01:21,780
So ultimately, association is the weakest
form of these three types of connections.

00:01:21,780 --> 00:01:25,680
Aggregation is in a certain
sense a special association.

00:01:25,680 --> 00:01:28,290
And composition, as the
strongest kind of relationship

00:01:28,290 --> 00:01:32,580
here, is again a more special aggregation.

00:01:32,580 --> 00:01:38,970
That's why it makes sense that we look at
these three types of relationships in order.

00:01:38,970 --> 00:01:41,850
And in fact, in this video,
I'm just going to talk

00:01:41,850 --> 00:01:48,090
about association and related
modeling aspects for now.

00:01:48,090 --> 00:01:53,010
In particular, also about annotations that you can
still add to diagrams when you have associations.

00:01:54,360 --> 00:01:59,250
And later, in a separate video, we will
talk about aggregation and composition.

00:01:59,250 --> 00:02:07,770
Where some of the aspects of association
continue to occur, but more are added.

00:02:10,320 --> 00:02:12,900
So we'll start with the weakest
relationship, association.

00:02:13,620 --> 00:02:16,500
It's actually so weak that
it's very broadly defined.

00:02:16,500 --> 00:02:19,230
So you talk about an
association between two classes.

00:02:19,230 --> 00:02:23,970
It's always about two classes:
abstractly now class A, class B.

00:02:23,970 --> 00:02:29,010
And they are associated (or: there is
an association between them) if there is

00:02:29,010 --> 00:02:33,630
somehow a semantic connection between these
classes, which one can name meaningfully.

00:02:33,630 --> 00:02:35,280
So if you can't think of a

00:02:35,280 --> 00:02:37,740
meaningful name, then there's no
content relation between these classes.

00:02:37,740 --> 00:02:42,120
And this relation, this
connection, is not hierarchical.

00:02:42,120 --> 00:02:46,710
So first of all, a rather vague
concept, as it is written here.

00:02:47,700 --> 00:02:54,360
This "not hierarchical" aspect is relevant,
because if anything is hierarchical,

00:02:54,360 --> 00:02:58,170
then it is most likely either an
inheritance (so hierarchical in the

00:02:58,170 --> 00:03:03,510
sense of belonging; in the sense
of specialization/generalization;

00:03:03,510 --> 00:03:06,780
belonging of objects of one
class also to the other class),

00:03:10,230 --> 00:03:14,580
or it will be aggregation or composition
(in the sense of hierarchical

00:03:14,580 --> 00:03:20,040
part-whole relationships, but as I
said, this will concern us later).

00:03:20,040 --> 00:03:22,470
So ultimately:

00:03:22,470 --> 00:03:27,630
Association, still very general, simply
expresses that objects of one class (perhaps A)

00:03:27,630 --> 00:03:32,340
need a connection to certain
objects of the other class

00:03:32,340 --> 00:03:38,670
for their functionality (at least for
some part of what they exist for).

00:03:38,670 --> 00:03:46,320
So A objects are supposed to do
something that B objects are also

00:03:46,320 --> 00:03:48,420
useful for, or perhaps can
be called upon to help with.

00:03:51,930 --> 00:03:59,370
And if that is sufficiently important for the
relationship, the connection to exist, that it

00:03:59,370 --> 00:04:04,170
should be stored persistently (i.e., not
fleetingly relevant only briefly in the

00:04:04,170 --> 00:04:09,870
course of the system, but
actually a persistent/permanently

00:04:09,870 --> 00:04:13,320
stored connection should exist
between these objects), then

00:04:13,320 --> 00:04:15,480
it makes sense to
express that by an association.

00:04:15,480 --> 00:04:18,900
And actually in an implementation of an

00:04:18,900 --> 00:04:25,830
object-oriented system, such a
connection would be made by the

00:04:25,830 --> 00:04:34,110
fact that for example objects of the one
class refer to objects of the other class.

00:04:34,110 --> 00:04:38,820
So usually by one of the
classes having an attribute

00:04:38,820 --> 00:04:42,420
whose type is the other class.

00:04:43,800 --> 00:04:46,500
Then objects of the
other class can be accessed.

00:04:46,500 --> 00:04:56,340
Suppose there is an attribute in class A
whose type is class B, then yes, in every

00:04:56,340 --> 00:05:02,250
object of class A there is
something stored that refers to a B.

00:05:02,250 --> 00:05:05,760
However, it will be the case (that's
why this is emphasized again)

00:05:05,760 --> 00:05:10,260
that this special type of attributes will just
then no longer be entered into the classes.

00:05:10,260 --> 00:05:14,220
Because you have another graphical
means for the associations, which is

00:05:14,220 --> 00:05:18,630
more memorable than always
writing attributes in there.

00:05:18,630 --> 00:05:21,780
We will not
enter these so-called reference

00:05:22,410 --> 00:05:25,488
attributes explicitly in
the class diagram.

00:05:25,488 --> 00:05:28,140
Instead, we will have
a graphical means, simply

00:05:28,140 --> 00:05:34,410
an edge in the graph, which
is representative for it:

00:05:34,410 --> 00:05:41,400
That's this kind of relationship that
you can implement through attributes.

00:05:41,400 --> 00:05:44,340
How is that meant?

00:05:44,340 --> 00:05:48,240
So instead of A and B, let's
do something more concrete.

00:05:48,960 --> 00:05:51,090
Let one class be a class of people.

00:05:51,090 --> 00:05:53,610
Let the other class be a class of cars.

00:05:53,610 --> 00:05:57,150
And people can own cars.

00:05:57,150 --> 00:06:04,620
And instead of entering "mycar"
in the attribute list for "person"

00:06:04,620 --> 00:06:07,290
(as attribute, which then
has "car" as type),

00:06:07,290 --> 00:06:13,500
you simply insert a graphical
connection between these two classes.

00:06:13,500 --> 00:06:17,310
And then assign a meaningful name,
namely: it is about property.

00:06:17,310 --> 00:06:19,830
So a person owns a car, for example.

00:06:19,830 --> 00:06:25,020
Whereby here is not yet somehow specified

00:06:25,020 --> 00:06:29,940
that each person has exactly one car
or always only one person owns a car.

00:06:29,940 --> 00:06:34,070
As the relationship stands here,
it is deliberately not to be

00:06:34,070 --> 00:06:38,210
excluded that a person can also
have several cars or own no car.

00:06:38,210 --> 00:06:41,705
Or that a car can be owned
by several persons together.

00:06:41,705 --> 00:06:46,580
The point here is only that this kind of
relationship between people and cars exists at all.

00:06:49,190 --> 00:06:51,980
For that to happen, at least one side would
have to have a reference to the other.

00:06:51,980 --> 00:06:56,180
For example, in the implementation, as
already indicated, there could be an attribute

00:06:56,180 --> 00:06:59,900
at Person that stores a
car or even several cars.

00:06:59,900 --> 00:07:04,190
But one does not enter this, but
uses this kind of representation to

00:07:04,190 --> 00:07:06,530
make the connection clear.

00:07:08,810 --> 00:07:14,810
Because of this fact that here it is
not required that each car belongs to

00:07:14,810 --> 00:07:17,750
only one person (each person owns exactly
one car), different expressions of this

00:07:17,750 --> 00:07:22,550
relation are quite conceivable on
the level of concrete objects.

00:07:22,550 --> 00:07:27,740
So it could be that there are exactly
three persons and three cars and exactly

00:07:27,740 --> 00:07:31,670
person 1 is related to car 1, person
2 to car 2, person 3 to car 3.

00:07:31,670 --> 00:07:34,130
That would be possible,
but it is not obligatory.

00:07:34,130 --> 00:07:39,830
It could also be, for example, that
there are these three persons, but:

00:07:39,830 --> 00:07:46,040
Person 1 owns both car 1 and car 2,
and person 2 does not own any cars

00:07:46,040 --> 00:07:52,460
at all and therefore does not appear in
this listing here, and person 3 owns car 3.

00:07:52,460 --> 00:07:53,450
That would be conceivable.

00:07:53,450 --> 00:07:56,390
Or here is another constellation:

00:07:56,390 --> 00:08:03,200
Person 1 owns cars 1 and 2, person 2 owns
car 2, and person 3 may not exist at all.

00:08:03,200 --> 00:08:07,310
Or there are still quite a few persons,
but they do not own any other cars.

00:08:12,440 --> 00:08:16,910
What is not covered here,
however, and also not wanted:

00:08:17,570 --> 00:08:23,780
For example, person 1
owns car 1 multiple times.

00:08:23,780 --> 00:08:27,470
Person 1 can own several cars, but
it makes no sense to write down here:

00:08:27,470 --> 00:08:31,220
Person 1, Car 1, and
then again Person 1, Car 1.

00:08:31,220 --> 00:08:34,070
Why is that?

00:08:34,700 --> 00:08:41,840
Because these are sets,
related to your math lecture.

00:08:41,840 --> 00:08:43,160
Or in the case of the Komedia students:

00:08:43,160 --> 00:08:48,530
Referring to my math lecture from
last semester, these are relations.

00:08:48,530 --> 00:08:55,160
Sets of pairs, or subsets of the
cross product of the set of all

00:08:55,160 --> 00:08:58,250
people and the set of all cars (which are
reasonable interpretations of these classes).

00:08:58,250 --> 00:09:00,380
Then these are relations here.

00:09:00,380 --> 00:09:03,815
That is, one asks:

00:09:03,815 --> 00:09:05,150
Does person 1 own car 1?

00:09:05,150 --> 00:09:05,540
Yes or no?

00:09:05,540 --> 00:09:06,440
And not:

00:09:06,440 --> 00:09:09,350
Person 1 owns car 1, and
person 1 owns car 1 again.

00:09:09,350 --> 00:09:11,930
That's why the set
representation makes sense here.

00:09:15,530 --> 00:09:18,800
By the way, what I actually
wanted to say in the last example:

00:09:20,030 --> 00:09:26,420
The point here was exactly that this is an
example where car 2 is owned by two people.

00:09:26,420 --> 00:09:28,610
That was the point
in the last example here,

00:09:28,610 --> 00:09:34,760
because there's no data here that
would restrict that in any way.

00:09:34,760 --> 00:09:37,550
That can also be restricted,
we will also see shortly.

00:09:37,550 --> 00:09:42,710
Then you would add numbers to
the ends of this association.

00:09:42,710 --> 00:09:45,680
But in this case, there
is no further restriction.

00:09:45,680 --> 00:09:49,820
Therefore, all these three and
many more forms are conceivable.

00:09:54,260 --> 00:09:57,070
Now I had said:

00:09:57,070 --> 00:09:58,150
Person owns car.

00:09:58,150 --> 00:10:03,280
That seems to fit by chance,
because when I read it that way,

00:10:03,280 --> 00:10:06,550
"Person owns car", it corresponds
exactly to a German sentence.

00:10:06,550 --> 00:10:08,050
That is, of course, coincidental.

00:10:08,050 --> 00:10:11,920
I could also have accidentally drawn the

00:10:11,920 --> 00:10:15,910
two classes exactly reversed
in my graph / in my diagram.

00:10:15,910 --> 00:10:17,380
That's why it can be

00:10:17,380 --> 00:10:26,050
important to actually specify a direction
for the name of this association.

00:10:26,050 --> 00:10:28,090
So who actually owns who here?

00:10:28,090 --> 00:10:38,770
This can be done by this black triangular
arrow at the name of the association.

00:10:38,770 --> 00:10:41,350
So that is to be
seen as the reading direction:

00:10:41,350 --> 00:10:43,150
"person owns car".

00:10:43,150 --> 00:10:47,860
If I wanted cars to own people,
I could still draw it that way,

00:10:47,860 --> 00:10:54,520
but would just have this triangular
arrow pointing here (towards the person).

00:10:56,200 --> 00:10:58,630
This is simply a reading
direction of the association.

00:10:59,530 --> 00:11:02,980
Besides that, there is the
so-called navigation direction.

00:11:02,980 --> 00:11:08,950
This is expressed by an arrow, and this very
special kind of arrow (clearly distinguishable

00:11:08,950 --> 00:11:19,030
from the inheritance arrow), added
directly to the association line.

00:11:19,030 --> 00:11:22,960
This expresses the navigation direction.

00:11:22,960 --> 00:11:27,160
And this describes objects
of which class must

00:11:27,160 --> 00:11:33,940
know their association partners and
therefore can call their methods.

00:11:33,940 --> 00:11:38,110
This means for example:

00:11:38,110 --> 00:11:39,160
In the example earlier I said it

00:11:39,160 --> 00:11:45,670
could be that Person has an
attribute where a car is stored.

00:11:45,670 --> 00:11:49,150
Then the person can access the car.

00:11:49,150 --> 00:11:53,050
Then that would correspond
to that navigation direction.

00:11:53,050 --> 00:11:55,750
So for example, the
person knows their cars

00:11:56,320 --> 00:11:58,810
because they have them
stored in an attribute.

00:11:58,810 --> 00:12:06,930
If that would be as specified here, it would mean
the other way around (because there is no arrow

00:12:06,930 --> 00:12:12,480
specified here in the other direction) that
the cars themselves do not know their owners.

00:12:12,480 --> 00:12:15,660
So if modeled as here, it

00:12:15,660 --> 00:12:21,210
would mean that there is no attribute
with type Person in the car.

00:12:21,210 --> 00:12:27,930
In a sense, these navigation
directions are a hint

00:12:27,930 --> 00:12:29,430
or an anticipation
of the implementation.

00:12:29,430 --> 00:12:33,810
There may also be no navigation
direction specified at all.

00:12:33,810 --> 00:12:37,080
Then it is usually assumed that this
is either simply not important in the

00:12:37,080 --> 00:12:44,190
current modeling state, or that the
association is navigable in both directions.

00:12:50,340 --> 00:12:55,170
In the example as it is given here, the
idea would be, as just said, that it

00:12:55,170 --> 00:13:00,750
is the Person objects that have references
to Car (Auto) objects, and not vice versa.

00:13:00,750 --> 00:13:08,400
Since it should still be allowed that a
person can own several cars, it is of

00:13:08,400 --> 00:13:11,700
course not enough to
store exactly one car here.

00:13:11,700 --> 00:13:15,150
For each person, a set
of cars owned by that

00:13:15,150 --> 00:13:17,250
person would have to be stored.

00:13:18,630 --> 00:13:23,730
For example it could be that for person
1 the set \{ car 1, car 2 \} is stored,

00:13:23,730 --> 00:13:27,420
for person 2 the empty set, and
for person 3 the set \{ car 3 \}.

00:13:27,420 --> 00:13:35,310
That would then correspond to this
second mapping, this relation.

00:13:35,310 --> 00:13:38,040
If we don't store this
as pairs, but for each

00:13:38,040 --> 00:13:41,010
person simply store the
set of corresponding cars.

00:13:41,010 --> 00:13:44,460
Person 1: car 1 and car 2.

00:13:44,460 --> 00:13:46,110
Person 2 has no cars.

00:13:46,110 --> 00:13:47,460
And person 3 has car 3.

00:13:47,460 --> 00:13:55,500
We would then store that in the three
concrete person objects respectively.

00:14:01,750 --> 00:14:06,070
In principle, the reading direction and
the navigation direction can differ.

00:14:06,070 --> 00:14:11,740
So we model the person-owns-car
relationship, but still we don't

00:14:11,740 --> 00:14:16,120
store cars with the person, but vice
versa, store the persons with the cars.

00:14:16,120 --> 00:14:21,190
This is somewhat unusual, and in
fact one would probably assume

00:14:21,190 --> 00:14:22,570
that we have not modeled well here.

00:14:22,570 --> 00:14:26,560
So if reading
direction and navigation direction

00:14:26,560 --> 00:14:31,360
are different, then maybe this
relationship is just misnamed.

00:14:31,360 --> 00:14:38,410
If it really is the cars that remember which persons
they belong to, then instead of "owns" it should

00:14:38,410 --> 00:14:42,490
say "belongs to" here, and the reading
direction should be in the other direction.

00:14:42,490 --> 00:14:46,030
"Car belongs to person"
instead of "person owns car".

00:14:46,030 --> 00:15:01,660
Conversely, if you just have the association
navigable in both directions, then the reading

00:15:01,660 --> 00:15:08,740
direction is relevant mainly for
understanding, for the intention of the model.

00:15:08,740 --> 00:15:12,550
While the implementation doesn't
care, because each person remembers

00:15:12,550 --> 00:15:17,410
the cars anyway and the cars also
remember which person they belong to.

00:15:17,410 --> 00:15:22,240
Then one decided to call this association
nevertheless "owns" and not "belongs".

00:15:22,240 --> 00:15:28,630
And then one indicates just by this arrow, in
which direction here the possession is present.

00:15:28,630 --> 00:15:37,780
If no navigation directions
are given at all, it's

00:15:37,780 --> 00:15:41,170
either that maybe it's not important
at the time you're modeling.

00:15:41,170 --> 00:15:42,580
Or there are conventions.

00:15:42,580 --> 00:15:48,070
For example, people on the team (the team that
is modeling together) have agreed and specified:

00:15:48,070 --> 00:15:52,630
If no navigation directions are drawn,
then both should always be present.

00:15:52,630 --> 00:15:56,920
I'm not going to
define that further here.

00:16:04,400 --> 00:16:08,840
Those were these different kinds of
arrows that you can have in associations.

00:16:08,840 --> 00:16:14,060
Then I mentioned earlier that you can
also have numbers at the associations.

00:16:14,060 --> 00:16:17,240
These are the so-called multiplicities.

00:16:17,240 --> 00:16:22,700
And they are intervals in the
general case, so somehow two numbers.

00:16:22,700 --> 00:16:24,800
As "from"/"to" this is to be read.

00:16:24,800 --> 00:16:27,740
There is also the special case
that there is only one number.

00:16:27,740 --> 00:16:30,500
Then from this number
to this number is meant.

00:16:30,500 --> 00:16:35,510
So it is not a real interval, but only
exactly one number, which comes into question.

00:16:36,950 --> 00:16:40,550
It could look like this (let's forget
the navigation directions again,

00:16:40,550 --> 00:16:42,080
they should not be relevant right now):

00:16:42,080 --> 00:16:44,240
We have the association,
we have a name, we

00:16:44,240 --> 00:16:48,410
have a reading direction, and we have
multiplicities here in each case.

00:16:48,410 --> 00:16:49,610
How is this to be read?

00:16:50,840 --> 00:16:58,220
As follows. This specification
at this end means:

00:16:58,220 --> 00:17:01,190
Each person has 0 to 5 cars.

00:17:01,190 --> 00:17:08,000
So there are between 0 and 5 cars
associated with every single person.

00:17:08,000 --> 00:17:11,300
And the 1 at this end means:

00:17:11,300 --> 00:17:14,840
Each car belongs to exactly one person.

00:17:14,840 --> 00:17:19,250
So you have to remember which
way around this is meant.

00:17:19,250 --> 00:17:20,540
The 1 does not mean:

00:17:20,540 --> 00:17:21,950
Every person has a car.

00:17:21,950 --> 00:17:24,830
But each car belongs to one person.

00:17:24,830 --> 00:17:28,850
And each person owns up to five cars.

00:17:28,850 --> 00:17:40,040
That means, here you can also see, that if the persons
should have an attribute with type car, this would

00:17:40,040 --> 00:17:45,050
have to be a quantity attribute (because
up to five cars have to be stored).

00:17:45,050 --> 00:17:49,490
So now in programming language:

00:17:49,490 --> 00:17:52,700
Depending on what you have already heard
in lectures and listen to in parallel,

00:17:53,240 --> 00:17:56,630
you may have learned about lists,
sets, arrays as collections.

00:17:56,630 --> 00:18:01,850
So here, one such collection would
have to be stored for each person

00:18:01,850 --> 00:18:04,850
in order to be able
to remember up to five cars.

00:18:04,850 --> 00:18:10,940
Conversely, if this association were to
be navigable in the other direction,

00:18:10,940 --> 00:18:13,340
each car would need
to remember only one person.

00:18:13,340 --> 00:18:19,580
So you wouldn't need a collection in that
direction, but you would need one in that direction.

00:18:29,410 --> 00:18:30,880
Now you could play around a bit.

00:18:30,880 --> 00:18:34,660
You could make a 1 into a 2, for example.

00:18:34,660 --> 00:18:35,680
What does that mean here?

00:18:35,680 --> 00:18:37,750
You have to visualize it again:

00:18:37,750 --> 00:18:38,680
What does it mean?

00:18:38,680 --> 00:18:43,930
It doesn't mean that two people always
own up to five cars exactly together.

00:18:43,930 --> 00:18:46,030
That is not how it is to be read.

00:18:46,030 --> 00:18:48,295
What is to be read is:

00:18:48,295 --> 00:18:54,880
Each person owns up to five cars, and
each car is owned by exactly two people.

00:18:54,880 --> 00:19:00,340
But it need not always be the same consistent
pairs of people for different cars.

00:19:00,340 --> 00:19:09,700
So it would be quite possible
that person 1 owns cars 1 and 2,

00:19:09,700 --> 00:19:21,280
person 2 also owns car 1, but car
2 has as second owner a person 3.

00:19:22,060 --> 00:19:22,780
Then the following applies here:

00:19:22,780 --> 00:19:25,750
Each person has up to five cars.

00:19:25,750 --> 00:19:27,190
Person 1 has two cars.

00:19:27,190 --> 00:19:28,300
Person 2 has one car.

00:19:28,300 --> 00:19:29,770
Person 3 has one car.

00:19:29,770 --> 00:19:33,460
And each car belongs
to exactly two persons.

00:19:33,460 --> 00:19:34,083
Car 1 belongs to person 1 and person 2.

00:19:34,083 --> 00:19:39,610
Car 2 belongs to person 1 and person 3.

00:19:39,610 --> 00:19:43,960
But no car belongs to
exactly the same two people.

00:19:43,960 --> 00:19:49,150
Again, you just have to read it this way:

00:19:49,150 --> 00:19:51,250
Each person has up to five cars.

00:19:51,250 --> 00:19:53,470
Each car belongs to exactly two people.

00:19:53,470 --> 00:20:00,520
But this can be mixed, so to speak, as to
who the owners of any two different cars are.

00:20:00,520 --> 00:20:05,980
It would also be conceivable that there
are other people, but no other cars.

00:20:05,980 --> 00:20:08,500
Because each person must
own up to five cars,

00:20:09,670 --> 00:20:12,160
but that can also be zero
cars for a given person.

00:20:12,790 --> 00:20:15,280
What is not possible here,
of course, is that there are

00:20:15,280 --> 00:20:17,020
more cars but no more people.

00:20:17,830 --> 00:20:21,610
Each additional car would have
to have at least two owners.

00:20:21,610 --> 00:20:27,220
So it would be possible that
there are cars 3, 4 and

00:20:27,220 --> 00:20:32,050
5, which all belong, for example, to person 1.

00:20:32,050 --> 00:20:35,020
But then they would also have
to be named in this set.

00:20:40,430 --> 00:20:45,080
Generally there will be
such intervals at both ends.

00:20:45,080 --> 00:20:55,520
So abstractly for names of classes A and B and respectively
their interval m to n, k to l, this would mean

00:20:55,520 --> 00:21:08,090
that between m and n instances of A can
be associated with an instance of B.

00:21:08,090 --> 00:21:13,010
So I take an instance of class
B; then it can have i, between m

00:21:13,010 --> 00:21:17,240
and n, A-instances as partners.

00:21:17,240 --> 00:21:21,290
And vice versa, if you
have an instance of A,

00:21:21,290 --> 00:21:27,950
then there must be j instances of B associated
with it, where j must lie between k and l.

00:21:27,950 --> 00:21:32,930
The examples just now were
simply manifestations of this.

00:21:32,930 --> 00:21:40,100
If you don't want to have an upper bound here
(i.e., you don't want to say "from m to n",

00:21:40,100 --> 00:21:44,660
but always just "at least m"), then
you can write an asterisk for it.

00:21:44,660 --> 00:21:46,700
This stands for "infinite".

00:21:46,700 --> 00:21:49,760
So if you want to
say "there must be at least

00:21:49,760 --> 00:21:55,160
two, but there can be any
number", you write "2 to star".

00:21:55,160 --> 00:21:59,840
Conversely, if one would have wanted to say,
"at most two", one would have written: "0..2".

00:21:59,840 --> 00:22:02,780
The lower bound is, of course, zero and for

00:22:02,780 --> 00:22:07,100
the upper bound one inserts a
star as a sign for "infinite".

00:22:10,040 --> 00:22:11,450
What if there is nothing at all?

00:22:12,260 --> 00:22:14,960
We also had the case, before we
introduced multiplicities, that

00:22:14,960 --> 00:22:16,070
there is nothing at all.

00:22:16,070 --> 00:22:19,640
Then it is again a matter of convention.

00:22:19,640 --> 00:22:23,480
UML itself does not specify
a standard multiplicity.

00:22:23,480 --> 00:22:28,280
In some books it says, agreed
as standard multiplicity, 1.

00:22:28,280 --> 00:22:30,020
But UML itself does not specify one.

00:22:30,020 --> 00:22:35,150
For diagrams in the lecture,
in the exercise, also

00:22:35,150 --> 00:22:42,170
in the exam, it will be the case that
if there is no specification, the

00:22:42,170 --> 00:22:48,350
multiplicity "0..*" is taken as the
default, so simply no restriction at all.

00:22:48,350 --> 00:22:52,050
Anything from zero to any
number could be possible.

00:22:52,050 --> 00:22:59,910
This is true for associations, partly also for
aggregation, but not anymore for composition.

00:22:59,910 --> 00:23:02,760
We'll get to that later.

00:23:02,760 --> 00:23:03,300
So basically:

00:23:03,300 --> 00:23:05,790
Association and Aggregation
use this convention.

00:23:05,790 --> 00:23:15,450
Composition uses a different convention, which
we'll talk about in the corresponding video.

00:23:15,450 --> 00:23:24,540
Before that, one more way of
representing associations.

00:23:24,540 --> 00:23:34,680
Sometimes, instead of giving the connecting line
a name (like the "owns" just now), you give the

00:23:35,670 --> 00:23:39,450
two ends of the
connecting line a name instead.

00:23:39,450 --> 00:23:46,830
This is useful when, for example,
there are clearly distributed roles

00:23:46,830 --> 00:23:51,660
taken by the two
ends of such an association.

00:23:51,660 --> 00:23:59,640
Then it may be unnecessary to
name the association itself.

00:23:59,640 --> 00:24:04,620
In the case of "owns", the two roles could
have been named "owner" and "property".

00:24:04,620 --> 00:24:08,040
Then there would have been no need to say
that the relationship is one of possession.

00:24:08,040 --> 00:24:09,412
Or here's another example:

00:24:09,412 --> 00:24:15,810
There are wholesalers, there are individual
retailers, and there are end customers.

00:24:16,920 --> 00:24:18,957
In each case, relationships in
between, that is, associations.

00:24:18,957 --> 00:24:21,720
In each of these
associations, there is a part

00:24:21,720 --> 00:24:25,290
that has a seller role, and
a part that has a buyer role.

00:24:25,290 --> 00:24:30,810
Between wholesaler and retailer, the wholesaler
is the seller and the retailer is the buyer.

00:24:30,810 --> 00:24:36,150
Whereas between retailer and end customer, the retailer
is the seller and the end customer is the buyer.

00:24:36,150 --> 00:24:39,150
So the retailer
participates in two associations

00:24:39,150 --> 00:24:43,590
with different partners
in different roles.

00:24:43,590 --> 00:24:51,380
And then just the association is not
named anymore, because the two roles,

00:24:51,380 --> 00:24:56,510
which are at the ends, already convey
enough information about this association.

00:25:00,890 --> 00:25:03,230
So much for associations.
