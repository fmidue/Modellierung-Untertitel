103 # slide
00:00:00,000 --> 00:00:06,960
The next relationship between
classes is the so-called aggregation.

00:00:06,960 --> 00:00:12,390
This is a relationship that is
somewhat stronger than association.

00:00:12,390 --> 00:00:15,180
The interpretation is as written here:

00:00:15,180 --> 00:00:20,160
We say there is aggregation between
classes A and B if instances

00:00:20,160 --> 00:00:28,050
of class A contain instances of
class B as parts in some way.

00:00:28,050 --> 00:00:28,770
So in the sense:

00:00:28,770 --> 00:00:32,010
There is a whole
that contains multiple parts.

00:00:32,010 --> 00:00:37,080
That is first of all a semantic
interpretation, special roles.

00:00:37,080 --> 00:00:40,560
Otherwise, it would still
be like an association.

00:00:40,560 --> 00:00:43,650
Some relation between A and
B, where references exist.

00:00:43,650 --> 00:00:46,410
That could also stand
for whole and parts.

00:00:46,410 --> 00:00:52,590
Basically, aggregation is a notation
special case of associations.

00:00:52,590 --> 00:00:54,120
Otherwise it has the same features.

00:00:54,120 --> 00:00:56,700
So there are names of
association and aggregation.

00:00:56,700 --> 00:01:01,320
There is a reading direction, navigation
directions, multiplicities, roles at the ends.

00:01:01,320 --> 00:01:04,620
So a lot of things are still
similar to associations.

00:01:04,620 --> 00:01:11,820
It is not somehow forbidden
here, especially by the fact of

00:01:11,820 --> 00:01:16,890
an aggregation, that a part belongs
to several or maybe to no whole.

00:01:18,540 --> 00:01:21,510
A possible example would
be songs and playlists.

00:01:21,510 --> 00:01:28,740
So let's say A would be a class of
playlists and B would be a class of songs.

00:01:28,740 --> 00:01:33,420
Of course playlists
contain songs as parts.

00:01:33,420 --> 00:01:37,620
But that doesn't mean that a song can
only belong to exactly one playlist.

00:01:37,620 --> 00:01:40,680
So being contained is not so strict

00:01:40,680 --> 00:01:49,680
that a song, for example, can only
exist as part of exactly one playlist.

00:01:49,680 --> 00:01:54,510
Nevertheless, there is aggregation, so
songs are aggregated to a playlist.

00:01:57,480 --> 00:02:01,005
Explicit naming of the
aggregation is often superfluous.

00:02:01,005 --> 00:02:05,910
I had said you can name an
aggregation just like you would for

00:02:05,910 --> 00:02:09,450
an association and draw
it in the class diagram.

00:02:09,450 --> 00:02:14,620
Often this is not necessary, because
from the fact that it is an aggregation,

00:02:14,620 --> 00:02:16,240
the nature of
the relationship already follows.

00:02:16,240 --> 00:02:22,210
So the relationship might end up being
called "contains" as a name anyway.

00:02:22,210 --> 00:02:24,670
Instead of "possesses", one
would perhaps write: "contains".

00:02:25,390 --> 00:02:29,260
But this is already clear from the
graphical form of the representation,

00:02:29,260 --> 00:02:34,540
because aggregations are painted
differently from associations.

00:02:34,540 --> 00:02:36,250
Namely as follows.

00:02:37,360 --> 00:02:42,010
There is a connection as
with the associations also.

00:02:42,010 --> 00:02:48,130
But at one end, and specifically at the
end of the whole (that is, what takes the

00:02:48,130 --> 00:02:55,930
role of the whole in the aggregation),
there is this unfilled diamond drawn.

00:02:57,340 --> 00:02:58,390
An example would be:

00:02:58,390 --> 00:03:01,030
A parking lot contains several cars.

00:03:01,030 --> 00:03:02,620
Here it says "contains" as a name.

00:03:02,620 --> 00:03:05,440
But you could probably save that.

00:03:05,440 --> 00:03:09,280
Because by this graphical
form it is already expressed

00:03:09,280 --> 00:03:12,760
what kind of relation is present
here, namely an aggregation.

00:03:12,760 --> 00:03:15,730
And also the reading direction is
not absolutely necessary there.

00:03:15,730 --> 00:03:18,820
Because by the end, where
the diamond is attached,

00:03:18,820 --> 00:03:21,370
it is also expressed,
who contains whom here.

00:03:21,370 --> 00:03:22,840
So here:

00:03:22,840 --> 00:03:26,110
A parking lot contains
any number of cars.

00:03:26,110 --> 00:03:29,470
A car can stand on a parking lot, or not.

00:03:31,630 --> 00:03:35,080
So a car does not exist only as
long as it stands on a parking lot.

00:03:35,080 --> 00:03:37,570
A car can also exist and
stand on no parking place.

00:03:41,120 --> 00:03:44,450
The role of the whole here takes
over, as said, the parking lot.

00:03:44,450 --> 00:03:50,000
The role of the part, in this part-whole
relationship, takes over the car.

00:03:50,000 --> 00:03:55,760
By this "0..1"
multiplicity is expressed that

00:03:55,760 --> 00:03:59,870
a car at least never
stands in two parking spaces.

00:03:59,870 --> 00:04:05,420
While again this multiplicity
actually should not be given.

00:04:05,420 --> 00:04:10,400
Since this is our default multiplicity
anyway, if nothing is written on it.

00:04:10,400 --> 00:04:11,750
I could have left this out.

00:04:11,750 --> 00:04:15,260
And then because of something I said
in an earlier video, it would still

00:04:15,260 --> 00:04:18,020
be clear for the scope of the lecture

00:04:18,020 --> 00:04:23,120
that there is no restriction on the
number of cars in a parking lot.

00:04:23,120 --> 00:04:26,420
What else could be done?

00:04:26,420 --> 00:04:28,640
One could still
specify the navigation direction.

00:04:28,640 --> 00:04:30,680
One could still draw a navigation

00:04:30,680 --> 00:04:34,760
direction arrow here at this end to say:

00:04:34,760 --> 00:04:39,560
From the parking lot, you can
access the cars that are on it.

00:04:39,560 --> 00:04:45,380
A navigation arrow in the opposite
direction would not be possible.

00:04:45,380 --> 00:04:46,850
For one thing, there
would be a graphic conflict.

00:04:46,850 --> 00:04:49,640
One could not draw this arrow at all.

00:04:50,180 --> 00:04:52,880
On the other hand, the
understanding of aggregation is

00:04:52,880 --> 00:04:56,180
that a part knows
to which whole it belongs.

00:04:56,180 --> 00:04:59,780
So it is somehow assumed

00:04:59,780 --> 00:05:04,670
that one can determine from the
car also the parking space containing it.

00:05:08,960 --> 00:05:11,450
This is an example with "0..1".

00:05:11,450 --> 00:05:14,270
One might well
have other multiplicities here.

00:05:15,020 --> 00:05:15,710
But not for parking spaces.

00:05:15,710 --> 00:05:17,780
It makes no sense that a car is
parked on two parking spaces.

00:05:17,780 --> 00:05:24,320
But let's assume that instead of "parking space" there
would be "vehicle fleet" or "car dealer catalog".

00:05:24,320 --> 00:05:29,180
Then, of course, a car can be
contained in a car fleet, or in

00:05:29,180 --> 00:05:32,390
a car dealer catalog,
and certainly in several.

00:05:32,390 --> 00:05:38,480
So an aggregation does not require
that a maximum of 1 is possible.

00:05:38,480 --> 00:05:40,370
Different from the composition.

00:05:40,370 --> 00:05:41,870
That's why I mention this.

00:05:43,890 --> 00:05:47,280
In terms of structural constraints:

00:05:47,280 --> 00:05:48,270
How is it now, if we have a class

00:05:48,780 --> 00:05:51,705
diagram with several classes and
in between several aggregations?

00:05:51,705 --> 00:05:53,220
Maybe there are some
structural constraints there.

00:05:53,220 --> 00:05:56,010
That's where the
situation is like associations.

00:05:56,010 --> 00:05:58,050
So it's not forbidden to have cycles.

00:05:58,050 --> 00:05:59,910
It's not forbidden
to have self-references.

00:05:59,910 --> 00:06:05,430
It's not forbidden to have multiple
aggregations, or aggregations and associations

00:06:05,430 --> 00:06:08,130
mixed, between the same partners.

00:06:08,130 --> 00:06:09,420
It's different from inheritance.

00:06:13,680 --> 00:06:14,640
That was aggregation.

00:06:14,640 --> 00:06:15,630
Now what about composition?

00:06:15,630 --> 00:06:20,070
That was introduced, or briefly mentioned before,
as the strongest of the relationships considered.

00:06:20,070 --> 00:06:22,380
So association,
aggregation, and composition.

00:06:24,120 --> 00:06:25,050
What is the understanding here?

00:06:25,050 --> 00:06:28,110
A composition, again between
two classes A and B,

00:06:28,110 --> 00:06:31,380
also expresses such
a part-whole relationship.

00:06:31,380 --> 00:06:36,540
So instances of class A contain
instances of class B as parts.

00:06:38,280 --> 00:06:43,920
But in addition to what aggregation already
interprets, here it is required that

00:06:43,920 --> 00:06:47,040
the lifetime of the parts
be controlled by the whole.

00:06:47,040 --> 00:06:51,030
In the sense that the parts
cannot exist without the whole.

00:06:51,660 --> 00:06:54,390
This is not the case
with parking lot and car.

00:06:54,390 --> 00:06:57,630
Certainly a parking lot contains cars.

00:06:57,630 --> 00:07:00,990
But that doesn't mean that if the
parking lot is closed or ceases to exist,

00:07:00,990 --> 00:07:02,700
therefore all the cars are destroyed.

00:07:02,700 --> 00:07:07,020
With composition, you tend to have this
understanding that the parts are really so

00:07:07,020 --> 00:07:10,470
integral to the whole that they
don't exist at all without the whole.

00:07:10,470 --> 00:07:13,890
Parts don't have their
own lifetime, so to speak.

00:07:13,890 --> 00:07:18,060
That basically means for implementation:

00:07:18,060 --> 00:07:22,800
Parts may (or even must) be deleted as
soon as their associated instance of

00:07:22,800 --> 00:07:28,650
class A, that is, the object of class A of
which they are considered a part, is deleted.

00:07:28,650 --> 00:07:36,870
And because of this
consideration a part may not

00:07:36,870 --> 00:07:39,180
belong to more than one
whole at the same time.

00:07:39,180 --> 00:07:43,860
Because then its lifetime would not
be linked to an instance of class A.

00:07:43,860 --> 00:07:51,750
So the example with "one song belongs to
several playlists" would not be a composition.

00:07:51,750 --> 00:07:55,970
Because the songs don't cease to
exist when a playlist is deleted.

00:07:55,970 --> 00:07:58,460
And one song can also belong
to multiple playlists.

00:07:58,460 --> 00:08:02,570
And then deleting a playlist
has no effect on the song.

00:08:02,570 --> 00:08:04,760
It is still contained in other playlists.

00:08:05,300 --> 00:08:08,060
Playlists-and-songs would not be an
example of composition for this reason.

00:08:08,780 --> 00:08:14,390
Naming composition is often
superfluous, similar to aggregation.

00:08:14,390 --> 00:08:19,910
Because from the graphical representation, the
character as composition is already obvious.

00:08:19,910 --> 00:08:23,420
What we already see when we compare
this with aggregation is that

00:08:23,420 --> 00:08:25,040
maybe the decision

00:08:25,040 --> 00:08:28,100
whether to take an aggregation or a
composition is sometimes not very easy.

00:08:28,100 --> 00:08:30,560
There is definitely room for

00:08:30,560 --> 00:08:33,530
interpretation, which also depends on
what one wants to express when modeling.

00:08:34,190 --> 00:08:37,700
So it may be
that sometimes it makes sense

00:08:37,700 --> 00:08:40,640
to use both aggregation and composition.

00:08:40,640 --> 00:08:42,560
Then you have to choose one or the other.

00:08:42,560 --> 00:08:44,030
In some cases it is also clear.

00:08:44,030 --> 00:08:50,900
Later on, we will see a few
criteria listed as mnemonics.

00:08:50,900 --> 00:08:58,250
These are basically the same as
the two criteria that are used here

00:08:58,250 --> 00:09:01,640
to decide whether something is really a
composition and not just an aggregation.

00:09:03,500 --> 00:09:06,290
But first, let's take a look at
the graphical representation.

00:09:06,290 --> 00:09:10,700
So for a composition, you take a similar
representation as for aggregation.

00:09:10,700 --> 00:09:13,820
But now this diamond is filled in.

00:09:14,330 --> 00:09:18,050
That's the difference between aggregation and
composition, how this diamond looks here.

00:09:18,050 --> 00:09:19,280
Example:

00:09:19,280 --> 00:09:22,430
A company consists of
any number of departments.

00:09:23,120 --> 00:09:26,330
"Consists of" is the composition here.

00:09:26,330 --> 00:09:28,160
The company is the whole.

00:09:28,160 --> 00:09:29,540
The departments are the parts.

00:09:29,540 --> 00:09:31,820
There can be any number of them.

00:09:33,740 --> 00:09:36,800
The interpretation here is that the
departments just cease to exist as

00:09:36,800 --> 00:09:38,240
soon as the company ceases to exist.

00:09:38,240 --> 00:09:43,580
If the company is dissolved, then
these departments are also dissolved.

00:09:43,580 --> 00:09:46,490
And a department cannot belong
to several companies at the same

00:09:46,490 --> 00:09:51,560
time (just like a song can belong to
several playlists at the same time).

00:09:51,560 --> 00:09:53,780
That makes no
sense in this constellation.

00:09:53,780 --> 00:09:56,570
Therefore composition and
not only aggregation.

00:09:58,740 --> 00:10:00,900
Regarding navigation arrows,
the same applies as before:

00:10:00,900 --> 00:10:03,960
You could still draw a navigation
arrow here in this direction.

00:10:03,960 --> 00:10:07,920
In the opposite direction it is not
necessary and also not possible,

00:10:07,920 --> 00:10:13,050
because that would
give a graphic conflict.

00:10:13,050 --> 00:10:18,390
And since one assumes anyway that the parts
know in each case what their whole is.

00:10:18,390 --> 00:10:25,470
Here one could again write a
multiplicity.

00:10:25,470 --> 00:10:30,360
However, with composition, the
choice is actually very limited.

00:10:30,360 --> 00:10:34,260
There can be only
the multiplicity "0..1" or "1".

00:10:34,260 --> 00:10:36,120
All other multiplicities are not

00:10:36,120 --> 00:10:41,340
allowed for compositions at
the end of the whole.

00:10:41,340 --> 00:10:47,130
The most common multiplicity
would be exactly 1.

00:10:47,130 --> 00:10:49,920
In this case it is
usually not written at all.

00:10:50,820 --> 00:10:51,750
This is then the situation:

00:10:51,750 --> 00:10:54,030
A part belongs to exactly one whole,

00:10:54,030 --> 00:10:58,680
and this is always like that, and cannot
belong temporarily, for example, to no whole.

00:10:58,680 --> 00:11:03,570
We will discuss another
case of compositions, where

00:11:03,570 --> 00:11:07,110
"0..1" also makes
sense, at least temporarily.

00:11:07,110 --> 00:11:14,110
So also these would be
criteria, which can be used

00:11:14,110 --> 00:11:16,330
to distinguish between
aggregation and composition.

00:11:16,330 --> 00:11:18,670
If you can imagine a
multiplicity of more than 1

00:11:18,670 --> 00:11:23,050
at this end, then it is not a
composition, but an aggregation.

00:11:29,350 --> 00:11:38,680
Moreover, it should be noted
that this requirement (to

00:11:38,680 --> 00:11:44,770
belong to at most one whole) is stronger
than just the multiplicities indicate.

00:11:44,770 --> 00:11:58,060
So a part could
potentially, at least at the

00:11:58,060 --> 00:11:59,050
class level, be in compositional
relation to multiple wholes.

00:11:59,050 --> 00:12:06,010
There could be two classes to which a class
is in compositional relation as a part.

00:12:06,010 --> 00:12:12,010
Then it would not matter
what is at the ends here.

00:12:12,010 --> 00:12:19,030
Even if "0..1" stands there in each case, it must
nevertheless not be the case that the part belongs at the

00:12:19,030 --> 00:12:24,820
same time to a whole of the one
class and a whole of the other class.

00:12:24,820 --> 00:12:29,350
You really have to be careful what
this "belongs to exactly" (or in

00:12:29,350 --> 00:12:32,770
the case of 0..1, "to
at most one whole") means.

00:12:32,770 --> 00:12:35,140
But we will also discuss that.

00:12:38,980 --> 00:12:42,730
First I would like to quote the
promised mnemonic sentences.

00:12:42,730 --> 00:12:55,270
They are from one of the books I had
shown you in the review of literature.

00:12:55,270 --> 00:12:59,560
This English-language book
on object-oriented design.

00:12:59,560 --> 00:13:08,140
These are ultimately the things in English,
that I have also expressed on the slides.

00:13:08,140 --> 00:13:12,280
So kind of an association as this
vaguest form of relationship.

00:13:12,280 --> 00:13:19,390
Which kind of represents when
anything needs to be stored as

00:13:19,390 --> 00:13:22,900
data and there needs to be a relationship
between objects of two classes.

00:13:22,900 --> 00:13:29,200
Examples would be:

00:13:30,280 --> 00:13:31,420
Ownership.

00:13:31,420 --> 00:13:35,710
Control of objects of one class
over objects of another class.

00:13:36,490 --> 00:13:37,420
General relationships.

00:13:37,420 --> 00:13:40,480
"Being a part of something" can also be
an association, but is more likely to

00:13:40,480 --> 00:13:43,120
be captured as an aggregation right away.

00:13:43,120 --> 00:13:45,820
Being a member of something.

00:13:47,380 --> 00:13:53,620
Some associations also lent themselves to
the library class example that came up

00:13:53,620 --> 00:13:59,710
last week or the week before,
such as borrowing books.

00:13:59,710 --> 00:14:02,500
When shouldn't you use associations?

00:14:03,010 --> 00:14:07,330
For one thing, when it comes to
relationships that correspond to a hierarchy.

00:14:07,330 --> 00:14:08,560
I mentioned that at the beginning, too.

00:14:08,560 --> 00:14:13,780
Then you would either have inheritance
hierarchies or rather aggregation/composition.

00:14:13,780 --> 00:14:21,100
And it has to be somehow a
relationship that is persistent.

00:14:21,100 --> 00:14:24,220
That is, that is not only very
temporarily necessary when executing

00:14:24,220 --> 00:14:27,670
maybe exactly one
operation or one method.

00:14:27,670 --> 00:14:33,670
In that case, it would simply be possible to pass
the target object as a parameter to the method.

00:14:33,670 --> 00:14:38,710
An association would be made
if it is a relationship that

00:14:38,710 --> 00:14:42,460
survives the execution
of a single operation.

00:14:42,460 --> 00:14:50,590
So anything that should be stored
permanently for the objects.

00:14:50,590 --> 00:14:51,460
What was aggregation?

00:14:51,460 --> 00:14:56,050
A special kind of association
where it's about somehow objects of

00:14:56,050 --> 00:15:01,480
class A being composed
of objects of class B.

00:15:01,480 --> 00:15:09,692
If somehow there is a part-whole relationship
between the objects of classes A and B.

00:15:09,692 --> 00:15:11,290
That was aggregation.

00:15:11,290 --> 00:15:13,270
Composition was even stronger.

00:15:14,410 --> 00:15:23,320
There is the requirement that each
instance of this part class can belong to

00:15:23,320 --> 00:15:29,590
only one instance of the whole
class and cannot exist without it.

00:15:30,280 --> 00:15:34,660
The part can only exist
as part of the whole.

00:15:34,660 --> 00:15:44,650
These were the criteria I had also discussed
on the previous slides, just summarized

00:15:44,650 --> 00:15:49,930
here again in a compact way.
