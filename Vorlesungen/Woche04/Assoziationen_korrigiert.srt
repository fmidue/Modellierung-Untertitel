92 # slide
00:00:00,000 --> 00:00:07,500
Neben Vererbung (also der Art
Generalisierung/Spezialisierung, die wir

00:00:07,500 --> 00:00:13,770
bisher betrachtet haben) gibt es noch andere,
weitere Beziehungen zwischen Klassen in UML.

00:00:13,770 --> 00:00:19,650
Letztlich sind das dann Beziehungen, die
sich auch auf Objektebene widerspiegeln

00:00:20,160 --> 00:00:25,620
Wir werden hier folgende drei
Arten von Beziehungen betrachten.

00:00:25,620 --> 00:00:32,550
Das sind bei weitem nicht alle,
die in UML vorhanden sind.

00:00:32,550 --> 00:00:36,270
Also es gibt noch Abhängigkeit,
Nutzungsbeziehungen, Generizität,

00:00:36,270 --> 00:00:37,710
Parametrisierung.

00:00:37,710 --> 00:00:41,040
Aber das sind die drei, die wir betrachten werden.

00:00:41,040 --> 00:00:46,890
Während Vererbung explizit nur in
Klassendiagrammen zu sehen ist (während

00:00:46,890 --> 00:00:52,920
im Objektdiagramm die Vererbung nicht mehr als
eingezeichnete Verbindung irgendwie existiert),

00:00:52,920 --> 00:00:56,910
werden Assoziation, Aggregation,
Komposition tatsächlich sowohl in

00:00:56,910 --> 00:01:03,420
Klassendiagrammen als auch in zugehörigen
Objektdiagrammen explizit dargestellt sein.

00:01:03,420 --> 00:01:14,850
Diese drei Arten von Beziehungen sind
dabei sozusagen verschieden stark.

00:01:14,850 --> 00:01:21,780
Also letztlich ist Assoziation die schwächste
Form von diesen drei Arten von Verbindungen.

00:01:21,780 --> 00:01:25,680
Aggregation ist in gewissem
Sinne eine spezielle Assoziation.

00:01:25,680 --> 00:01:28,290
Und Komposition als hier stärkste Art der

00:01:28,290 --> 00:01:32,580
Beziehung ist nochmal eine
speziellere Aggregation.

00:01:32,580 --> 00:01:38,970
Deswegen ist es sinnvoll, dass wir uns diese drei
Arten von Beziehungen der Reihe nach anschauen.

00:01:38,970 --> 00:01:41,850
Und tatsächlich werde ich in
diesem Video zunächst nur über

00:01:41,850 --> 00:01:48,090
Assoziation und damit in Verbindung
stehende Modellierungsaspekte reden.

00:01:48,090 --> 00:01:53,010
Insbesondere auch über Annotationen, die man in
Diagramme bei Assoziationen noch einfügen kann.

00:01:54,360 --> 00:01:59,250
Und später, in einem separaten Video, wird
es um Aggregation und Komposition gehen.

00:01:59,250 --> 00:02:07,770
Wo einige der Aspekte von Assoziation weiterhin
auftreten, aber noch weitere hinzukommen.

00:02:10,320 --> 00:02:12,900
Also beginnen wir mit der schwächsten
Beziehung, der Assoziation.

00:02:13,620 --> 00:02:16,500
Die ist tatsächlich so schwach, dass
sie sehr allgemein definiert ist.

00:02:16,500 --> 00:02:19,230
Also man spricht von einer
Assoziation zwischen zwei Klassen.

00:02:19,230 --> 00:02:23,970
Es geht immer um zwei Klassen:
abstrakt jetzt mal Klasse A, Klasse B.

00:02:23,970 --> 00:02:29,010
Und die sind assoziiert (oder: es gibt eine
Assoziation dazwischen), wenn es irgendwie

00:02:29,010 --> 00:02:33,630
einen semantischen Zusammenhang zwischen diesen
Klassen gibt, den man sinnvoll benennen kann.

00:02:33,630 --> 00:02:35,280
Also wenn einem kein sinnvoller Name einfällt,

00:02:35,280 --> 00:02:37,740
dann gibt es auch keinen inhaltlichen
Bezug zwischen diesen Klassen.

00:02:37,740 --> 00:02:42,120
Und dieser Bezug, dieser
Zusammenhang, sei nicht hierarchisch.

00:02:42,120 --> 00:02:46,710
Also erst mal ein recht vages
Konzept, so wie es hier steht.

00:02:47,700 --> 00:02:54,360
Dieser "nicht hierarchisch" Aspekt ist
relevant, denn wenn irgendwas hierarchisch ist,

00:02:54,360 --> 00:02:58,170
dann ist es mit großer Wahrscheinlichkeit
entweder eine Vererbung (also hierarchisch

00:02:58,170 --> 00:03:03,510
im Sinne von Zugehörigkeit; im Sinne
von Spezialisierung/Generalisierung;

00:03:03,510 --> 00:03:06,780
Zugehörigkeit von Objekten der einen
Klasse auch zu der anderen Klasse),

00:03:10,230 --> 00:03:14,580
oder es wird sich um Aggregation
oder Komposition handeln (im Sinne

00:03:14,580 --> 00:03:20,040
hierarchischer Teil-Ganzes-Beziehungen, was uns
aber wie gesagt erst später beschäftigen wird).

00:03:20,040 --> 00:03:22,470
Also letztlich:

00:03:22,470 --> 00:03:27,630
Assoziation, noch sehr allgemein, drückt
einfach aus, dass Objekte der einen Klasse

00:03:27,630 --> 00:03:32,340
(vielleicht A) für ihre Funktionalität
(zumindest für einen Teil dessen,

00:03:32,340 --> 00:03:38,670
wofür sie existieren) eine Verbindung zu
bestimmten Objekten der anderen Klasse brauchen.

00:03:38,670 --> 00:03:46,320
Also A-Objekte sollen irgendetwas
tun, wozu B-Objekte auch nützlich

00:03:46,320 --> 00:03:48,420
sind oder vielleicht zur Hilfe
herangezogen werden können.

00:03:51,930 --> 00:03:59,370
Und wenn das für die Beziehung, die Verbindung,
die da existieren soll, hinreichend wichtig ist,

00:03:59,370 --> 00:04:04,170
dass diese persistent abgespeichert werden
soll (also nicht flüchtig nur kurz im

00:04:04,170 --> 00:04:09,870
Verlauf des Systems relevant, sondern
tatsächlich eine persistent/dauerhaft

00:04:09,870 --> 00:04:13,320
abzuspeichernde Verbindung zwischen
diesen Objekten existieren soll),

00:04:13,320 --> 00:04:15,480
dann ist es sinnvoll, das durch
eine Assoziation auszudrücken.

00:04:15,480 --> 00:04:18,900
Und tatsächlich würde in einer Implementierung

00:04:18,900 --> 00:04:25,830
eines objektorientierten Systems so
eine Verbindung dadurch hergestellt,

00:04:25,830 --> 00:04:34,110
dass zum Beispiel Objekte der einen Klasse
auf Objekte der anderen Klasse verweisen.

00:04:34,110 --> 00:04:38,820
Also üblicherweise dadurch, dass
eine der Klassen ein Attribut hat,

00:04:38,820 --> 00:04:42,420
dessen Typ die andere Klasse ist.

00:04:43,800 --> 00:04:46,500
Dann kann man auf Objekte
der anderen Klasse zugreifen.

00:04:46,500 --> 00:04:56,340
Nehmen wir an, es gibt in Klasse A ein
Attribut, dessen Typ die Klasse B ist,

00:04:56,340 --> 00:05:02,250
dann ist ja in jedem Objekt der Klasse A
etwas abgespeichert, das auf ein B verweist.

00:05:02,250 --> 00:05:05,760
Allerdings wird es so sein (deswegen ist
das nochmal sehr stark hervorgehoben),

00:05:05,760 --> 00:05:10,260
dass man diese spezielle Art der Attribute eben
dann nicht mehr in die Klassen eintragen wird.

00:05:10,260 --> 00:05:14,220
Weil man für die Assoziationen
ein anderes grafisches Mittel hat,

00:05:14,220 --> 00:05:18,630
was einprägsamer ist, als da
immer Attribute reinzuschreiben.

00:05:18,630 --> 00:05:21,780
Wir werden eben nicht diese sogenannten

00:05:22,410 --> 00:05:25,488
Referenzattribute explizit in
das Klassendiagramm eintragen.

00:05:25,488 --> 00:05:28,140
Sondern wir werden gleich
ein grafisches Mittel haben,

00:05:28,140 --> 00:05:34,410
einfach eine Kante im Graphen,
die stellvertretend dafür steht:

00:05:34,410 --> 00:05:41,400
Das ist diese Art Beziehung, die man
durch Attribute implementieren kann.

00:05:41,400 --> 00:05:44,340
Wie ist das gemeint?

00:05:44,340 --> 00:05:48,240
Also statt A und B mal etwas konkreteres.

00:05:48,960 --> 00:05:51,090
Die eine Klasse sei eine Klasse von Personen.

00:05:51,090 --> 00:05:53,610
Die andere Klasse sei eine Klasse von Autos.

00:05:53,610 --> 00:05:57,150
Und Personen können Autos besitzen.

00:05:57,150 --> 00:06:04,620
Und statt jetzt also bei "Person" hier in
die Attributliste einzutragen "meinAuto"

00:06:04,620 --> 00:06:07,290
(als Attribut, das dann als Typ "Auto" hat),

00:06:07,290 --> 00:06:13,500
fügt man einfach eine grafische Verbindung
zwischen diesen beiden Klassen ein.

00:06:13,500 --> 00:06:17,310
Und vergibt dann noch einen sinnvollen
Namen, nämlich: es geht um Besitztum.

00:06:17,310 --> 00:06:19,830
Also eine Person besitzt ein Auto, zum Beispiel.

00:06:19,830 --> 00:06:25,020
Wobei hier noch nicht irgendwie festgelegt ist,

00:06:25,020 --> 00:06:29,940
dass jede Person genau ein Auto hat oder
immer nur eine Person ein Auto besitzt.

00:06:29,940 --> 00:06:34,070
So wie die Beziehung hier steht, soll
bewusst nicht ausgeschlossen sein,

00:06:34,070 --> 00:06:38,210
dass eine Person auch mehrere Autos
haben kann oder kein Auto besitzt.

00:06:38,210 --> 00:06:41,705
Oder dass ein Auto von mehreren
Personen gemeinsam besessen werden kann.

00:06:41,705 --> 00:06:46,580
Hier geht es nur darum, dass es überhaupt diese
Art Beziehung zwischen Personen und Autos gibt.

00:06:49,190 --> 00:06:51,980
Dafür müsste mindestens eine Seite
eine Referenz zur anderen haben.

00:06:51,980 --> 00:06:56,180
Zum Beispiel könnte in der Implementierung,
wie eben schon angedeutet, bei Person ein

00:06:56,180 --> 00:06:59,900
Attribut existieren, das ein Auto
oder sogar mehrere Autos abspeichert.

00:06:59,900 --> 00:07:04,190
Aber man trägt das nicht ein, sondern
benutzt diese Art der Darstellung,

00:07:04,190 --> 00:07:06,530
um die Verbindung klarzumachen.

00:07:08,810 --> 00:07:14,810
Wegen dieser Tatsache, dass hier nicht
gefordert ist, dass jedes Auto nur einer

00:07:14,810 --> 00:07:17,750
Person gehört (jede Person besitzt
genau ein Auto), sind durchaus auf

00:07:17,750 --> 00:07:22,550
der Ebene konkreter Objekte verschiedene
Ausprägungen dieser Beziehung denkbar.

00:07:22,550 --> 00:07:27,740
Also es könnte durchaus sein, dass es genau drei
Personen und drei Autos gibt und etwa genau

00:07:27,740 --> 00:07:31,670
Person 1 mit Auto 1 in Beziehung steht,
Person 2 mit Auto 2, Person 3 mit Auto 3.

00:07:31,670 --> 00:07:34,130
Das wäre möglich, ist aber nicht verpflichtend.

00:07:34,130 --> 00:07:39,830
Es könnte zum Beispiel auch sein, dass
es zwar diese drei Personen gibt, aber:

00:07:39,830 --> 00:07:46,040
Person 1 besitzt sowohl Auto 1 als auch
Auto 2, und Person 2 besitzt gar keine

00:07:46,040 --> 00:07:52,460
Autos und taucht deswegen in dieser Auflistung
hier nicht auf, und Person 3 besitzt Auto 3.

00:07:52,460 --> 00:07:53,450
Das wäre denkbar.

00:07:53,450 --> 00:07:56,390
Oder hier noch eine andere Konstellation:

00:07:56,390 --> 00:08:03,200
Person 1 besitzt Autos 1 und 2, Person 2 besitzt
Auto 2, und Person 3 gibt es vielleicht gar nicht.

00:08:03,200 --> 00:08:07,310
Oder es gibt noch ganz viele Personen,
die aber keine weiteren Autos besitzen.

00:08:12,440 --> 00:08:16,910
Was allerdings hier nicht abgedeckt
ist, und auch nicht gewollt ist:

00:08:17,570 --> 00:08:23,780
Zum Beispiel Person 1 besitzt Auto 1 mehrfach.

00:08:23,780 --> 00:08:27,470
Person 1 kann mehrere Autos besitzen, aber
es ergibt keinen Sinn, hier aufzuschreiben:

00:08:27,470 --> 00:08:31,220
Person 1, Auto 1, und dann
noch mal Person 1, Auto 1.

00:08:31,220 --> 00:08:34,070
Warum ist das so?

00:08:34,700 --> 00:08:41,840
Weil das hier Mengen sind, auf
Ihre Mathematikvorlesung bezogen.

00:08:41,840 --> 00:08:43,160
Oder bei den Komedia-Studierenden:

00:08:43,160 --> 00:08:48,530
Auf meine Mathematikvorlesung aus dem vergangenen
Semester bezogen, sind das hier Relationen.

00:08:48,530 --> 00:08:55,160
Mengen von Paaren, oder Teilmengen des
Kreuzprodukts der Menge aller Personen

00:08:55,160 --> 00:08:58,250
und der Menge aller Autos (was sinnvolle
Interpretationen dieser Klassen sind).

00:08:58,250 --> 00:09:00,380
Dann sind das hier Relationen.

00:09:00,380 --> 00:09:03,815
Das heißt, man fragt sich:

00:09:03,815 --> 00:09:05,150
Besitzt Person 1 das Auto 1?

00:09:05,150 --> 00:09:05,540
Ja oder Nein?

00:09:05,540 --> 00:09:06,440
Und nicht:

00:09:06,440 --> 00:09:09,350
Person 1 besitzt Auto 1, und
Person 1 besitzt Auto 1 nochmal.

00:09:09,350 --> 00:09:11,930
Deswegen macht hier die Mengendarstellung Sinn.

00:09:15,530 --> 00:09:18,800
Was ich im letzten Beispiel
übrigens eigentlich sagen wollte:

00:09:20,030 --> 00:09:26,420
Hier ging es genau darum, dass das ein Beispiel
ist, wo Auto 2 von zwei Personen besessen wird.

00:09:26,420 --> 00:09:28,610
Das war der Punkt im letzten Beispiel hier,

00:09:28,610 --> 00:09:34,760
weil hier keine Angaben stehen, die
das irgendwie einschränken würden.

00:09:34,760 --> 00:09:37,550
Das kann man auch einschränken,
werden wir auch in Kürze sehen.

00:09:37,550 --> 00:09:42,710
Dann würde man hier noch Zahlen dranschreiben
an die Enden dieser Assoziation.

00:09:42,710 --> 00:09:45,680
Aber in dem Fall ist das eben
nicht weiter eingeschränkt.

00:09:45,680 --> 00:09:49,820
Deswegen sind alle diese drei und noch
viele weitere Ausprägungen denkbar.

00:09:54,260 --> 00:09:57,070
Jetzt hatte ich gesagt:

00:09:57,070 --> 00:09:58,150
Person besitzt Auto.

00:09:58,150 --> 00:10:03,280
Das scheint zufällig zu passen,
denn wenn ich das so lese,

00:10:03,280 --> 00:10:06,550
"Person besitzt Auto", entspricht
das genau einem deutschen Satz.

00:10:06,550 --> 00:10:08,050
Das ist natürlich Zufall.

00:10:08,050 --> 00:10:11,920
Ich hätte auch zufälligerweise die beiden Klassen

00:10:11,920 --> 00:10:15,910
genau vertauscht aufzeichnen
können in meinem Graph/in meiner Grafik.

00:10:15,910 --> 00:10:17,380
Deswegen kann es wichtig sein,

00:10:17,380 --> 00:10:26,050
tatsächlich bei diesem Namen für diese
Assoziation noch eine Richtung vorzugeben.

00:10:26,050 --> 00:10:28,090
Also wer besitzt hier eigentlich wen?

00:10:28,090 --> 00:10:38,770
Das kann man machen durch diesen schwarzen
dreieckigen Pfeil an dem Namen der Assoziation.

00:10:38,770 --> 00:10:41,350
Also das ist als Leserichtung zu sehen:

00:10:41,350 --> 00:10:43,150
"Person besitzt Auto".

00:10:43,150 --> 00:10:47,860
Wenn ich wollte, dass Autos Personen besitzen,
könnte ich das immer noch so aufzeichnen,

00:10:47,860 --> 00:10:54,520
aber würde eben diesen Dreieckspfeil hierhin
(in Richtung der Person) zeigen lassen.

00:10:56,200 --> 00:10:58,630
Das ist einfach eine Leserichtung der Assoziation.

00:10:59,530 --> 00:11:02,980
Daneben gibt es noch die
sogenannte Navigationsrichtung.

00:11:02,980 --> 00:11:08,950
Die wird durch einen Pfeil, und zwar diese
ganz spezielle Art des Pfeils (deutlich

00:11:08,950 --> 00:11:19,030
zu unterscheiden vom Vererbungspfeil),
direkt an der Verbindungslinie angefügt.

00:11:19,030 --> 00:11:22,960
Dadurch wird die Navigationsrichtung ausgedrückt.

00:11:22,960 --> 00:11:27,160
Und diese beschreibt, Objekte welcher Klasse ihre

00:11:27,160 --> 00:11:33,940
Assoziationspartner kennen müssen und
daher deren Methoden aufrufen können.

00:11:33,940 --> 00:11:38,110
Damit ist zum Beispiel gemeint:

00:11:38,110 --> 00:11:39,160
In dem Beispiel vorhin habe ich gesagt,

00:11:39,160 --> 00:11:45,670
es könne sein, dass Person ein Attribut
besitzt, wo ein Auto gespeichert ist.

00:11:45,670 --> 00:11:49,150
Dann kann die Person auf das Auto zugreifen.

00:11:49,150 --> 00:11:53,050
Dann würde das dieser
Navigationsrichtung entsprechen.

00:11:53,050 --> 00:11:55,750
Also zum Beispiel kennt die Person ihre Autos,

00:11:56,320 --> 00:11:58,810
weil sie diese in einem
Attribut abgespeichert hat.

00:11:58,810 --> 00:12:06,930
Wenn das so wie hier angegeben wäre, hieße
das umgekehrt (weil hier kein Pfeil in die

00:12:06,930 --> 00:12:12,480
andere Richtung angegeben ist), dass die
Autos selber nicht ihre Besitzer kennen.

00:12:12,480 --> 00:12:15,660
Also wenn so wie hier modelliert,

00:12:15,660 --> 00:12:21,210
würde es bedeuten, dass es im Auto
kein Attribut mit Typ Person gibt.

00:12:21,210 --> 00:12:27,930
In einem gewissen Sinne sind diese
Navigationsrichtungen ein Hinweis,

00:12:27,930 --> 00:12:29,430
oder ein Vorgriff, auf die Implementierung.

00:12:29,430 --> 00:12:33,810
Es kann auch gar keine
Navigationsrichtung angegeben sein.

00:12:33,810 --> 00:12:37,080
Dann wird in der Regel angenommen, dass diese
entweder einfach im aktuellen Modellierungsstand

00:12:37,080 --> 00:12:44,190
nicht wichtig ist, oder dass die Assoziation
in beide Richtungen navigierbar ist.

00:12:50,340 --> 00:12:55,170
In dem Beispiel wie es hier angeben ist,
wäre die Vorstellung, wie eben schon gesagt,

00:12:55,170 --> 00:13:00,750
dass es die Person-Objekte sind, die Referenzen
auf Auto-Objekte haben, und nicht umgekehrt.

00:13:00,750 --> 00:13:08,400
Da nach wie vor dennoch erlaubt sein soll,
dass eine Person mehrere Autos besitzen kann,

00:13:08,400 --> 00:13:11,700
reicht natürlich nicht, hier
genau ein Auto abzuspeichern.

00:13:11,700 --> 00:13:15,150
Sondern für jede Person müsste eine
Menge von Autos abgespeichert werden,

00:13:15,150 --> 00:13:17,250
die von dieser Personen besessen werden.

00:13:18,630 --> 00:13:23,730
Zum Beispiel könnte es sein, dass für Person 1
die Menge \{ Auto 1, Auto 2\} abgespeichert ist,

00:13:23,730 --> 00:13:27,420
für Person 2 die leere Menge, und
für Person 3 die Menge \{ Auto 3 \}.

00:13:27,420 --> 00:13:35,310
Das würde dann dieser zweiten
Zuordnung entsprechen, dieser Relation.

00:13:35,310 --> 00:13:38,040
Wenn wir das nicht als Paare
speichern, sondern für jede

00:13:38,040 --> 00:13:41,010
Person einfach die Menge der
entsprechenden Autos speichern.

00:13:41,010 --> 00:13:44,460
Person 1: Auto 1 und Auto 2.

00:13:44,460 --> 00:13:46,110
Person 2 hat keine Autos.

00:13:46,110 --> 00:13:47,460
Und Person 3 hat Auto 3.

00:13:47,460 --> 00:13:55,500
Das würde man dann in den drei konkreten
Person-Objekten jeweils abspeichern.

00:14:01,750 --> 00:14:06,070
Im Prinzip können die Leserichtung
und die Navigationsrichtung abweichen.

00:14:06,070 --> 00:14:11,740
Also wir modellieren zwar die Beziehung
Person-besitzt-Auto, aber dennoch speichern

00:14:11,740 --> 00:14:16,120
wir nicht bei der Person die Autos ab,
sondern umgekehrt bei den Autos die Personen.

00:14:16,120 --> 00:14:21,190
Das ist etwas ungewöhnlich, und in der
Tat würde man wahrscheinlich annehmen,

00:14:21,190 --> 00:14:22,570
dass man hier nicht gut modelliert hat.

00:14:22,570 --> 00:14:26,560
Also wenn Leserichtung und
Navigationsrichtung abweichen,

00:14:26,560 --> 00:14:31,360
dann ist vielleicht diese
Beziehung einfach falsch benannt.

00:14:31,360 --> 00:14:38,410
Wenn es wirklich die Autos sind, die sich merken,
zu welchen Personen sie gehören, dann sollte hier

00:14:38,410 --> 00:14:42,490
statt "besitzt" lieber stehen "gehört", und
die Leserichtung in die andere Richtung sein.

00:14:42,490 --> 00:14:46,030
"Auto gehört Person" statt "Person besitzt Auto".

00:14:46,030 --> 00:15:01,660
Umgekehrt, wenn man einfach die Assoziation in
beide Richtungen navigierbar hat, dann ist die

00:15:01,660 --> 00:15:08,740
Leserichtung vor allem für das Verständnis,
für die Intention des Modells relevant.

00:15:08,740 --> 00:15:12,550
Während der Implementierung das
egal ist, weil sowieso jede Person

00:15:12,550 --> 00:15:17,410
sich die Autos merkt und die Autos sich
auch merken, welcher Person sie gehören.

00:15:17,410 --> 00:15:22,240
Dann hat man sich entschieden, diese Assoziation
dennoch "besitzt" zu nennen und nicht "gehört".

00:15:22,240 --> 00:15:28,630
Und dann gibt man eben durch diesen Pfeil an,
in welcher Richtung hier das Besitztum vorliegt.

00:15:28,630 --> 00:15:37,780
Wenn gar keine Navigationsrichtungen
angegeben sind, ist es entweder so,

00:15:37,780 --> 00:15:41,170
dass es vielleicht zu dem Zeitpunkt,
wo man modelliert, nicht wichtig ist.

00:15:41,170 --> 00:15:42,580
Oder es gibt Konventionen.

00:15:42,580 --> 00:15:48,070
Zum Beispiel hat man sich im Team (das Team, das
gemeinsam modelliert) geeinigt und festgelegt:

00:15:48,070 --> 00:15:52,630
Wenn keine Navigationsrichtungen eingezeichnet
sind, dann sollen immer beide vorliegen.

00:15:52,630 --> 00:15:56,920
Das werde ich hier nicht weiter festlegen.

00:16:04,400 --> 00:16:08,840
Das waren diese verschiedenen Arten von
Pfeilen, die man an Assoziationen haben kann.

00:16:08,840 --> 00:16:14,060
Dann hatte ich vorhin schon erwähnt, dass man auch
Zahlen an den Assoziationen stehen haben kann.

00:16:14,060 --> 00:16:17,240
Das sind die sogenannten Multiplizitäten.

00:16:17,240 --> 00:16:22,700
Und es sind im allgemeinen Fall
Intervalle, also irgendwie zwei Zahlen.

00:16:22,700 --> 00:16:24,800
Als "von"/"bis" ist das zu lesen.

00:16:24,800 --> 00:16:27,740
Es gibt auch den Spezialfall,
dass nur eine Zahl da steht.

00:16:27,740 --> 00:16:30,500
Dann ist eben von dieser Zahl
bis zu dieser Zahl gemeint.

00:16:30,500 --> 00:16:35,510
Also es ist kein echtes Intervall, sondern
nur genau eine Zahl, die in Frage kommt.

00:16:36,950 --> 00:16:40,550
Es könnte so aussehen (vergessen wir
nochmal die Navigationsrichtungen,

00:16:40,550 --> 00:16:42,080
die sollen gerade nicht relevant sein):

00:16:42,080 --> 00:16:44,240
Wir haben die Assoziation, wir haben einen Namen,

00:16:44,240 --> 00:16:48,410
wir haben eine Leserichtung, und wir
haben hier jeweils Multiplizitäten.

00:16:48,410 --> 00:16:49,610
Wie ist das zu lesen?

00:16:50,840 --> 00:16:58,220
Wie folgt.
Diese Angabe an diesem Ende bedeutet:

00:16:58,220 --> 00:17:01,190
Jede Person besitzt 0 bis 5 Autos.

00:17:01,190 --> 00:17:08,000
Also mit jeder einzelnen Person sind
zwischen 0 und 5 Autos assoziiert.

00:17:08,000 --> 00:17:11,300
Und die 1 an diesem Ende bedeutet:

00:17:11,300 --> 00:17:14,840
Jedes Auto gehört genau einer Person.

00:17:14,840 --> 00:17:19,250
Da muss man sich merken,
wie herum das gemeint ist.

00:17:19,250 --> 00:17:20,540
Die 1 heißt nicht:

00:17:20,540 --> 00:17:21,950
Jede Person hat ein Auto.

00:17:21,950 --> 00:17:24,830
Sondern jedes Auto gehört einer Person.

00:17:24,830 --> 00:17:28,850
Und jede Person besitzt bis zu fünf Autos.

00:17:28,850 --> 00:17:40,040
Das heißt, hier kann man auch erkennen, dass wenn
etwa die Personen ein Attribut mit Typ Auto haben

00:17:40,040 --> 00:17:45,050
sollen, dies ein Mengenattribut sein müsste (da
bis zu fünf Autos abgespeichert werden müssen).

00:17:45,050 --> 00:17:49,490
Also jetzt programmiersprachlich:

00:17:49,490 --> 00:17:52,700
Je nachdem, was Sie da an Vorlesungen
schon gehört haben und parallel hören,

00:17:53,240 --> 00:17:56,630
haben Sie vielleicht Listen, Mengen,
Arrays als Kollektionen kennengelernt.

00:17:56,630 --> 00:18:01,850
Hier müsste also für jede Person eine
solche Kollektion gespeichert werden,

00:18:01,850 --> 00:18:04,850
um sich bis zu fünf Autos merken zu können.

00:18:04,850 --> 00:18:10,940
Wenn umgekehrt diese Assoziation in die
andere Richtung navigierbar sein sollte,

00:18:10,940 --> 00:18:13,340
müsste sich jedes Auto nur eine Person merken.

00:18:13,340 --> 00:18:19,580
Man bräuchte also in die Richtung keine
Kollektion, aber in die Richtung schon.

00:18:29,410 --> 00:18:30,880
Jetzt könnte man ein bisschen herumspielen.

00:18:30,880 --> 00:18:34,660
Man könnte zum Beispiel aus einer 1 eine
2 machen.

00:18:34,660 --> 00:18:35,680
Was heißt das dann hier?

00:18:35,680 --> 00:18:37,750
Da muss man sich wieder vergegenwärtigen:

00:18:37,750 --> 00:18:38,680
Was heißt das?

00:18:38,680 --> 00:18:43,930
Es heißt nicht, dass zwei Personen immer
genau zusammen bis zu fünf Autos besitzen.

00:18:43,930 --> 00:18:46,030
So ist das nicht zu lesen.

00:18:46,030 --> 00:18:48,295
Zu lesen ist:

00:18:48,295 --> 00:18:54,880
Jede Person besitzt bis zu fünf Autos, und jedes
Auto wird von genau zwei Personen besessen.

00:18:54,880 --> 00:19:00,340
Es müssen aber für verschiedene Autos nicht immer
die gleichen konsistenten Paare von Personen sein.

00:19:00,340 --> 00:19:09,700
Also es wäre durchaus möglich, dass
Person 1 die Autos 1 und 2 besitzt,

00:19:09,700 --> 00:19:21,280
Person 2 auch Auto 1 besitzt, jedoch Auto
2 als zweiten Besitzer eine Person 3 hat.

00:19:22,060 --> 00:19:22,780
Dann gilt hier:

00:19:22,780 --> 00:19:25,750
Jede Person hat bis zu fünf Autos.

00:19:25,750 --> 00:19:27,190
Person 1 hat zwei Autos.

00:19:27,190 --> 00:19:28,300
Person 2 hat ein Auto.

00:19:28,300 --> 00:19:29,770
Person 3 hat ein Auto.

00:19:29,770 --> 00:19:33,460
Und jedes Auto gehört exakt zwei Personen.

00:19:33,460 --> 00:19:34,083
Auto 1 gehört Person 1 und Person 2.

00:19:34,083 --> 00:19:39,610
Auto 2 gehört Person 1 und Person 3.

00:19:39,610 --> 00:19:43,960
Aber kein Auto gehört genau
den gleichen zwei Personen.

00:19:43,960 --> 00:19:49,150
Auch hier muss man das einfach so lesen:

00:19:49,150 --> 00:19:51,250
Jede Person hat bis zu fünf Autos.

00:19:51,250 --> 00:19:53,470
Jedes Auto gehört exakt zwei Personen.

00:19:53,470 --> 00:20:00,520
Aber das kann sozusagen gemischt sein, wer jeweils
die Besitzer von zwei verschiedenen Autos sind.

00:20:00,520 --> 00:20:05,980
Es wäre hier auch denkbar, dass es noch weitere
Personen gibt, aber keine weiteren Autos.

00:20:05,980 --> 00:20:08,500
Weil jede Person bis zu fünf Autos besitzen muss,

00:20:09,670 --> 00:20:12,160
das für eine gegebene Person
aber auch null Autos sein können.

00:20:12,790 --> 00:20:15,280
Was hier natürlich nicht möglich
ist, ist, dass es noch weitere

00:20:15,280 --> 00:20:17,020
Autos gibt aber keine weiteren Personen.

00:20:17,830 --> 00:20:21,610
Jedes weitere Auto müsste
mindestens zwei Besitzer haben.

00:20:21,610 --> 00:20:27,220
Also es wäre möglich, dass es
noch Autos 3, 4 und 5 gibt,

00:20:27,220 --> 00:20:32,050
die alle auch zum Beispiel Person 1 gehören.

00:20:32,050 --> 00:20:35,020
Dann müssten sie aber eben auch
in dieser Menge genannt werden.

00:20:40,430 --> 00:20:45,080
Allgemein werden an beiden
Enden solche Intervalle stehen.

00:20:45,080 --> 00:20:55,520
Also abstrakt für Namen von Klassen A und B und
jeweils ihr Intervall m bis n, k bis l, hieße das,

00:20:55,520 --> 00:21:08,090
dass zwischen m und n Instanzen von A zu
einer Instanz von B assoziiert werden können.

00:21:08,090 --> 00:21:13,010
Also ich nehme eine Instanz
der Klasse B, dann kann die i,

00:21:13,010 --> 00:21:17,240
zwischen m und n, A-Instanzen als Partner haben.

00:21:17,240 --> 00:21:21,290
Und umgekehrt, wenn man eine Instanz von A hat,

00:21:21,290 --> 00:21:27,950
dann muss es dazu j Instanzen von B geben,
wobei j zwischen k und l zu liegen hat.

00:21:27,950 --> 00:21:32,930
Die Beispiele eben waren
einfach Ausprägungen davon.

00:21:32,930 --> 00:21:40,100
Wenn man hier keine obere Schranke haben möchte
(also man möchte nicht sagen "von m bis n",

00:21:40,100 --> 00:21:44,660
sondern immer nur "mindestens m"), dann
kann man dafür ein Sternchen schreiben.

00:21:44,660 --> 00:21:46,700
Das steht dann für "unendlich".

00:21:46,700 --> 00:21:49,760
Also wenn man sagen wollen würde,
"es müssen mindestens zwei sein,

00:21:49,760 --> 00:21:55,160
aber es können beliebig viele sein",
schreibt man eben "2 bis Stern".

00:21:55,160 --> 00:21:59,840
Umgekehrt, wenn man hätte sagen wollen,
"höchstens zwei", hätte man geschrieben: "0..2".

00:21:59,840 --> 00:22:02,780
Die untere Schranke ist natürlich null und für die

00:22:02,780 --> 00:22:07,100
obere Schranke fügt man einen Stern
ein als Zeichen für "unendlich".

00:22:10,040 --> 00:22:11,450
Was ist, wenn gar nichts dransteht?

00:22:12,260 --> 00:22:14,960
Wir hatten auch den Fall, bevor wir
Multiplizitäten eingeführt hatten,

00:22:14,960 --> 00:22:16,070
dass da gar nichts steht.

00:22:16,070 --> 00:22:19,640
Dann ist das wieder eine Frage der Konvention.

00:22:19,640 --> 00:22:23,480
UML selbst gibt keine Standard-Multiplizität vor.

00:22:23,480 --> 00:22:28,280
In manchen Büchern steht, vereinbart
als Standard-Multiplizität, 1.

00:22:28,280 --> 00:22:30,020
Aber UML selbst gibt keine vor.

00:22:30,020 --> 00:22:35,150
Für Diagramme in der Vorlesung, in der Übung,

00:22:35,150 --> 00:22:42,170
auch in der Klausur, wird es so sein,
dass wenn keine Angabe vorhanden ist,

00:22:42,170 --> 00:22:48,350
die Multiplizität "0..*" als Standard genommen
wird, also einfach gar keine Einschränkung.

00:22:48,350 --> 00:22:52,050
Es könnte von null bis beliebig
viele alles möglich sein.

00:22:52,050 --> 00:22:59,910
Das gilt für Assoziationen, teilweise auch
für Aggregation, bei Komposition nicht mehr.

00:22:59,910 --> 00:23:02,760
Darauf kommen wir noch zu sprechen.

00:23:02,760 --> 00:23:03,300
Also im Grunde genommen:

00:23:03,300 --> 00:23:05,790
Assoziation und Aggregation
nutzen diese Konvention.

00:23:05,790 --> 00:23:15,450
Komposition nutzt eine andere Konvention, über die
wir in dem entsprechenden Video noch reden werden.

00:23:15,450 --> 00:23:24,540
Vorher noch eine weitere
Darstellungsmöglichkeit zu Assoziationen.

00:23:24,540 --> 00:23:34,680
Manchmal gibt man, statt der Verbindungslinie
einen Namen zu geben (wie das "besitzt" eben),

00:23:35,670 --> 00:23:39,450
stattdessen den beiden Enden der
Verbindungslinie einen Namen.

00:23:39,450 --> 00:23:46,830
Das ist dann sinnvoll, wenn es zum
Beispiel klar verteilte Rollen gibt,

00:23:46,830 --> 00:23:51,660
die von den beiden Enden einer solchen
Assoziation eingenommen werden.

00:23:51,660 --> 00:23:59,640
Dann kann es unnötig sein, die
Assoziation selbst noch zu benennen.

00:23:59,640 --> 00:24:04,620
Bei "besitzt" hätte man die beiden Rollen auch
als "Eigentümer" und "Besitztum" benennen können.

00:24:04,620 --> 00:24:08,040
Dann hätte man nicht mehr sagen müssen, dass
die Beziehung eine Besitztumsbeziehung ist.

00:24:08,040 --> 00:24:09,412
Oder hier ein anderes Beispiel:

00:24:09,412 --> 00:24:15,810
Es gibt den Großhandel, es gibt einzelne
Einzelhändler, und es gibt Endkunden.

00:24:16,920 --> 00:24:18,957
Jeweils Beziehungen
dazwischen, also Assoziationen.

00:24:18,957 --> 00:24:21,720
In jeder dieser Assoziationen gibt es einen Part,

00:24:21,720 --> 00:24:25,290
der eine Verkäufer-Rolle hat, und
einen Part, der eine Käufer-Rolle hat.

00:24:25,290 --> 00:24:30,810
Zwischen Großhandel und Händler ist der Großhandel
der Verkäufer und der Händler der Käufer.

00:24:30,810 --> 00:24:36,150
Hingegen zwischen Händler und Endkunde ist der
Händler der Verkäufer und der Endkunde der Käufer.

00:24:36,150 --> 00:24:39,150
Also der Händler nimmt in verschiedenen Rollen

00:24:39,150 --> 00:24:43,590
an zwei Assoziationen mit
verschiedenen Partnern teil.

00:24:43,590 --> 00:24:51,380
Und dann ist eben die Assoziation nicht
mehr benannt, weil die beiden Rollen,

00:24:51,380 --> 00:24:56,510
die an den Enden stehen, schon genug
Informationen über diese Assoziation vermitteln.

00:25:00,890 --> 00:25:03,230
Das soweit zu Assoziationen.
