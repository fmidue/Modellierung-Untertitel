0:00:00.000,0:00:09.060
So, let me discuss one more
example, or just go through a few

0:00:09.060,0:00:13.020
more cases on the example
just seen on the slides.

0:00:13.020,0:00:16.590
I had already mentioned things that
were not visible on the slide.

0:00:16.590,0:00:24.870
For example, that it is quite possible that
there is more than one token in one place.

0:00:24.870,0:00:28.200
And then one can also ask oneself what
happens, for example, during firing.

0:00:28.200,0:00:30.810
Let's take a look at this situation.

0:00:31.350,0:00:35.370
This would be our starting position for the Petri
net with the same structure as on the slides.

0:00:35.370,0:00:42.720
But the initial situation would be that we
would have two tokens here on the left place.

0:00:42.720,0:00:45.900
What is the case then in terms of firing?

0:00:45.900,0:00:50.550
It is still the case that these three
transitions cannot fire at the beginning.

0:00:51.090,0:00:55.590
This transition is still allowed to
fire, because the requirement is that

0:00:55.590,0:00:59.760
it must have at least one token
on each of its incoming arrows.

0:00:59.760,0:01:02.280
So the fact that there are two tokens
here doesn't detract from that.

0:01:02.280,0:01:04.320
The transition can still fire.

0:01:04.320,0:01:05.250
What happens then?

0:01:05.250,0:01:10.680
Then a corresponding number of
tokens are taken from the places.

0:01:10.680,0:01:15.690
So a token from here and actually
just one of the two tokens here.

0:01:15.690,0:01:24.030
Then the transition would fire and would put
a token on each of its postcondition places.

0:01:24.030,0:01:25.710
So you could imagine it like this.

0:01:25.710,0:01:29.940
And afterwards, this one
token is still up here.

0:01:29.940,0:01:33.690
So the firing of the transition
doesn't have to empty one place.

0:01:33.690,0:01:39.090
Just as many brands are consumed
as the incoming arrows demand.

0:01:39.960,0:01:45.840
Therefore in this case the
postcondition would be fulfilled.

0:01:45.840,0:01:50.430
We would now have put down these two
tokens and that would be the new state.

0:01:52.200,0:01:53.010
How could we continue then?

0:01:53.010,0:01:58.260
Then, for example, each of these
three transitions could fire next.

0:01:58.260,0:02:01.890
For example, we could fire this
transition first, as we did before.

0:02:01.890,0:02:07.680
Then we would get into the situation
that there are two tokens up here.

0:02:07.680,0:02:11.040
And if, for example, we were to fire
this transition again afterwards, we

0:02:11.040,0:02:12.990
would be back in the starting situation.

0:02:15.660,0:02:24.540
It is just as conceivable that, for example,
tokens already lie on the post-condition places.

0:02:25.440,0:02:27.690
This could also have
been our initial assignment.

0:02:27.690,0:02:30.420
And also then we are allowed
to fire this transition.

0:02:30.420,0:02:35.400
So that says, it must be
consumed along the input arrows

0:02:35.400,0:02:38.010
and generated along the output arrows.

0:02:38.010,0:02:40.740
And that doesn't take away from the
fact that there's already a token here.

0:02:41.250,0:02:42.120
It is not the case that

0:02:42.120,0:02:44.700
the space here is occupied and therefore
the transition should not be fired.

0:02:44.700,0:02:47.430
The fact that there is already
a token is not detrimental.

0:02:47.430,0:02:52.140
In the situation as it is shown here
now, these transitions could fire.

0:02:52.140,0:02:54.780
Of course, these two transitions could
also fire, because of this token.

0:02:54.780,0:03:01.050
But let's assume that we
fire this middle transition.

0:03:01.050,0:03:02.520
Then this would mean, of course:

0:03:02.520,0:03:08.820
A corresponding number of tokens are
taken from the input, like this,

0:03:08.820,0:03:14.820
then placed on the output positions,
and it would look like this.

0:03:14.820,0:03:16.740
Then two tokens will end up here.

0:03:16.740,0:03:20.460
One token because it was already
there before firing, and one token

0:03:20.460,0:03:21.930
because it was added from here.

0:03:21.930,0:03:22.560
This is also allowed.

0:03:22.560,0:03:27.150
The transitions do not have to find empty

0:03:27.150,0:03:29.250
places in their postcondition places.

0:03:29.250,0:03:30.420
They may be already occupied.

0:03:30.420,0:03:34.560
Then they will be even fuller afterwards.

0:03:36.780,0:03:39.900
Then we would have an interesting
situation here in this case,

0:03:39.900,0:03:43.560
insofar as now these two
transitions are both activated.

0:03:43.560,0:03:46.320
We had said earlier (in
the example on the slide)

0:03:46.320,0:03:48.750
that these two
transitions were in conflict.

0:03:48.750,0:03:50.670
Because we had a token here.

0:03:50.670,0:03:52.770
And then once we had decided
to put this one down here.

0:03:52.770,0:03:57.180
And then the system was dead because the token
had been removed from the system and was no longer

0:03:57.180,0:03:59.640
available to fire this transition
again later, for example.

0:03:59.640,0:04:01.200
Now it would be like this:

0:04:01.200,0:04:03.060
If there are two tokens on the place,

0:04:03.060,0:04:09.960
then there is no more problem
between these two transitions.

0:04:09.960,0:04:18.240
Now, for example, the lower transition
could fire and take this token,

0:04:18.240,0:04:21.450
and the upper transition could
fire and take this token.

0:04:22.090,0:04:23.860
Then both of them
would have been possible.

0:04:23.860,0:04:27.760
And even though we have taken
this one token out of the

0:04:27.760,0:04:29.320
system, the system
is not necessarily dead.

0:04:29.320,0:04:32.860
Because, for example, it could continue
to operate and fire accordingly

0:04:32.860,0:04:37.120
now with the upper token present.

0:04:38.950,0:04:43.090
So quite different cases
that can occur here.

0:04:43.090,0:04:44.530
In that case, sure:

0:04:44.530,0:04:48.130
If I would now decide
to go down with the token,

0:04:48.130,0:04:52.270
then the system would be
dead again sooner or later.

0:04:52.270,0:04:57.010
Because then, at most,
these paths would still

0:04:57.010,0:05:00.250
be possible, and then this
transition would indeed fire again.

0:05:00.250,0:05:11.560
But for example up to here the
system was not in this dead end.

0:05:12.130,0:05:14.470
If I decide here to
go up again instead, I can

0:05:14.470,0:05:18.910
just also progress further in
the processes of the system.

0:05:21.400,0:05:23.890
These were a few constellations
that I wanted to discuss.

0:05:23.890,0:05:27.940
And then I had already mentioned on
the slides that it could also be that

0:05:27.940,0:05:33.010
at these arrows here (which we have
everywhere) there is still the information that

0:05:33.010,0:05:37.300
not necessarily when firing it always has
to be about exactly one token per position.

0:05:37.300,0:05:42.850
Let's consider a situation where I remove these two
tokens so that I have the same starting situation

0:05:42.850,0:05:50.650
as at the very beginning, but for example
there would be a 2 at this arrow here.

0:05:50.650,0:05:55.060
This then means that
when this transition fires,

0:05:55.060,0:06:01.030
and it has taken appropriate tokens
from the precondition places, it

0:06:01.030,0:06:06.070
will of course still deposit
tokens in its postcondition places.

0:06:06.070,0:06:14.320
But because of the 2 here, firing this
transition would always deposit two tokens.

0:06:14.320,0:06:16.600
So firing here would mean:

0:06:16.600,0:06:27.730
Consume token, consume token, drop
token here, drop two tokens here.

0:06:27.730,0:06:31.900
That also means that you can't
think of it as the tokens that

0:06:31.900,0:06:37.400
were up here before somehow being
preserved and moving through the system.

0:06:37.400,0:06:41.750
It may look like that if there were two tokens
before and afterwards there are two tokens again.

0:06:41.750,0:06:46.880
But for example, in the case where we had one token
on each upper place before and afterwards, because of

0:06:46.880,0:06:50.840
these 2 here at the bottom left, there are now two
tokens, then it looks as if a new token has been created.

0:06:51.350,0:06:52.400
But in reality it is always like that:

0:06:52.400,0:06:54.410
Tokens are always consumed
and tokens are always created.

0:06:54.410,0:06:56.600
One must not assume that the number of

0:06:56.600,0:06:59.840
tokens in the system must
somehow always remain constant.

0:06:59.840,0:07:02.510
That's more by chance when
each transition has as many

0:07:02.510,0:07:07.070
incoming as outgoing arrows, and there's
never an annotation like this anywhere here.

0:07:07.070,0:07:08.930
Then it is so.

0:07:08.930,0:07:16.910
It is also so if there were three incoming arrows
here and two outgoing arrows, whose sum is 3.

0:07:19.820,0:07:24.410
In the case with the 2 here the
following processes are possible:

0:07:24.410,0:07:29.930
Then actually in the case the number of
tokens in the system will increase in

0:07:29.930,0:07:32.210
total with each
firing of this transition.

0:07:32.780,0:07:37.550
Now we would again consume one token
from here, consume one token from here,

0:07:37.550,0:07:44.060
put down one token here,
put down two tokens here.

0:07:44.060,0:07:50.570
Then we would have unlimited
resource creation because

0:07:50.570,0:07:55.610
every time this transition fires,
a token is put into the system.

0:07:55.610,0:08:04.670
It would be different, for example,
if there was a 2 here as well.

0:08:04.670,0:08:08.060
Because then that means that
every time this transition

0:08:08.060,0:08:12.080
fires, two tokens have to be
taken from the left place.

0:08:12.080,0:08:17.600
So then it could go on like this,
starting from the situation (assuming we

0:08:17.600,0:08:23.690
had reached that somehow), that, for example,
in the situation now this transition could

0:08:23.690,0:08:28.040
not fire (because it finds one token here,
but there would be no two tokens here).

0:08:28.040,0:08:33.500
Then it would be necessary to add
another token to the upper left.

0:08:33.500,0:08:36.890
This could be for example this one
after firing the leftmost transition.

0:08:36.890,0:08:38.540
And what would happen now?

0:08:38.540,0:08:41.900
Now this transition could fire.

0:08:41.900,0:08:46.320
It could also fire, for example, after
we have moved this token up here.

0:08:46.320,0:08:54.930
And firing now would mean taking one token from
the right, taking two tokens from the left,

0:08:54.930,0:08:58.620
giving one token to the right and
giving two tokens to the left.

0:08:58.620,0:09:00.840
So firing here now would mean:

0:09:00.840,0:09:06.780
We have to consume one token from here,
we have to consume two tokens from here,

0:09:06.780,0:09:15.390
we have to put one token
here and put two tokens here.

0:09:15.390,0:09:21.120
And then, of course, we can get into
a situation where actually the system

0:09:21.120,0:09:28.320
becomes dead-locked because of that, because
we take tokens away from the system.

0:09:28.320,0:09:35.100
Let's say we have this 2 up
here, but no 2 down here,

0:09:35.100,0:09:39.150
but just a normal simple
arrow with no such label.

0:09:39.150,0:09:41.100
What would happen then?

0:09:41.100,0:09:47.640
Then, for example, such transitions
would still be possible here.

0:09:47.640,0:09:55.290
Then now, to fire this transition,
one token would have to be taken from

0:09:55.290,0:09:57.030
the right, two tokens from the left.

0:09:57.030,0:10:00.330
But in the output, there would only
be one token here, one token here.

0:10:00.330,0:10:03.600
Because nowhere here is
a number greater than 1.

0:10:03.600,0:10:08.790
That is, then a
possible sequence would be:

0:10:08.790,0:10:13.170
Here this token disappears, these
two tokens disappear; on the

0:10:13.170,0:10:20.310
right, a token is added; on the
left, also only one token is added.

0:10:20.310,0:10:24.270
And then we have seen
that in that step the total

0:10:24.270,0:10:26.790
number of tokens in the
system has just decreased.

0:10:26.790,0:10:32.520
And then sooner or later that would lead to the
fact that we don't have enough tokens anymore.

0:10:32.520,0:10:36.090
So we could fire
again here, fire again here.

0:10:36.090,0:10:38.760
Then we could fire this transition again.

0:10:38.760,0:10:44.580
That would result in these
three tokens disappearing,

0:10:44.580,0:10:48.570
and one token would appear in
each post-condition location.

0:10:48.570,0:10:49.890
So then we would be here.

0:10:54.450,0:10:58.230
But in total, there would only be
three tokens left in the system.

0:10:58.230,0:11:04.650
And then we could still fire here,
fire here, fire here for example.

0:11:04.650,0:11:10.110
And then we wouldn't be able to continue because
this transition would never be able to fire.

0:11:10.110,0:11:12.540
Because it would never find
two tokens on the left.

0:11:12.540,0:11:14.490
The fact that there are two tokens
here on the right doesn't help.

0:11:14.490,0:11:19.320
Because the 2 is at this left
entrance of the transition.

0:11:23.040,0:11:24.750
There are many different options, but

0:11:24.750,0:11:28.290
they are all based on this
simple concept of firing.

0:11:28.290,0:11:31.770
A transition must find enough
tokens on its precondition places.

0:11:31.770,0:11:35.220
Sufficient tokens means one
token per position, unless there

0:11:35.220,0:11:37.920
are such numerical labels on them.

0:11:37.920,0:11:40.530
Then there must be at least a
corresponding number of tokens.

0:11:40.530,0:11:43.590
If there are more, then only as
many are consumed as are needed.

0:11:43.590,0:11:45.990
If the transition can fire, afterwards

0:11:45.990,0:11:49.380
on the postcondition places
accordingly many tokens are put.

0:11:49.380,0:11:51.480
At least one per arrow.

0:11:51.480,0:11:54.600
If there are any numbers on them,
there will be more than one.

0:11:54.600,0:11:57.390
And if there were already tokens on the

0:11:57.390,0:11:59.310
positions, the positions were not
empty, then something is added.

0:11:59.310,0:12:02.100
These are all cases that
we have already discussed.
