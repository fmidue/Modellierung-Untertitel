136 # slide
00:00:00,000 --> 00:00:02,730
Welcome back.

00:00:02,730 --> 00:00:11,850
We've been dealing mostly with UML class
and object diagrams in the last few videos.

00:00:11,850 --> 00:00:14,310
You can see now here on the slide,

00:00:14,310 --> 00:00:20,430
in the title at least, that we're
talking about an activity diagram.

00:00:20,430 --> 00:00:22,170
That's a different kind of UML diagram.

00:00:22,170 --> 00:00:28,380
And that's even though we haven't actually gotten
to the part of the lecture where we're going to be

00:00:28,380 --> 00:00:31,080
dealing with UML activity diagrams.

00:00:31,080 --> 00:00:33,000
We are actually in the Petri net part.

00:00:33,000 --> 00:00:35,670
So why does this diagram appear here?

00:00:35,670 --> 00:00:41,430
First, simply as an example of a UML

00:00:41,430 --> 00:00:43,920
diagram that is about dynamic modeling.

00:00:44,520 --> 00:00:48,390
Here it is about modeling a process,
how a house should be built.

00:00:48,390 --> 00:00:50,070
Details are not so important now, because

00:00:50,070 --> 00:00:55,800
we will look at this example in more
detail in the lecture in a few weeks.

00:00:55,800 --> 00:00:58,050
What this is about right
now is that these UML

00:00:58,050 --> 00:01:04,890
activity diagrams can be simplified
to be represented by Petri nets.

00:01:04,890 --> 00:01:10,110
Petri nets are a simpler mechanism that
goes towards UML activity diagrams.

00:01:10,920 --> 00:01:16,530
The current lecture material for the next
two or three weeks will be these Petri nets.

00:01:18,420 --> 00:01:20,730
You can use them (just like activity

00:01:20,730 --> 00:01:22,830
diagrams) when you
need to model processes.

00:01:22,830 --> 00:01:27,000
That is, processes that
consist of individual steps.

00:01:27,000 --> 00:01:28,770
The main point is to specify

00:01:28,770 --> 00:01:33,660
or formulate and summarize conditions
under which certain single steps

00:01:33,660 --> 00:01:37,500
are executable or in which
order they have to happen.

00:01:37,500 --> 00:01:43,440
At first glance, this may look
a bit like a flat state diagram.

00:01:43,440 --> 00:01:47,280
So like what we have
dealt with in the Wolf-Goat-Cabbage problem,

00:01:47,280 --> 00:01:50,040
for example, or
in the corresponding exercise.

00:01:50,040 --> 00:01:55,050
But if we look closely, we see that
there are not just nodes and connections

00:01:55,050 --> 00:01:58,860
here, in the simple way that
there were in flat state diagrams.

00:01:58,860 --> 00:02:02,220
There are extra elements here,
also highlighted graphically.

00:02:02,220 --> 00:02:07,200
So this kind of node or
this apparent distribution

00:02:07,200 --> 00:02:12,440
node where the flow branches out.

00:02:12,440 --> 00:02:13,400
Then you have to talk about

00:02:13,400 --> 00:02:18,230
what that should mean (as semantics)
of these two places in the diagram.

00:02:18,230 --> 00:02:19,130
We'll do that, of course.

00:02:19,130 --> 00:02:23,510
But for now, it may suffice to
observe that, by design, there

00:02:24,290 --> 00:02:29,510
is obviously more going on here
than in a very simple graph.

00:02:29,510 --> 00:02:32,780
This is also a kind of graph, but not the
simple kind of graph where we only have,

00:02:32,780 --> 00:02:35,870
as in a flat state diagram,
nodes and transitions.

00:02:40,700 --> 00:02:42,095
We'll look at that in more detail later.

00:02:42,095 --> 00:02:48,230
But in the coming weeks, we'll look at
a simplified version, in a sense, of

00:02:48,230 --> 00:02:51,470
activity diagrams like
this, via Petri nets.

00:02:51,470 --> 00:02:55,370
And later, the relationship
to the UML world.

00:02:59,990 --> 00:03:00,830
So what are Petri nets?

00:03:00,830 --> 00:03:02,060
Petri nets will look like this.

00:03:02,060 --> 00:03:06,020
It's a little bit different,
maybe simpler, because

00:03:06,020 --> 00:03:10,820
there are fewer different graphical
elements than in the slide before.

00:03:10,820 --> 00:03:15,500
We're going to have essentially
these two types of nodes in a graph.

00:03:15,500 --> 00:03:20,540
These round places are called
places, or places actually.

00:03:20,540 --> 00:03:23,330
And there can
be tokens in there.

00:03:23,330 --> 00:03:30,110
These will be movable little tokens afterwards
that can be moved through the Petri net.

00:03:30,110 --> 00:03:35,120
And these boxes, these are another
kind of nodes in the graph.

00:03:35,120 --> 00:03:36,050
They are called transitions.

00:03:36,050 --> 00:03:41,690
And they essentially play the role
that the individual actions play here.

00:03:41,690 --> 00:03:47,870
So those are used
to model dynamic actions.

00:03:47,870 --> 00:03:54,740
While these places and the markers (tokens)
on them will rather stand for resources

00:03:54,740 --> 00:03:58,580
that are used or
needed for these actions.

00:03:59,750 --> 00:04:03,380
Petri nets are clearly a
means for dynamic modeling.

00:04:03,380 --> 00:04:09,200
As opposed to class and object diagrams,
which are made for static modeling.

00:04:11,690 --> 00:04:12,440
This is also stated here again.

00:04:12,440 --> 00:04:15,200
So emphasis is
on modeling dynamic behavior.

00:04:15,200 --> 00:04:17,720
Petri nets are a fairly old approach.

00:04:17,720 --> 00:04:23,390
They go back to work done a
long time ago by a Mr. Petri,

00:04:23,390 --> 00:04:24,290
hence "Petri nets".

00:04:24,290 --> 00:04:27,710
Unlike many other model mechanisms

00:04:27,710 --> 00:04:33,410
that we cover in the lecture,
they have very formal semantics.

00:04:33,410 --> 00:04:35,105
So they are really precisely
mathematically defined.

00:04:35,105 --> 00:04:37,190
And also the questions
about Petri nets can all

00:04:37,190 --> 00:04:40,340
be defined mathematically, and
we can also give proofs of them.

00:04:40,340 --> 00:04:43,190
We won't do that here, but in the
lecture you should get to know a very

00:04:43,190 --> 00:04:49,610
formal mechanism in addition
to the more intuitive

00:04:49,610 --> 00:04:53,090
and semi-formal modeling methods of UML.

00:04:53,090 --> 00:04:57,890
This is also a motivation
why Petri nets are part of

00:04:57,890 --> 00:05:00,785
this course, and no small part at that.

00:05:00,785 --> 00:05:04,520
You probably won't be familiar
with Petri nets from school,

00:05:04,520 --> 00:05:07,100
but possibly from the pre-course in
computer science, if you took that.

00:05:07,100 --> 00:05:11,390
And some of you, maybe not the Komedia

00:05:11,390 --> 00:05:16,970
students, but the computer science
and ISE students, may encounter Petri

00:05:16,970 --> 00:05:19,730
nets again in other courses.

00:05:19,730 --> 00:05:23,930
That could be in courses on
operating systems, real-time systems,

00:05:23,930 --> 00:05:31,280
or at the latest in the master's when you hear
Distributed Systems or courses with Ms. KÃ¶nig.

00:05:31,280 --> 00:05:38,040
We start with an introduction.

00:05:38,610 --> 00:05:44,520
Now in this video still rather informally,
to give you simply again more motivation.

00:05:44,520 --> 00:05:48,630
On another example, which I will discuss
in more detail at this point already than

00:05:48,630 --> 00:05:50,430
the house building example
that we just saw.

00:05:50,430 --> 00:05:57,090
And then this week and next week it will be
about the formal basics, and the representation,

00:05:57,090 --> 00:06:03,150
and the expression of the dynamics,
and the concept of reachability graphs.

00:06:03,150 --> 00:06:08,670
Then that's sort of the semantics of
Petri nets unfolded, capturing all

00:06:08,670 --> 00:06:12,810
the flows of a Petri net.

00:06:12,810 --> 00:06:16,350
But that's probably going to
be on our minds next week.

00:06:21,720 --> 00:06:22,320
I had already mentioned:

00:06:22,320 --> 00:06:28,980
Petri nets are a formalism of dynamic
modeling, for certain situations.

00:06:28,980 --> 00:06:33,120
So whenever it is somehow
about representing transitions.

00:06:33,120 --> 00:06:36,780
I mentioned actions earlier, or
single steps in a run of a system.

00:06:36,780 --> 00:06:41,460
And often, at least
in the background, maybe even

00:06:41,460 --> 00:06:45,960
in the foreground, is
the handling of resources.

00:06:45,960 --> 00:06:50,190
We have a system where
certain steps are allowed to

00:06:50,190 --> 00:06:51,480
run, but only under certain conditions.

00:06:51,480 --> 00:06:56,430
So in the house construction
example, there was the position of a

00:06:56,430 --> 00:06:59,760
plan that was created, that is dealt
with, that perhaps has to be checked.

00:06:59,760 --> 00:07:02,550
And there it may be that certain steps in

00:07:02,550 --> 00:07:04,710
this process are only possible
if such a plan exists.

00:07:04,710 --> 00:07:09,270
Or in another system, those resources

00:07:09,270 --> 00:07:12,000
might actually be material resources.

00:07:12,000 --> 00:07:17,100
Like in the snack vending machine example
that I briefly talked about last week.

00:07:17,100 --> 00:07:21,420
There, that could just be
the snacks and the chip packs

00:07:21,420 --> 00:07:23,640
or cookie packs that were available,
or the money from the vending machine.

00:07:24,330 --> 00:07:28,770
Those would all be things where
you're talking about resources.

00:07:28,770 --> 00:07:31,770
And those can be
captured well in Petri nets.

00:07:31,770 --> 00:07:36,030
And easier than, say, in a
very simple graph where you

00:07:36,030 --> 00:07:38,750
have to represent all the states.

00:07:38,750 --> 00:07:41,480
In the snack machine example
last week, I talked about how

00:07:41,480 --> 00:07:46,760
there would be almost 4000 states if you
wanted to capture all possible constellations

00:07:46,760 --> 00:07:50,540
of the machine through
a flat state diagram.

00:07:50,540 --> 00:07:54,410
This will be realized differently
and more simply in Petri nets.

00:07:54,410 --> 00:07:59,840
On the one hand, this allows us to
model something like capacities well.

00:07:59,840 --> 00:08:02,930
For example, that the snack machine has a

00:08:02,930 --> 00:08:08,840
certain maximum capacity for
its respective resources.

00:08:08,840 --> 00:08:10,670
On the other hand, the spatial
distribution of resources.

00:08:10,670 --> 00:08:13,850
So if we somehow imagine systems

00:08:13,850 --> 00:08:16,880
where it matters where certain
resources are stored, and

00:08:16,880 --> 00:08:22,340
concepts like concurrency
and parallelism play a role.

00:08:22,340 --> 00:08:25,430
I'll talk about that briefly on
a slide in a moment as well.

00:08:25,430 --> 00:08:28,370
And whenever we have resources

00:08:28,370 --> 00:08:33,800
that are perhaps used by different
consumers, there can be conflicts.

00:08:33,800 --> 00:08:37,880
And that's also going to be a central
concept in the analysis of Petri nets:

00:08:37,880 --> 00:08:44,270
When or if there are conflicts between
different actions in the Petri net, for example.

00:08:44,270 --> 00:08:48,920
And what is also peculiar to Petri nets:

00:08:48,920 --> 00:08:51,890
That they have a fairly intuitive
graphical representation.

00:08:51,890 --> 00:08:53,990
One defines Petri
nets mathematically, but

00:08:53,990 --> 00:08:58,940
they also allow for a graphical representation,
which is what we will largely work with.

00:08:58,940 --> 00:09:00,050
However, not exclusively:

00:09:00,050 --> 00:09:02,690
We will also definitely build the

00:09:02,690 --> 00:09:05,840
bridge to the mathematical,
set-theoretic representation.

00:09:12,260 --> 00:09:16,960
As far as practice is concerned, I have
already mentioned some areas of application.

00:09:16,960 --> 00:09:18,860
At least mentioned where you might
encounter this in your studies.

00:09:18,860 --> 00:09:21,920
For example, in distributed systems,
in the modeling of distributed

00:09:21,920 --> 00:09:24,110
systems, or in the analysis
of distributed systems.

00:09:24,110 --> 00:09:30,020
And I already mentioned that in the
UML language family, which is widely

00:09:30,020 --> 00:09:36,230
used in software engineering,
Petri nets as such do not exist

00:09:36,230 --> 00:09:38,870
(directly in the representation
as found here and also in books).

00:09:38,870 --> 00:09:42,170
But the activity diagrams present in UML

00:09:42,170 --> 00:09:46,910
are slight variations (and other
representations ultimately) of Petri nets.

00:09:46,910 --> 00:09:50,180
We will also want
to build this bridge later.

00:09:55,570 --> 00:10:00,010
Now I had just mentioned
concurrency and parallelism here.

00:10:00,010 --> 00:10:03,670
I would like to clarify these
terms on the next slide.

00:10:03,670 --> 00:10:05,830
What is parallelism?

00:10:05,830 --> 00:10:10,240
This is the
everyday term for parallelism.

00:10:10,240 --> 00:10:14,350
So things take place in parallel,
that is, simultaneously.

00:10:14,350 --> 00:10:19,960
From everyday life, there is
the phenomenon in many places.

00:10:19,960 --> 00:10:24,340
And of course also in computer science, for
example, there are many situations of parallelism.

00:10:24,340 --> 00:10:28,810
So maybe if you have a game graphics
card, you might have thought about

00:10:28,810 --> 00:10:33,550
how many parallel operations it
can perform before you bought it.

00:10:33,550 --> 00:10:38,200
There is talk that in order to
render many polygons at the same

00:10:38,200 --> 00:10:44,080
time, this graphics card should have many efficient
processing cores that should work in parallel.

00:10:44,080 --> 00:10:46,480
Parallelism plays a role here.

00:10:46,480 --> 00:10:51,580
For example, when it comes to computer efficiency,
parallelism is a typical measure these days.

00:10:55,000 --> 00:10:56,860
What is concurrency?

00:10:56,860 --> 00:10:58,210
It sounds something like that.

00:10:58,210 --> 00:11:01,660
Something is running side by side.

00:11:01,660 --> 00:11:03,490
That also sounds like parallelism.

00:11:03,490 --> 00:11:05,500
Yet, there is an extra term here.

00:11:05,500 --> 00:11:10,870
Concurrency is basically more the
mathematical requirement for things to

00:11:10,870 --> 00:11:15,070
happen in parallel or to
be processed in parallel.

00:11:15,070 --> 00:11:20,350
So we'll talk about concurrency
of individual actions

00:11:20,350 --> 00:11:21,370
in a Petri net.

00:11:21,370 --> 00:11:24,100
And what will be meant by that

00:11:24,100 --> 00:11:28,210
is that they can/may be executed in
parallel, but they don't have to be.

00:11:28,210 --> 00:11:33,340
That is, if there is no causal dependency
between them (for example, they also do not

00:11:33,340 --> 00:11:36,730
interfere with each other, for example
because they want to access the same

00:11:36,730 --> 00:11:40,750
resources in a conflicting way), then
these actions will be concurrent.

00:11:40,750 --> 00:11:43,120
There will be a formal
definition of what that means.

00:11:43,120 --> 00:11:46,090
And thus concurrency is
the more general term.

00:11:46,090 --> 00:11:52,330
Because only when actions are concurrent,
so to speak, no problems would arise from

00:11:52,330 --> 00:11:55,930
their parallel execution, then we can
actually implement them in parallel.

00:11:55,930 --> 00:12:00,730
Formally, we will deal with concurrency.

00:12:00,730 --> 00:12:04,840
But the motivation for that
will be that we want to capture

00:12:04,840 --> 00:12:08,080
situations where parallel
execution would be possible.

00:12:08,080 --> 00:12:13,986
And of course there are lots of
examples where that becomes relevant.

00:12:13,986 --> 00:12:20,020
I had just mentioned these computations
in a graphics card, for example.

00:12:20,020 --> 00:12:22,990
But also any other application

00:12:22,990 --> 00:12:27,970
on a computer
will often have concurrency.

00:12:27,970 --> 00:12:32,140
For example a GUI and
calculations in a spreadsheet:

00:12:32,890 --> 00:12:36,400
Even while calculations are taking place
(perhaps a process is running that performs

00:12:36,400 --> 00:12:40,180
the calculations in the spreadsheet), we
still want to be able to operate the GUI.

00:12:40,180 --> 00:12:44,950
And not be slowed down somehow, and
not be able to operate the program.

00:12:44,950 --> 00:12:49,484
This is then possible because
the GUI operations and the

00:12:49,484 --> 00:12:53,350
graphical application operations are
concurrent with the calculations.

00:12:53,350 --> 00:12:55,000
Because they don't
access the same resources.

00:12:55,000 --> 00:13:00,640
And how that is then implemented
exactly, whether or not two different

00:13:00,640 --> 00:13:03,700
computer cores actually perform these two
actions, is not so relevant for that.

00:13:04,270 --> 00:13:05,290
That's an implementation detail.

00:13:05,290 --> 00:13:08,620
What's important is establishing
the concurrency of these

00:13:08,620 --> 00:13:09,970
two processes, computing and rendering.

00:13:09,970 --> 00:13:12,610
And of course you
can find many other examples,

00:13:12,610 --> 00:13:14,620
even in the
everyday world, of concurrency.

00:13:14,620 --> 00:13:17,260
So any banking system:

00:13:17,260 --> 00:13:24,400
If you go into a branch of a bank
and operate a statement printer, and

00:13:24,400 --> 00:13:28,690
a family member of yours is at
the same time perhaps making

00:13:28,690 --> 00:13:32,140
transfers at another terminal, then
somehow the system should be realized

00:13:32,140 --> 00:13:38,920
in such a way that these actions
can be implemented concurrently.

00:13:38,920 --> 00:13:43,750
So that the bank has control
over the fact that incorrect

00:13:43,750 --> 00:13:49,660
states are not created in the system
by the execution of these two actions.

00:13:52,870 --> 00:13:58,870
For example, there is resource access to
the money or to the account balances.

00:13:58,870 --> 00:14:05,800
And then, it should certainly
run correctly in each case.

00:14:05,800 --> 00:14:09,970
And there could be a modeling
with Petri nets in the background.

00:14:09,970 --> 00:14:13,750
Probably in the concrete case it will
be a more complicated modeling tool

00:14:13,750 --> 00:14:16,840
than just Petri nets,
which is in the background.

00:14:17,860 --> 00:14:22,120
But the questions can be
asked already for Petri nets.

00:14:25,840 --> 00:14:26,815
This is quite abstract.

00:14:26,815 --> 00:14:34,090
I had already promised that we would
also look at a simple but concrete

00:14:34,090 --> 00:14:35,770
example already in this video.

00:14:35,770 --> 00:14:39,640
This is an example that you may
well have encountered before.

00:14:39,640 --> 00:14:45,550
This is a typical also playful
computer science problem:

00:14:45,550 --> 00:14:47,440
The so-called Dining Philosophers.

00:14:47,440 --> 00:14:49,810
This exists in various forms.

00:14:49,810 --> 00:14:54,460
I'm actually looking at the simplest
version here, with only three philosophers.

00:14:54,460 --> 00:14:57,340
It is also possible
to formulate with more

00:14:57,340 --> 00:14:59,830
philosophers, and also with other
arrangements of these philosophers.

00:14:59,830 --> 00:15:02,020
In our simple case,
we have three philosophers

00:15:02,020 --> 00:15:06,835
sitting around a round table
who obviously want to dine.

00:15:06,835 --> 00:15:11,500
These are the dining philosophers, that
is, they are hungry and would like to eat.

00:15:11,500 --> 00:15:15,430
There is also no shortage of food.

00:15:15,430 --> 00:15:17,800
So there is actually a plate
of food in front of everyone.

00:15:17,800 --> 00:15:23,200
But there is a scarcity
of tools to eat this food.

00:15:23,200 --> 00:15:27,880
Because the three philosophers
together have only three forks.

00:15:27,880 --> 00:15:31,226
We imagine these three
philosophers P1, P2, P3.

00:15:31,226 --> 00:15:35,800
They sit around the table, and there
are the forks, also three in number.

00:15:35,800 --> 00:15:38,140
And they lie
exactly between the philosophers.

00:15:39,220 --> 00:15:40,660
So far so good.

00:15:40,660 --> 00:15:43,810
The problem is that
when the philosophers are

00:15:43,810 --> 00:15:47,110
hungry and want to eat,
they need two forks each.

00:15:47,110 --> 00:15:49,810
So even though they have food in
front of them, they can't do anything

00:15:49,810 --> 00:15:54,160
with it unless they have two forks
(one in each of their hands).

00:15:55,540 --> 00:15:55,840
You see:

00:15:55,840 --> 00:15:58,540
Now obviously the three philosophers
can't eat at the same time.

00:15:58,540 --> 00:16:00,610
Then you would need at least six
forks, but there are only three.

00:16:02,470 --> 00:16:04,930
The question is, of course:

00:16:04,930 --> 00:16:05,830
How do they agree?

00:16:05,830 --> 00:16:07,090
Or, can they agree?

00:16:07,090 --> 00:16:08,920
What happens when
one philosopher gets hungry?

00:16:08,920 --> 00:16:15,490
Well, then that philosopher
has to pick up the two forks.

00:16:15,490 --> 00:16:19,640
And the philosophers do this
according to a very strict scheme.

00:16:20,240 --> 00:16:26,450
They may have committed themselves beforehand
and are inflexible in their actions.

00:16:26,450 --> 00:16:29,390
In any case, they always have
to behave in the same way.

00:16:29,390 --> 00:16:33,680
Namely, a philosopher always
needs both forks for

00:16:33,680 --> 00:16:39,740
eating and takes the right fork first.

00:16:39,740 --> 00:16:44,480
So P2 would take F1 first, then
the corresponding left fork.

00:16:44,480 --> 00:16:49,880
Then P2 would eat and put both
forks back at the same time.

00:16:52,160 --> 00:16:56,840
Now one can already ask certain
questions about this simple system.

00:16:56,840 --> 00:17:00,110
So, can several philosophers
eat in parallel here?

00:17:00,110 --> 00:17:03,710
Is parallelism possible here?

00:17:03,710 --> 00:17:07,460
One can already think about that
on the basis of the forks and

00:17:07,460 --> 00:17:08,390
philosophers that it will not work.

00:17:08,390 --> 00:17:12,140
Because already if two philosophers wanted
to eat, they would need four forks together.

00:17:12,140 --> 00:17:14,390
There are only three forks,
so parallelism is not given.

00:17:16,130 --> 00:17:21,350
Is there perhaps, if we check more fine-grained,
at least concurrency between individual actions?

00:17:21,350 --> 00:17:28,700
So maybe reaching for the forks
is at least independent of eating?

00:17:28,700 --> 00:17:35,060
This can be investigated when we have
described the system more precisely,

00:17:35,060 --> 00:17:39,290
when we have made
these verbal rules more firm.

00:17:39,290 --> 00:17:39,886
We will do that later.

00:17:39,886 --> 00:17:44,690
We will represent this system as a Petri
net and then answer such questions formally.

00:17:44,690 --> 00:17:48,350
What we can
already consider informally here

00:17:48,350 --> 00:17:50,750
is that there can be
problems here in any case.

00:17:50,750 --> 00:17:53,030
That maybe the philosophers are actually

00:17:53,030 --> 00:17:54,740
starving because they can't
get to the food.

00:17:54,740 --> 00:18:01,580
For example, because of their stubbornness
to always reach for the right fork first and

00:18:01,580 --> 00:18:03,140
then, independently, the left fork.

00:18:03,140 --> 00:18:06,950
Thus, in an unfavorable
case, it could happen

00:18:06,950 --> 00:18:13,580
that, for example, P2 reaches for F1,
and before P2 can reach for F2, P3

00:18:13,580 --> 00:18:20,000
reaches for F2 (because P3 has also become hungry
and also reaches for his right fork first).

00:18:21,950 --> 00:18:26,180
If then the unfavorable case occurs that P1 also
becomes hungry and reaches for F3, then each

00:18:26,180 --> 00:18:30,520
of the philosophers would have
a right fork in his hand, and

00:18:30,520 --> 00:18:33,993
none of the philosophers would
have a left fork in his hand.

00:18:33,993 --> 00:18:35,050
So no one would be able to eat.

00:18:35,050 --> 00:18:39,160
But unfortunately, this
would not cause any of the

00:18:39,160 --> 00:18:42,310
philosophers to put their
right fork back either.

00:18:42,310 --> 00:18:44,860
Because their stubborn behavior,
as described above, is:

00:18:44,860 --> 00:18:50,050
Grab right fork, then grab
left fork, eat, put it back.

00:18:50,050 --> 00:18:53,830
So here, in the worst case, if all three

00:18:53,830 --> 00:18:57,280
philosophers grabbed the right fork,
the system would be "in deadlock".

00:18:57,280 --> 00:18:58,720
That's what we'll call it later.

00:18:58,720 --> 00:19:03,640
So ultimately the philosophers have
to starve because together they have

00:19:03,640 --> 00:19:08,500
maneuvered themselves into a situation
where no progress is possible.

00:19:08,500 --> 00:19:13,210
That too, this kind of
deadlocking, we'll be able to

00:19:13,210 --> 00:19:17,140
grasp formally in general terms for Petri
nets and then apply to cases like this.

00:19:20,770 --> 00:19:23,710
So questions that arise
here for the example, but

00:19:23,710 --> 00:19:26,200
just also for general Petri
nets, are things like:

00:19:26,200 --> 00:19:30,850
Can the modeled system
continuously make further progress?

00:19:30,850 --> 00:19:35,770
Is it the case that at any point in
time a further step is still possible?

00:19:35,770 --> 00:19:37,900
This would not be
the case in this example.

00:19:37,900 --> 00:19:41,440
Because in the case where all three
philosophers have the right fork in each case,

00:19:41,440 --> 00:19:45,400
but can neither reach for the left
one, nor eat, the system would be dead.

00:19:45,400 --> 00:19:50,170
In fact, dead in the sense that the
philosophers will eventually starve to death.

00:19:50,170 --> 00:19:55,660
Then we, or the philosophers themselves, would
have maneuvered the system into a dead end.

00:19:55,660 --> 00:19:57,760
One wants to avoid that in practice.

00:19:57,760 --> 00:20:02,230
So one wants to be able to capture that:
when a system has this property or not.

00:20:02,230 --> 00:20:09,820
Does every single modeled action get
the chance to actually be executed?

00:20:09,820 --> 00:20:15,700
So if we have the system like on the previous
slide, is it even the case that every

00:20:15,700 --> 00:20:19,420
meal action could be
executed at some point?

00:20:19,420 --> 00:20:23,260
So even with good will,
is it at all possible that

00:20:23,260 --> 00:20:25,510
every philosopher could
get a turn with food once?

00:20:25,510 --> 00:20:28,720
Only once or even repeated
as many times as desired?

00:20:28,720 --> 00:20:34,150
So, unless the philosophers are
somehow clumsy, would it be possible

00:20:34,150 --> 00:20:37,810
for each of them to be allowed to
eat over and over again as well?

00:20:37,810 --> 00:20:42,480
That's a question of
fairness in a sense, too.

00:20:42,480 --> 00:20:49,560
For example, that two of the philosophers
can't starve the third philosopher.

00:20:49,560 --> 00:20:55,680
You have to ask yourself whether the
system is fair in this or a similar sense.

00:20:55,680 --> 00:20:59,910
These are characteristics that
are not only applicable to this one system.

00:21:00,630 --> 00:21:04,080
Thus, fairness is also a question
that can be generally posed,

00:21:04,080 --> 00:21:08,400
and then asked about different Petri nets
and various systems.
00:21:08,400 --> 00:21:11,850
Here I related it to the
philosophers in each case.

00:21:18,300 --> 00:21:19,810
Are there dependencies
between the actions?

00:21:19,810 --> 00:21:20,980
In that case, sure.

00:21:20,980 --> 00:21:21,430
We know:

00:21:21,430 --> 00:21:26,080
A philosopher can only eat when
he or she has the forks in hand.

00:21:26,080 --> 00:21:30,790
So the fork-grasping is somehow a
causal condition for eating here.

00:21:30,790 --> 00:21:33,070
That's obvious in the example.

00:21:33,070 --> 00:21:36,910
In other modeled systems, it can
be more interesting to figure

00:21:36,910 --> 00:21:40,660
out what causal dependencies
exist between actions.

00:21:40,660 --> 00:21:41,920
Because those may
not be immediately obvious,

00:21:41,920 --> 00:21:47,770
and have to be inferred from the
behavior of the system first.

00:21:50,230 --> 00:21:54,520
Actions can be conditional, but
actions can also contradict each other.

00:21:54,520 --> 00:21:57,100
So they can be mutually exclusive.

00:21:57,100 --> 00:21:59,680
That an action can never be executed

00:21:59,680 --> 00:22:01,810
if another action would also
be possible, for example.

00:22:01,810 --> 00:22:05,620
Are there restrictions
on resource consumption?

00:22:05,620 --> 00:22:09,700
In the example just now, there would
be no obvious resource except for the

00:22:09,700 --> 00:22:13,030
food, except for the forks, if
you also model them as a resource.

00:22:13,030 --> 00:22:20,560
In the snack vending machine example mentioned
earlier, one might also ask whether there are inherent

00:22:20,560 --> 00:22:24,880
constraints on the presence and
consumption of resources in the system.

00:22:24,880 --> 00:22:31,300
So, for example, is the system designed in
such a way that it is never possible (not only

00:22:31,300 --> 00:22:37,330
for external reasons, but for reasons of the system
itself) to have more than ten coins in the cash register?

00:22:46,190 --> 00:22:50,600
What is written below does not
occur in this example, but will be

00:22:50,600 --> 00:22:53,570
of interest to us in the further course.

00:22:53,570 --> 00:23:02,060
Namely that even a finitely described
Petri net can ultimately correspond

00:23:02,060 --> 00:23:05,390
to an infinitely unfolded system.

00:23:05,390 --> 00:23:11,720
So it is possible to have Petri nets
which are finite (i.e. fit completely on a

00:23:11,720 --> 00:23:18,500
slide, like the example just now),
but whose flat state diagram, in the

00:23:18,500 --> 00:23:22,190
sense of the Wolf-Ziege-Kohlkopf
graph, for example, would be infinite.

00:23:22,190 --> 00:23:26,420
And infinite things are
always hard to deal with,

00:23:26,420 --> 00:23:31,520
but some of these analyses for Petri nets
are feasible (for the Petri net) even

00:23:31,520 --> 00:23:34,820
if the corresponding flat
state diagram were infinite.

00:23:35,660 --> 00:23:40,670
Then we derive a great advantage
from working with Petri nets instead

00:23:40,670 --> 00:23:47,390
of naively just forming flat
state diagrams all the time.

00:23:47,390 --> 00:23:51,860
We will encounter this when we go
deeper into the individual analyses.

00:23:51,860 --> 00:23:54,770
We will not deal with
all of them formally here,

00:23:54,770 --> 00:24:03,260
but at least the first, the second,
and to some extent the last two.

00:24:13,370 --> 00:24:20,630
Practical applications then exist in many
areas of computer science or other fields.

00:24:20,630 --> 00:24:26,690
There is the notion
of business process modeling.

00:24:26,690 --> 00:24:30,740
There Petri nets or related
modeling mechanisms are applied.

00:24:30,740 --> 00:24:36,830
Modeling of web services, description
of graphical user interfaces,

00:24:36,830 --> 00:24:41,120
process modeling for operating systems
(where concurrency plays an important role).

00:24:41,120 --> 00:24:44,810
In engineering applications
and many other

00:24:44,810 --> 00:24:49,550
areas Petri nets or similar
mechanisms are applicable.

00:24:49,550 --> 00:24:54,890
We will repeatedly pick up individual
simplified examples that may fall into

00:24:54,890 --> 00:24:57,710
these domains, also in the exercises.

00:24:57,710 --> 00:25:06,860
We will not schedule an in-depth look at
exactly one of these domains in the lecture.

00:25:06,860 --> 00:25:09,290
These are simply a few keywords in

00:25:09,290 --> 00:25:14,030
which domains Petri nets or
related mechanisms (such as

00:25:14,030 --> 00:25:17,270
also the activity graphs)
can be found in practice.

00:25:17,270 --> 00:25:20,630
We will of course look
at a few simple examples.
